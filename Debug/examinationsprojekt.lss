
examinationsprojekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003288  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000568  20070000  00083288  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00008288  20070568  000837f0  00010568  2**3
                  ALLOC
  3 .stack        00002000  200787f0  0008ba78  00010568  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010568  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010591  2**0
                  CONTENTS, READONLY
  6 .debug_info   00011aed  00000000  00000000  000105ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f2d  00000000  00000000  000220d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006c3e  00000000  00000000  00025006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ba0  00000000  00000000  0002bc44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ab8  00000000  00000000  0002c7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a2d7  00000000  00000000  0002d29c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012014  00000000  00000000  00047573  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00068c93  00000000  00000000  00059587  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ba0  00000000  00000000  000c221c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007a7f0 	.word	0x2007a7f0
   80004:	0008226d 	.word	0x0008226d
   80008:	00082269 	.word	0x00082269
   8000c:	00082269 	.word	0x00082269
   80010:	00082269 	.word	0x00082269
   80014:	00082269 	.word	0x00082269
   80018:	00082269 	.word	0x00082269
	...
   8002c:	00080859 	.word	0x00080859
   80030:	00082269 	.word	0x00082269
   80034:	00000000 	.word	0x00000000
   80038:	000808d5 	.word	0x000808d5
   8003c:	00080911 	.word	0x00080911
   80040:	00082269 	.word	0x00082269
   80044:	00082269 	.word	0x00082269
   80048:	00082269 	.word	0x00082269
   8004c:	00082269 	.word	0x00082269
   80050:	00082269 	.word	0x00082269
   80054:	00082269 	.word	0x00082269
   80058:	00082269 	.word	0x00082269
   8005c:	00082269 	.word	0x00082269
   80060:	00082269 	.word	0x00082269
   80064:	00082269 	.word	0x00082269
   80068:	00000000 	.word	0x00000000
   8006c:	000820d9 	.word	0x000820d9
   80070:	000820ed 	.word	0x000820ed
   80074:	00082101 	.word	0x00082101
   80078:	00082115 	.word	0x00082115
	...
   80084:	00082269 	.word	0x00082269
   80088:	00082269 	.word	0x00082269
   8008c:	00082269 	.word	0x00082269
   80090:	00082269 	.word	0x00082269
   80094:	00082269 	.word	0x00082269
   80098:	00082269 	.word	0x00082269
   8009c:	00082269 	.word	0x00082269
   800a0:	00082269 	.word	0x00082269
   800a4:	00000000 	.word	0x00000000
   800a8:	00082269 	.word	0x00082269
   800ac:	00082269 	.word	0x00082269
   800b0:	00082269 	.word	0x00082269
   800b4:	00082269 	.word	0x00082269
   800b8:	00082269 	.word	0x00082269
   800bc:	00082269 	.word	0x00082269
   800c0:	00082269 	.word	0x00082269
   800c4:	00082269 	.word	0x00082269
   800c8:	00082269 	.word	0x00082269
   800cc:	00082269 	.word	0x00082269
   800d0:	00082269 	.word	0x00082269
   800d4:	00082269 	.word	0x00082269
   800d8:	00082269 	.word	0x00082269
   800dc:	00082269 	.word	0x00082269
   800e0:	00082269 	.word	0x00082269
   800e4:	00082269 	.word	0x00082269
   800e8:	00082269 	.word	0x00082269
   800ec:	00082269 	.word	0x00082269
   800f0:	00082269 	.word	0x00082269

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070568 	.word	0x20070568
   80110:	00000000 	.word	0x00000000
   80114:	00083288 	.word	0x00083288

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00083288 	.word	0x00083288
   80144:	2007056c 	.word	0x2007056c
   80148:	00083288 	.word	0x00083288
   8014c:	00000000 	.word	0x00000000

00080150 <adc_config>:

#include <asf.h>
#include "adc_func.h"

void adc_config(void)
{
   80150:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80152:	2025      	movs	r0, #37	; 0x25
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <adc_config+0x40>)
   80156:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);
   80158:	4c0e      	ldr	r4, [pc, #56]	; (80194 <adc_config+0x44>)
   8015a:	4620      	mov	r0, r4
   8015c:	490e      	ldr	r1, [pc, #56]	; (80198 <adc_config+0x48>)
   8015e:	4a0f      	ldr	r2, [pc, #60]	; (8019c <adc_config+0x4c>)
   80160:	2300      	movs	r3, #0
   80162:	4d0f      	ldr	r5, [pc, #60]	; (801a0 <adc_config+0x50>)
   80164:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   80166:	4620      	mov	r0, r4
   80168:	2100      	movs	r1, #0
   8016a:	460a      	mov	r2, r1
   8016c:	460b      	mov	r3, r1
   8016e:	4d0d      	ldr	r5, [pc, #52]	; (801a4 <adc_config+0x54>)
   80170:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES);
   80172:	4620      	mov	r0, r4
   80174:	2110      	movs	r1, #16
   80176:	4b0c      	ldr	r3, [pc, #48]	; (801a8 <adc_config+0x58>)
   80178:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);
   8017a:	4620      	mov	r0, r4
   8017c:	210a      	movs	r1, #10
   8017e:	4b0b      	ldr	r3, [pc, #44]	; (801ac <adc_config+0x5c>)
   80180:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   80182:	4620      	mov	r0, r4
   80184:	2100      	movs	r1, #0
   80186:	460a      	mov	r2, r1
   80188:	4b09      	ldr	r3, [pc, #36]	; (801b0 <adc_config+0x60>)
   8018a:	4798      	blx	r3
   8018c:	bd38      	pop	{r3, r4, r5, pc}
   8018e:	bf00      	nop
   80190:	00082215 	.word	0x00082215
   80194:	400c0000 	.word	0x400c0000
   80198:	0a037a00 	.word	0x0a037a00
   8019c:	01312d00 	.word	0x01312d00
   801a0:	000801b5 	.word	0x000801b5
   801a4:	00080209 	.word	0x00080209
   801a8:	000801e9 	.word	0x000801e9
   801ac:	00080231 	.word	0x00080231
   801b0:	000801f9 	.word	0x000801f9

000801b4 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   801b4:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   801b6:	2401      	movs	r4, #1
   801b8:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   801ba:	2400      	movs	r4, #0
   801bc:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   801be:	f240 2502 	movw	r5, #514	; 0x202
   801c2:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   801c6:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   801ca:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   801ce:	6845      	ldr	r5, [r0, #4]
   801d0:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   801d2:	0052      	lsls	r2, r2, #1
   801d4:	fbb1 f1f2 	udiv	r1, r1, r2
   801d8:	1e4a      	subs	r2, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   801da:	0212      	lsls	r2, r2, #8
   801dc:	b292      	uxth	r2, r2
   801de:	4313      	orrs	r3, r2
   801e0:	6043      	str	r3, [r0, #4]
	return 0;
}
   801e2:	4620      	mov	r0, r4
   801e4:	bc30      	pop	{r4, r5}
   801e6:	4770      	bx	lr

000801e8 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   801e8:	6843      	ldr	r3, [r0, #4]
   801ea:	f023 0310 	bic.w	r3, r3, #16
   801ee:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   801f0:	6843      	ldr	r3, [r0, #4]
   801f2:	4319      	orrs	r1, r3
   801f4:	6041      	str	r1, [r0, #4]
   801f6:	4770      	bx	lr

000801f8 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   801f8:	6843      	ldr	r3, [r0, #4]
   801fa:	4319      	orrs	r1, r3
   801fc:	01d2      	lsls	r2, r2, #7
   801fe:	b2d2      	uxtb	r2, r2
   80200:	4311      	orrs	r1, r2
   80202:	6041      	str	r1, [r0, #4]
   80204:	4770      	bx	lr
   80206:	bf00      	nop

00080208 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80208:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8020a:	6844      	ldr	r4, [r0, #4]
   8020c:	4322      	orrs	r2, r4
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   8020e:	0609      	lsls	r1, r1, #24
   80210:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
   80214:	430a      	orrs	r2, r1
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80216:	071b      	lsls	r3, r3, #28
   80218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   8021c:	4313      	orrs	r3, r2
   8021e:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80220:	f85d 4b04 	ldr.w	r4, [sp], #4
   80224:	4770      	bx	lr
   80226:	bf00      	nop

00080228 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80228:	2302      	movs	r3, #2
   8022a:	6003      	str	r3, [r0, #0]
   8022c:	4770      	bx	lr
   8022e:	bf00      	nop

00080230 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80230:	2301      	movs	r3, #1
   80232:	408b      	lsls	r3, r1
   80234:	6103      	str	r3, [r0, #16]
   80236:	4770      	bx	lr

00080238 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   80238:	6a00      	ldr	r0, [r0, #32]
}
   8023a:	4770      	bx	lr

0008023c <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   8023c:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   8023e:	4770      	bx	lr

00080240 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80240:	b4f0      	push	{r4, r5, r6, r7}
   80242:	b08c      	sub	sp, #48	; 0x30
   80244:	4607      	mov	r7, r0
   80246:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80248:	ac01      	add	r4, sp, #4
   8024a:	4d11      	ldr	r5, [pc, #68]	; (80290 <pwm_clocks_generate+0x50>)
   8024c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8024e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80254:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80258:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   8025c:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8025e:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80260:	f852 3b04 	ldr.w	r3, [r2], #4
   80264:	fbb6 f3f3 	udiv	r3, r6, r3
   80268:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   8026c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80270:	d905      	bls.n	8027e <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
   80272:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80274:	280b      	cmp	r0, #11
   80276:	d1f3      	bne.n	80260 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   80278:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8027c:	e005      	b.n	8028a <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   8027e:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
   80280:	bf94      	ite	ls
   80282:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
   80286:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
   8028a:	b00c      	add	sp, #48	; 0x30
   8028c:	bcf0      	pop	{r4, r5, r6, r7}
   8028e:	4770      	bx	lr
   80290:	000831f8 	.word	0x000831f8

00080294 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80294:	b570      	push	{r4, r5, r6, lr}
   80296:	4606      	mov	r6, r0
   80298:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8029a:	6808      	ldr	r0, [r1, #0]
   8029c:	b140      	cbz	r0, 802b0 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8029e:	6889      	ldr	r1, [r1, #8]
   802a0:	4b0e      	ldr	r3, [pc, #56]	; (802dc <pwm_init+0x48>)
   802a2:	4798      	blx	r3
   802a4:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   802a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   802aa:	4298      	cmp	r0, r3
   802ac:	d101      	bne.n	802b2 <pwm_init+0x1e>
   802ae:	e00e      	b.n	802ce <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   802b0:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   802b2:	6860      	ldr	r0, [r4, #4]
   802b4:	b140      	cbz	r0, 802c8 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   802b6:	68a1      	ldr	r1, [r4, #8]
   802b8:	4b08      	ldr	r3, [pc, #32]	; (802dc <pwm_init+0x48>)
   802ba:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   802bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   802c0:	4298      	cmp	r0, r3
   802c2:	d007      	beq.n	802d4 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
   802c4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   802c8:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   802ca:	2000      	movs	r0, #0
   802cc:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   802ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
   802d2:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   802d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
   802d8:	bd70      	pop	{r4, r5, r6, pc}
   802da:	bf00      	nop
   802dc:	00080241 	.word	0x00080241

000802e0 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   802e0:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   802e2:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   802e4:	8a8a      	ldrh	r2, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   802e6:	684c      	ldr	r4, [r1, #4]
   802e8:	f004 040f 	and.w	r4, r4, #15
   802ec:	4322      	orrs	r2, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   802ee:	890c      	ldrh	r4, [r1, #8]
   802f0:	4322      	orrs	r2, r4
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   802f2:	7a8c      	ldrb	r4, [r1, #10]
   802f4:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
   802f8:	7d8c      	ldrb	r4, [r1, #22]
   802fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   802fe:	7dcc      	ldrb	r4, [r1, #23]
   80300:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80304:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80306:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
   8030a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   8030e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80312:	68ca      	ldr	r2, [r1, #12]
   80314:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80318:	690a      	ldr	r2, [r1, #16]
   8031a:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   8031e:	7d8a      	ldrb	r2, [r1, #22]
   80320:	b13a      	cbz	r2, 80332 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80322:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80324:	8b4a      	ldrh	r2, [r1, #26]
   80326:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   8032a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   8032e:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80332:	6c84      	ldr	r4, [r0, #72]	; 0x48
   80334:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80338:	409a      	lsls	r2, r3
   8033a:	43d2      	mvns	r2, r2
   8033c:	ea02 0504 	and.w	r5, r2, r4
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80340:	7fcc      	ldrb	r4, [r1, #31]
   80342:	fa04 f603 	lsl.w	r6, r4, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80346:	7f8c      	ldrb	r4, [r1, #30]
   80348:	409c      	lsls	r4, r3
   8034a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8034e:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80350:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80352:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80354:	4014      	ands	r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80356:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
   8035a:	fa02 f503 	lsl.w	r5, r2, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   8035e:	f891 2020 	ldrb.w	r2, [r1, #32]
   80362:	409a      	lsls	r2, r3
   80364:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   80368:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   8036a:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   8036c:	2201      	movs	r2, #1
   8036e:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   80370:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80374:	b11c      	cbz	r4, 8037e <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
   80376:	6a04      	ldr	r4, [r0, #32]
   80378:	4314      	orrs	r4, r2
   8037a:	6204      	str	r4, [r0, #32]
   8037c:	e003      	b.n	80386 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   8037e:	6a04      	ldr	r4, [r0, #32]
   80380:	ea24 0402 	bic.w	r4, r4, r2
   80384:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80386:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8038a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8038c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8038e:	bf0c      	ite	eq
   80390:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80392:	4394      	bicne	r4, r2
   80394:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80396:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8039a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8039c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8039e:	bf0c      	ite	eq
   803a0:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   803a4:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   803a8:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   803aa:	2b03      	cmp	r3, #3
   803ac:	d80b      	bhi.n	803c6 <pwm_channel_init+0xe6>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   803ae:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   803b0:	00dd      	lsls	r5, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   803b2:	22ff      	movs	r2, #255	; 0xff
   803b4:	40aa      	lsls	r2, r5
   803b6:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   803ba:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   803be:	40ab      	lsls	r3, r5
   803c0:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   803c2:	66c3      	str	r3, [r0, #108]	; 0x6c
   803c4:	e00c      	b.n	803e0 <pwm_channel_init+0x100>
	} else {
		ch_num -= 4;
   803c6:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   803c8:	6f02      	ldr	r2, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   803ca:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   803cc:	24ff      	movs	r4, #255	; 0xff
   803ce:	409c      	lsls	r4, r3
   803d0:	ea22 0404 	bic.w	r4, r2, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   803d4:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   803d8:	fa02 f303 	lsl.w	r3, r2, r3
   803dc:	4323      	orrs	r3, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   803de:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   803e0:	2000      	movs	r0, #0
   803e2:	bc70      	pop	{r4, r5, r6}
   803e4:	4770      	bx	lr
   803e6:	bf00      	nop

000803e8 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   803e8:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   803ea:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   803ec:	690b      	ldr	r3, [r1, #16]
   803ee:	4293      	cmp	r3, r2
   803f0:	d306      	bcc.n	80400 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   803f2:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   803f4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   803f8:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   803fc:	2000      	movs	r0, #0
   803fe:	e001      	b.n	80404 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80400:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80404:	f85d 4b04 	ldr.w	r4, [sp], #4
   80408:	4770      	bx	lr
   8040a:	bf00      	nop

0008040c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   8040c:	2301      	movs	r3, #1
   8040e:	408b      	lsls	r3, r1
   80410:	6043      	str	r3, [r0, #4]
   80412:	4770      	bx	lr

00080414 <uart_config>:
void uart_config(uint32_t baud)
{
	/* reset and disable receiver & transmitter */
	UART_CR = UART_CR_RSTRX | UART_CR_RSTTX	| UART_CR_RXDIS | UART_CR_TXDIS;
	/* configure baud rate */
	UART_BRGR = (MCK >> 4) / baud;
   80414:	4b0c      	ldr	r3, [pc, #48]	; (80448 <uart_config+0x34>)
   80416:	fbb3 f0f0 	udiv	r0, r3, r0
   8041a:	4b0c      	ldr	r3, [pc, #48]	; (8044c <uart_config+0x38>)
   8041c:	6018      	str	r0, [r3, #0]
	/* configure mode */
	UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;
   8041e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80422:	3b1c      	subs	r3, #28
   80424:	601a      	str	r2, [r3, #0]
	/* enable receiver and transmitter */
	UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80426:	2250      	movs	r2, #80	; 0x50
   80428:	3b04      	subs	r3, #4
   8042a:	601a      	str	r2, [r3, #0]
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   8042c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   80430:	f44f 7280 	mov.w	r2, #256	; 0x100
   80434:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80436:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80438:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   8043a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8043e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   80444:	671a      	str	r2, [r3, #112]	; 0x70
   80446:	4770      	bx	lr
   80448:	00501bd0 	.word	0x00501bd0
   8044c:	400e0820 	.word	0x400e0820

00080450 <uart_transmitter_ready>:
 * Transmitter Ready?
 * Return 1 if "Transmitter Ready" flag is set, otherwise 0.
 */
int uart_transmitter_ready(void)
{
	return (UART_SR & UART_SR_TXRDY);
   80450:	4b02      	ldr	r3, [pc, #8]	; (8045c <uart_transmitter_ready+0xc>)
   80452:	6818      	ldr	r0, [r3, #0]
}
   80454:	f000 0002 	and.w	r0, r0, #2
   80458:	4770      	bx	lr
   8045a:	bf00      	nop
   8045c:	400e0814 	.word	0x400e0814

00080460 <uart_receiver_ready>:
 * Receiver Ready?
 * Return 1 if "Receiver Ready" flag is set, otherwise 0.
 */
int uart_receiver_ready(void)
{
	return (UART_SR & UART_SR_RXRDY);
   80460:	4b02      	ldr	r3, [pc, #8]	; (8046c <uart_receiver_ready+0xc>)
   80462:	6818      	ldr	r0, [r3, #0]
}
   80464:	f000 0001 	and.w	r0, r0, #1
   80468:	4770      	bx	lr
   8046a:	bf00      	nop
   8046c:	400e0814 	.word	0x400e0814

00080470 <uart_send_char>:
 * Send character
 * Write character to Transmit Holding Register.
 */
void uart_send_char(uint8_t chr)
{
	UART_THR = chr;
   80470:	4b01      	ldr	r3, [pc, #4]	; (80478 <uart_send_char+0x8>)
   80472:	6018      	str	r0, [r3, #0]
   80474:	4770      	bx	lr
   80476:	bf00      	nop
   80478:	400e081c 	.word	0x400e081c

0008047c <uart_receive_char>:
 */
char uart_receive_char(void)
{
	char chr = UART_RHR;
	return chr;
   8047c:	4b01      	ldr	r3, [pc, #4]	; (80484 <uart_receive_char+0x8>)
   8047e:	7818      	ldrb	r0, [r3, #0]
   80480:	4770      	bx	lr
   80482:	bf00      	nop
   80484:	400e0818 	.word	0x400e0818

00080488 <main>:
#include "task_regulate.h"

//xSemaphoreHandle sync = 1;

int main (void)
{
   80488:	b570      	push	{r4, r5, r6, lr}
   8048a:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   8048c:	4b19      	ldr	r3, [pc, #100]	; (804f4 <main+0x6c>)
   8048e:	4798      	blx	r3
	board_init();
   80490:	4b19      	ldr	r3, [pc, #100]	; (804f8 <main+0x70>)
   80492:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80494:	200b      	movs	r0, #11
   80496:	4c19      	ldr	r4, [pc, #100]	; (804fc <main+0x74>)
   80498:	47a0      	blx	r4
   8049a:	200c      	movs	r0, #12
   8049c:	47a0      	blx	r4
   8049e:	200d      	movs	r0, #13
   804a0:	47a0      	blx	r4
   804a2:	200e      	movs	r0, #14
   804a4:	47a0      	blx	r4
	ioport_init();
	
	motorshield_init();	
   804a6:	4b16      	ldr	r3, [pc, #88]	; (80500 <main+0x78>)
   804a8:	4798      	blx	r3
	adc_config();
   804aa:	4b16      	ldr	r3, [pc, #88]	; (80504 <main+0x7c>)
   804ac:	4798      	blx	r3
	uart_config(115200);
   804ae:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
   804b2:	4b15      	ldr	r3, [pc, #84]	; (80508 <main+0x80>)
   804b4:	4798      	blx	r3
	pwm_config();
   804b6:	4b15      	ldr	r3, [pc, #84]	; (8050c <main+0x84>)
   804b8:	4798      	blx	r3
	//vSemaphoreCreateBinary(sync);
	

	
	
	xTaskCreate(task_com, (const signed char * const) "Com", TASK_COM_STACKSIZE, NULL, 2, NULL);
   804ba:	2602      	movs	r6, #2
   804bc:	9600      	str	r6, [sp, #0]
   804be:	2400      	movs	r4, #0
   804c0:	9401      	str	r4, [sp, #4]
   804c2:	9402      	str	r4, [sp, #8]
   804c4:	9403      	str	r4, [sp, #12]
   804c6:	4812      	ldr	r0, [pc, #72]	; (80510 <main+0x88>)
   804c8:	4912      	ldr	r1, [pc, #72]	; (80514 <main+0x8c>)
   804ca:	f44f 7200 	mov.w	r2, #512	; 0x200
   804ce:	4623      	mov	r3, r4
   804d0:	4d11      	ldr	r5, [pc, #68]	; (80518 <main+0x90>)
   804d2:	47a8      	blx	r5
	

	
	if(xTaskCreate(task_regulate, (const signed char * const) "Regulate", TASK_COM_STACKSIZE,NULL,2,NULL) !=pdPASS)
   804d4:	9600      	str	r6, [sp, #0]
   804d6:	9401      	str	r4, [sp, #4]
   804d8:	9402      	str	r4, [sp, #8]
   804da:	9403      	str	r4, [sp, #12]
   804dc:	480f      	ldr	r0, [pc, #60]	; (8051c <main+0x94>)
   804de:	4910      	ldr	r1, [pc, #64]	; (80520 <main+0x98>)
   804e0:	f44f 7200 	mov.w	r2, #512	; 0x200
   804e4:	4623      	mov	r3, r4
   804e6:	47a8      	blx	r5
	{
		//Shouldn't happen
	}
	
	vTaskStartScheduler();
   804e8:	4b0e      	ldr	r3, [pc, #56]	; (80524 <main+0x9c>)
   804ea:	4798      	blx	r3
			}
		}
	}
	*/
	
}
   804ec:	4620      	mov	r0, r4
   804ee:	b004      	add	sp, #16
   804f0:	bd70      	pop	{r4, r5, r6, pc}
   804f2:	bf00      	nop
   804f4:	00081d9d 	.word	0x00081d9d
   804f8:	00081e01 	.word	0x00081e01
   804fc:	00082215 	.word	0x00082215
   80500:	00080529 	.word	0x00080529
   80504:	00080151 	.word	0x00080151
   80508:	00080415 	.word	0x00080415
   8050c:	00080575 	.word	0x00080575
   80510:	000805fd 	.word	0x000805fd
   80514:	00083224 	.word	0x00083224
   80518:	00081099 	.word	0x00081099
   8051c:	000806a5 	.word	0x000806a5
   80520:	00083228 	.word	0x00083228
   80524:	0008129d 	.word	0x0008129d

00080528 <motorshield_init>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80528:	4b09      	ldr	r3, [pc, #36]	; (80550 <motorshield_init+0x28>)
   8052a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8052e:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80530:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80534:	4a07      	ldr	r2, [pc, #28]	; (80554 <motorshield_init+0x2c>)
   80536:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   8053a:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8053c:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80540:	6351      	str	r1, [r2, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80542:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80546:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80548:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8054c:	631a      	str	r2, [r3, #48]	; 0x30
   8054e:	4770      	bx	lr
   80550:	400e1000 	.word	0x400e1000
   80554:	400e1200 	.word	0x400e1200

00080558 <pwm_set_duty_cycle>:
		pwm_set_duty_cycle(0);		
	}
}

void pwm_set_duty_cycle(uint32_t dutycycle)
{
   80558:	b508      	push	{r3, lr}
   8055a:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_instance, dutycycle);
   8055c:	4802      	ldr	r0, [pc, #8]	; (80568 <pwm_set_duty_cycle+0x10>)
   8055e:	4903      	ldr	r1, [pc, #12]	; (8056c <pwm_set_duty_cycle+0x14>)
   80560:	4b03      	ldr	r3, [pc, #12]	; (80570 <pwm_set_duty_cycle+0x18>)
   80562:	4798      	blx	r3
   80564:	bd08      	pop	{r3, pc}
   80566:	bf00      	nop
   80568:	40094000 	.word	0x40094000
   8056c:	20070584 	.word	0x20070584
   80570:	000803e9 	.word	0x000803e9

00080574 <pwm_config>:
#include "io_uart.h"

static pwm_channel_t pwm_instance;

void pwm_config(void)
{
   80574:	b530      	push	{r4, r5, lr}
   80576:	b085      	sub	sp, #20
	if(pmc_enable_periph_clk(ID_PWM) == 0) {		
   80578:	2024      	movs	r0, #36	; 0x24
   8057a:	4b15      	ldr	r3, [pc, #84]	; (805d0 <pwm_config+0x5c>)
   8057c:	4798      	blx	r3
   8057e:	bb28      	cbnz	r0, 805cc <pwm_config+0x58>
		pwm_clock_t pwmclock = {
   80580:	4b14      	ldr	r3, [pc, #80]	; (805d4 <pwm_config+0x60>)
   80582:	9301      	str	r3, [sp, #4]
   80584:	2400      	movs	r4, #0
   80586:	9402      	str	r4, [sp, #8]
   80588:	4b13      	ldr	r3, [pc, #76]	; (805d8 <pwm_config+0x64>)
   8058a:	9303      	str	r3, [sp, #12]
			.ul_clka = PWM_FREQUENCY * PWM_RESOLUTION,
			.ul_clkb = 0,
			.ul_mck = sysclk_get_cpu_hz()
		};
		pwm_init(PWM, &pwmclock);
   8058c:	4d13      	ldr	r5, [pc, #76]	; (805dc <pwm_config+0x68>)
   8058e:	4628      	mov	r0, r5
   80590:	a901      	add	r1, sp, #4
   80592:	4b13      	ldr	r3, [pc, #76]	; (805e0 <pwm_config+0x6c>)
   80594:	4798      	blx	r3
		pwm_instance.alignment = PWM_ALIGN_LEFT;
   80596:	4913      	ldr	r1, [pc, #76]	; (805e4 <pwm_config+0x70>)
   80598:	810c      	strh	r4, [r1, #8]
		pwm_instance.polarity = PWM_LOW;
   8059a:	728c      	strb	r4, [r1, #10]
		pwm_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8059c:	230b      	movs	r3, #11
   8059e:	604b      	str	r3, [r1, #4]
		pwm_instance.ul_period = PWM_RESOLUTION;
   805a0:	f240 33e7 	movw	r3, #999	; 0x3e7
   805a4:	610b      	str	r3, [r1, #16]
		pwm_instance.ul_duty = 0;
   805a6:	60cc      	str	r4, [r1, #12]
		pwm_instance.channel = PWM_CHANNEL_0;
   805a8:	600c      	str	r4, [r1, #0]
		pwm_channel_init(PWM, &pwm_instance);
   805aa:	4628      	mov	r0, r5
   805ac:	4b0e      	ldr	r3, [pc, #56]	; (805e8 <pwm_config+0x74>)
   805ae:	4798      	blx	r3
		
		pio_set_peripheral(PWM_PIO, PWM_PIO_PERIPHERAL, PWM_PIO_PIN);
   805b0:	480e      	ldr	r0, [pc, #56]	; (805ec <pwm_config+0x78>)
   805b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   805b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   805ba:	4b0d      	ldr	r3, [pc, #52]	; (805f0 <pwm_config+0x7c>)
   805bc:	4798      	blx	r3
		pwm_channel_enable(PWM, PWM_CHANNEL_0);
   805be:	4628      	mov	r0, r5
   805c0:	4621      	mov	r1, r4
   805c2:	4b0c      	ldr	r3, [pc, #48]	; (805f4 <pwm_config+0x80>)
   805c4:	4798      	blx	r3
		pwm_set_duty_cycle(0);		
   805c6:	4620      	mov	r0, r4
   805c8:	4b0b      	ldr	r3, [pc, #44]	; (805f8 <pwm_config+0x84>)
   805ca:	4798      	blx	r3
	}
}
   805cc:	b005      	add	sp, #20
   805ce:	bd30      	pop	{r4, r5, pc}
   805d0:	00082215 	.word	0x00082215
   805d4:	000f3e58 	.word	0x000f3e58
   805d8:	0501bd00 	.word	0x0501bd00
   805dc:	40094000 	.word	0x40094000
   805e0:	00080295 	.word	0x00080295
   805e4:	20070584 	.word	0x20070584
   805e8:	000802e1 	.word	0x000802e1
   805ec:	400e1000 	.word	0x400e1000
   805f0:	00081e71 	.word	0x00081e71
   805f4:	0008040d 	.word	0x0008040d
   805f8:	00080559 	.word	0x00080559

000805fc <task_com>:
#include <asf.h>
#include "io_uart.h"
#include "sync.h"

void task_com(void *pvParameters)
{	
   805fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80600:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 50;
	
	xLastWakeTime = xTaskGetTickCount();
   80602:	4b1f      	ldr	r3, [pc, #124]	; (80680 <task_com+0x84>)
   80604:	4798      	blx	r3
   80606:	f8ad 0006 	strh.w	r0, [sp, #6]
	static uint8_t *p_str = str;
	
	while(1)
	{		
		//TODO: Lots of stuff
		while (flag1==0)
   8060a:	4f1e      	ldr	r7, [pc, #120]	; (80684 <task_com+0x88>)
		{
			while(!uart_receiver_ready());
   8060c:	4e1e      	ldr	r6, [pc, #120]	; (80688 <task_com+0x8c>)
				flag1 = 1;
				p_str = str;
			}
		}
		while(flag1==1){
			while(!uart_transmitter_ready());
   8060e:	4c1f      	ldr	r4, [pc, #124]	; (8068c <task_com+0x90>)
   80610:	e015      	b.n	8063e <task_com+0x42>
	while(1)
	{		
		//TODO: Lots of stuff
		while (flag1==0)
		{
			while(!uart_receiver_ready());
   80612:	47b0      	blx	r6
   80614:	2800      	cmp	r0, #0
   80616:	d0fc      	beq.n	80612 <task_com+0x16>
			*p_str = uart_receive_char();
   80618:	4d1d      	ldr	r5, [pc, #116]	; (80690 <task_com+0x94>)
   8061a:	f8d5 8000 	ldr.w	r8, [r5]
   8061e:	4b1d      	ldr	r3, [pc, #116]	; (80694 <task_com+0x98>)
   80620:	4798      	blx	r3
   80622:	f888 0000 	strb.w	r0, [r8]
			if(*p_str != 10){
   80626:	682b      	ldr	r3, [r5, #0]
   80628:	781a      	ldrb	r2, [r3, #0]
   8062a:	2a0a      	cmp	r2, #10
   8062c:	d002      	beq.n	80634 <task_com+0x38>
				p_str++;
   8062e:	3301      	adds	r3, #1
   80630:	602b      	str	r3, [r5, #0]
   80632:	e004      	b.n	8063e <task_com+0x42>
			} else {
				flag1 = 1;
   80634:	2301      	movs	r3, #1
   80636:	603b      	str	r3, [r7, #0]
				p_str = str;
   80638:	4a17      	ldr	r2, [pc, #92]	; (80698 <task_com+0x9c>)
   8063a:	4b15      	ldr	r3, [pc, #84]	; (80690 <task_com+0x94>)
   8063c:	601a      	str	r2, [r3, #0]
	static uint8_t *p_str = str;
	
	while(1)
	{		
		//TODO: Lots of stuff
		while (flag1==0)
   8063e:	683b      	ldr	r3, [r7, #0]
   80640:	2b00      	cmp	r3, #0
   80642:	d0e6      	beq.n	80612 <task_com+0x16>
   80644:	e013      	b.n	8066e <task_com+0x72>
				flag1 = 1;
				p_str = str;
			}
		}
		while(flag1==1){
			while(!uart_transmitter_ready());
   80646:	47a0      	blx	r4
   80648:	2800      	cmp	r0, #0
   8064a:	d0fc      	beq.n	80646 <task_com+0x4a>
			uart_send_char(*p_str);
   8064c:	4d10      	ldr	r5, [pc, #64]	; (80690 <task_com+0x94>)
   8064e:	682b      	ldr	r3, [r5, #0]
   80650:	7818      	ldrb	r0, [r3, #0]
   80652:	4b12      	ldr	r3, [pc, #72]	; (8069c <task_com+0xa0>)
   80654:	4798      	blx	r3
			if ((char)*p_str == 10)
   80656:	682b      	ldr	r3, [r5, #0]
   80658:	781a      	ldrb	r2, [r3, #0]
   8065a:	2a0a      	cmp	r2, #10
   8065c:	d104      	bne.n	80668 <task_com+0x6c>
			{
				flag1 = 0;
   8065e:	2300      	movs	r3, #0
   80660:	603b      	str	r3, [r7, #0]
				p_str = str;
   80662:	4a0d      	ldr	r2, [pc, #52]	; (80698 <task_com+0x9c>)
   80664:	602a      	str	r2, [r5, #0]
   80666:	e002      	b.n	8066e <task_com+0x72>
				} else {
				p_str++;
   80668:	3301      	adds	r3, #1
   8066a:	4a09      	ldr	r2, [pc, #36]	; (80690 <task_com+0x94>)
   8066c:	6013      	str	r3, [r2, #0]
			} else {
				flag1 = 1;
				p_str = str;
			}
		}
		while(flag1==1){
   8066e:	683b      	ldr	r3, [r7, #0]
   80670:	2b01      	cmp	r3, #1
   80672:	d0e8      	beq.n	80646 <task_com+0x4a>
				p_str = str;
				} else {
				p_str++;
			}			
		}
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   80674:	f10d 0006 	add.w	r0, sp, #6
   80678:	2132      	movs	r1, #50	; 0x32
   8067a:	4b09      	ldr	r3, [pc, #36]	; (806a0 <task_com+0xa4>)
   8067c:	4798      	blx	r3
	}
   8067e:	e7de      	b.n	8063e <task_com+0x42>
   80680:	00081319 	.word	0x00081319
   80684:	200705c0 	.word	0x200705c0
   80688:	00080461 	.word	0x00080461
   8068c:	00080451 	.word	0x00080451
   80690:	2007012c 	.word	0x2007012c
   80694:	0008047d 	.word	0x0008047d
   80698:	200705ac 	.word	0x200705ac
   8069c:	00080471 	.word	0x00080471
   806a0:	00081569 	.word	0x00081569

000806a4 <task_regulate>:
#include <asf.h>
#include "pwm_func.h"
#include "io_uart.h"

void task_regulate(void *pvParameters)
{
   806a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   806a8:	b085      	sub	sp, #20
	uint8_t timer = 50;
	uint16_t invalue;
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 10;
	xLastWakeTime = xTaskGetTickCount();
   806aa:	4b26      	ldr	r3, [pc, #152]	; (80744 <task_regulate+0xa0>)
   806ac:	4798      	blx	r3
   806ae:	f8ad 000e 	strh.w	r0, [sp, #14]
	
	static float xbuff[4] = {0};
	int k;
	float temp = 0;
   806b2:	2300      	movs	r3, #0
   806b4:	461f      	mov	r7, r3
	
	while(1){
		adc_start(ADC);
		while ((adc_get_status(ADC) & 0x1<<24)==0);
   806b6:	4e24      	ldr	r6, [pc, #144]	; (80748 <task_regulate+0xa4>)
		invalue = adc_get_latest_value(ADC);
		
		for(k = 3; k > 0; k--){
			xbuff[k] = xbuff[k-1];
   806b8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8075c <task_regulate+0xb8>
	static float xbuff[4] = {0};
	int k;
	float temp = 0;
	
	while(1){
		adc_start(ADC);
   806bc:	4823      	ldr	r0, [pc, #140]	; (8074c <task_regulate+0xa8>)
   806be:	4b24      	ldr	r3, [pc, #144]	; (80750 <task_regulate+0xac>)
   806c0:	4798      	blx	r3
		while ((adc_get_status(ADC) & 0x1<<24)==0);
   806c2:	4822      	ldr	r0, [pc, #136]	; (8074c <task_regulate+0xa8>)
   806c4:	47b0      	blx	r6
   806c6:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   806ca:	d0fa      	beq.n	806c2 <task_regulate+0x1e>
		invalue = adc_get_latest_value(ADC);
   806cc:	481f      	ldr	r0, [pc, #124]	; (8074c <task_regulate+0xa8>)
   806ce:	4b21      	ldr	r3, [pc, #132]	; (80754 <task_regulate+0xb0>)
   806d0:	4798      	blx	r3
		
		for(k = 3; k > 0; k--){
			xbuff[k] = xbuff[k-1];
   806d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   806d6:	f8c8 300c 	str.w	r3, [r8, #12]
   806da:	f8d8 3004 	ldr.w	r3, [r8, #4]
   806de:	f8c8 3008 	str.w	r3, [r8, #8]
   806e2:	f8d8 3000 	ldr.w	r3, [r8]
   806e6:	f8c8 3004 	str.w	r3, [r8, #4]
		}
		xbuff[0] = invalue;
   806ea:	b280      	uxth	r0, r0
   806ec:	4b1a      	ldr	r3, [pc, #104]	; (80758 <task_regulate+0xb4>)
   806ee:	4798      	blx	r3
   806f0:	46c1      	mov	r9, r8
   806f2:	f849 0b10 	str.w	r0, [r9], #16
   806f6:	4c19      	ldr	r4, [pc, #100]	; (8075c <task_regulate+0xb8>)
		
		for(k = 0; k <= 3; k++){
			temp += 0.25*xbuff[k];
   806f8:	4d19      	ldr	r5, [pc, #100]	; (80760 <task_regulate+0xbc>)
   806fa:	f8df b080 	ldr.w	fp, [pc, #128]	; 8077c <task_regulate+0xd8>
   806fe:	4638      	mov	r0, r7
   80700:	f854 ab04 	ldr.w	sl, [r4], #4
   80704:	47a8      	blx	r5
   80706:	e9cd 0100 	strd	r0, r1, [sp]
   8070a:	4650      	mov	r0, sl
   8070c:	47a8      	blx	r5
   8070e:	2200      	movs	r2, #0
   80710:	4b14      	ldr	r3, [pc, #80]	; (80764 <task_regulate+0xc0>)
   80712:	4f15      	ldr	r7, [pc, #84]	; (80768 <task_regulate+0xc4>)
   80714:	47b8      	blx	r7
   80716:	4602      	mov	r2, r0
   80718:	460b      	mov	r3, r1
   8071a:	e9dd 0100 	ldrd	r0, r1, [sp]
   8071e:	4f13      	ldr	r7, [pc, #76]	; (8076c <task_regulate+0xc8>)
   80720:	47b8      	blx	r7
   80722:	47d8      	blx	fp
		for(k = 3; k > 0; k--){
			xbuff[k] = xbuff[k-1];
		}
		xbuff[0] = invalue;
		
		for(k = 0; k <= 3; k++){
   80724:	454c      	cmp	r4, r9
   80726:	d1eb      	bne.n	80700 <task_regulate+0x5c>
   80728:	4607      	mov	r7, r0
			temp += 0.25*xbuff[k];
		}
		invalue = 1000 - (uint16_t)temp;
   8072a:	4b11      	ldr	r3, [pc, #68]	; (80770 <task_regulate+0xcc>)
   8072c:	4798      	blx	r3
   8072e:	f5c0 707a 	rsb	r0, r0, #1000	; 0x3e8
		
		pwm_set_duty_cycle(invalue);
   80732:	b280      	uxth	r0, r0
   80734:	4b0f      	ldr	r3, [pc, #60]	; (80774 <task_regulate+0xd0>)
   80736:	4798      	blx	r3
		
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   80738:	f10d 000e 	add.w	r0, sp, #14
   8073c:	210a      	movs	r1, #10
   8073e:	4b0e      	ldr	r3, [pc, #56]	; (80778 <task_regulate+0xd4>)
   80740:	4798      	blx	r3
	}
   80742:	e7bb      	b.n	806bc <task_regulate+0x18>
   80744:	00081319 	.word	0x00081319
   80748:	0008023d 	.word	0x0008023d
   8074c:	400c0000 	.word	0x400c0000
   80750:	00080229 	.word	0x00080229
   80754:	00080239 	.word	0x00080239
   80758:	00082dd9 	.word	0x00082dd9
   8075c:	200705c4 	.word	0x200705c4
   80760:	00082701 	.word	0x00082701
   80764:	3fd00000 	.word	0x3fd00000
   80768:	000827a9 	.word	0x000827a9
   8076c:	00082445 	.word	0x00082445
   80770:	00082e89 	.word	0x00082e89
   80774:	00080559 	.word	0x00080559
   80778:	00081569 	.word	0x00081569
   8077c:	00082bcd 	.word	0x00082bcd

00080780 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80780:	f100 0308 	add.w	r3, r0, #8
   80784:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80786:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8078a:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   8078c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8078e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80790:	2300      	movs	r3, #0
   80792:	6003      	str	r3, [r0, #0]
   80794:	4770      	bx	lr
   80796:	bf00      	nop

00080798 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80798:	2300      	movs	r3, #0
   8079a:	6103      	str	r3, [r0, #16]
   8079c:	4770      	bx	lr
   8079e:	bf00      	nop

000807a0 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   807a0:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   807a2:	685a      	ldr	r2, [r3, #4]
   807a4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   807a6:	6842      	ldr	r2, [r0, #4]
   807a8:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   807aa:	685a      	ldr	r2, [r3, #4]
   807ac:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   807ae:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   807b0:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   807b2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   807b4:	6803      	ldr	r3, [r0, #0]
   807b6:	3301      	adds	r3, #1
   807b8:	6003      	str	r3, [r0, #0]
   807ba:	4770      	bx	lr

000807bc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   807bc:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   807be:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   807c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   807c4:	429c      	cmp	r4, r3
   807c6:	d101      	bne.n	807cc <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   807c8:	6902      	ldr	r2, [r0, #16]
   807ca:	e00c      	b.n	807e6 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   807cc:	f100 0208 	add.w	r2, r0, #8
   807d0:	68c3      	ldr	r3, [r0, #12]
   807d2:	881b      	ldrh	r3, [r3, #0]
   807d4:	b29b      	uxth	r3, r3
   807d6:	429c      	cmp	r4, r3
   807d8:	d305      	bcc.n	807e6 <vListInsert+0x2a>
   807da:	6852      	ldr	r2, [r2, #4]
   807dc:	6853      	ldr	r3, [r2, #4]
   807de:	881b      	ldrh	r3, [r3, #0]
   807e0:	b29b      	uxth	r3, r3
   807e2:	429c      	cmp	r4, r3
   807e4:	d2f9      	bcs.n	807da <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   807e6:	6853      	ldr	r3, [r2, #4]
   807e8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   807ea:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   807ec:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   807ee:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   807f0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   807f2:	6803      	ldr	r3, [r0, #0]
   807f4:	3301      	adds	r3, #1
   807f6:	6003      	str	r3, [r0, #0]
}
   807f8:	f85d 4b04 	ldr.w	r4, [sp], #4
   807fc:	4770      	bx	lr
   807fe:	bf00      	nop

00080800 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80800:	6843      	ldr	r3, [r0, #4]
   80802:	6882      	ldr	r2, [r0, #8]
   80804:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80806:	6883      	ldr	r3, [r0, #8]
   80808:	6842      	ldr	r2, [r0, #4]
   8080a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8080c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8080e:	685a      	ldr	r2, [r3, #4]
   80810:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80812:	bf04      	itt	eq
   80814:	6882      	ldreq	r2, [r0, #8]
   80816:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80818:	2200      	movs	r2, #0
   8081a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8081c:	681a      	ldr	r2, [r3, #0]
   8081e:	3a01      	subs	r2, #1
   80820:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80822:	6818      	ldr	r0, [r3, #0]
}
   80824:	4770      	bx	lr
   80826:	bf00      	nop

00080828 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80828:	4803      	ldr	r0, [pc, #12]	; (80838 <prvPortStartFirstTask+0x10>)
   8082a:	6800      	ldr	r0, [r0, #0]
   8082c:	6800      	ldr	r0, [r0, #0]
   8082e:	f380 8808 	msr	MSP, r0
   80832:	b662      	cpsie	i
   80834:	df00      	svc	0
   80836:	bf00      	nop
   80838:	e000ed08 	.word	0xe000ed08

0008083c <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8083c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80840:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80844:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80848:	2300      	movs	r3, #0
   8084a:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   8084e:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80852:	3840      	subs	r0, #64	; 0x40
   80854:	4770      	bx	lr
   80856:	bf00      	nop

00080858 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80858:	4b06      	ldr	r3, [pc, #24]	; (80874 <pxCurrentTCBConst2>)
   8085a:	6819      	ldr	r1, [r3, #0]
   8085c:	6808      	ldr	r0, [r1, #0]
   8085e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80862:	f380 8809 	msr	PSP, r0
   80866:	f04f 0000 	mov.w	r0, #0
   8086a:	f380 8811 	msr	BASEPRI, r0
   8086e:	f04e 0e0d 	orr.w	lr, lr, #13
   80872:	4770      	bx	lr

00080874 <pxCurrentTCBConst2>:
   80874:	20078714 	.word	0x20078714

00080878 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8087c:	4b01      	ldr	r3, [pc, #4]	; (80884 <vPortYieldFromISR+0xc>)
   8087e:	601a      	str	r2, [r3, #0]
   80880:	4770      	bx	lr
   80882:	bf00      	nop
   80884:	e000ed04 	.word	0xe000ed04

00080888 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80888:	f3ef 8011 	mrs	r0, BASEPRI
   8088c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80890:	f381 8811 	msr	BASEPRI, r1
   80894:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80896:	2000      	movs	r0, #0

00080898 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80898:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   8089a:	4b03      	ldr	r3, [pc, #12]	; (808a8 <vPortEnterCritical+0x10>)
   8089c:	4798      	blx	r3
	uxCriticalNesting++;
   8089e:	4a03      	ldr	r2, [pc, #12]	; (808ac <vPortEnterCritical+0x14>)
   808a0:	6813      	ldr	r3, [r2, #0]
   808a2:	3301      	adds	r3, #1
   808a4:	6013      	str	r3, [r2, #0]
   808a6:	bd08      	pop	{r3, pc}
   808a8:	00080889 	.word	0x00080889
   808ac:	20070130 	.word	0x20070130

000808b0 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   808b0:	f380 8811 	msr	BASEPRI, r0
   808b4:	4770      	bx	lr
   808b6:	bf00      	nop

000808b8 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   808b8:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   808ba:	4a04      	ldr	r2, [pc, #16]	; (808cc <vPortExitCritical+0x14>)
   808bc:	6813      	ldr	r3, [r2, #0]
   808be:	3b01      	subs	r3, #1
   808c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   808c2:	b913      	cbnz	r3, 808ca <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   808c4:	2000      	movs	r0, #0
   808c6:	4b02      	ldr	r3, [pc, #8]	; (808d0 <vPortExitCritical+0x18>)
   808c8:	4798      	blx	r3
   808ca:	bd08      	pop	{r3, pc}
   808cc:	20070130 	.word	0x20070130
   808d0:	000808b1 	.word	0x000808b1

000808d4 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   808d4:	f3ef 8009 	mrs	r0, PSP
   808d8:	4b0c      	ldr	r3, [pc, #48]	; (8090c <pxCurrentTCBConst>)
   808da:	681a      	ldr	r2, [r3, #0]
   808dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   808e0:	6010      	str	r0, [r2, #0]
   808e2:	e92d 4008 	stmdb	sp!, {r3, lr}
   808e6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   808ea:	f380 8811 	msr	BASEPRI, r0
   808ee:	f000 fec9 	bl	81684 <vTaskSwitchContext>
   808f2:	f04f 0000 	mov.w	r0, #0
   808f6:	f380 8811 	msr	BASEPRI, r0
   808fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   808fe:	6819      	ldr	r1, [r3, #0]
   80900:	6808      	ldr	r0, [r1, #0]
   80902:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80906:	f380 8809 	msr	PSP, r0
   8090a:	4770      	bx	lr

0008090c <pxCurrentTCBConst>:
   8090c:	20078714 	.word	0x20078714

00080910 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80910:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80916:	4b05      	ldr	r3, [pc, #20]	; (8092c <SysTick_Handler+0x1c>)
   80918:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8091a:	4b05      	ldr	r3, [pc, #20]	; (80930 <SysTick_Handler+0x20>)
   8091c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8091e:	4b05      	ldr	r3, [pc, #20]	; (80934 <SysTick_Handler+0x24>)
   80920:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80922:	2000      	movs	r0, #0
   80924:	4b04      	ldr	r3, [pc, #16]	; (80938 <SysTick_Handler+0x28>)
   80926:	4798      	blx	r3
   80928:	bd08      	pop	{r3, pc}
   8092a:	bf00      	nop
   8092c:	e000ed04 	.word	0xe000ed04
   80930:	00080889 	.word	0x00080889
   80934:	00081339 	.word	0x00081339
   80938:	000808b1 	.word	0x000808b1

0008093c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   8093c:	4a03      	ldr	r2, [pc, #12]	; (8094c <vPortSetupTimerInterrupt+0x10>)
   8093e:	4b04      	ldr	r3, [pc, #16]	; (80950 <vPortSetupTimerInterrupt+0x14>)
   80940:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80942:	2207      	movs	r2, #7
   80944:	3b04      	subs	r3, #4
   80946:	601a      	str	r2, [r3, #0]
   80948:	4770      	bx	lr
   8094a:	bf00      	nop
   8094c:	0001481f 	.word	0x0001481f
   80950:	e000e014 	.word	0xe000e014

00080954 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80954:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80956:	4b09      	ldr	r3, [pc, #36]	; (8097c <xPortStartScheduler+0x28>)
   80958:	681a      	ldr	r2, [r3, #0]
   8095a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8095e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80960:	681a      	ldr	r2, [r3, #0]
   80962:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80966:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80968:	4b05      	ldr	r3, [pc, #20]	; (80980 <xPortStartScheduler+0x2c>)
   8096a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   8096c:	2400      	movs	r4, #0
   8096e:	4b05      	ldr	r3, [pc, #20]	; (80984 <xPortStartScheduler+0x30>)
   80970:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   80972:	4b05      	ldr	r3, [pc, #20]	; (80988 <xPortStartScheduler+0x34>)
   80974:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   80976:	4620      	mov	r0, r4
   80978:	bd10      	pop	{r4, pc}
   8097a:	bf00      	nop
   8097c:	e000ed20 	.word	0xe000ed20
   80980:	0008093d 	.word	0x0008093d
   80984:	20070130 	.word	0x20070130
   80988:	00080829 	.word	0x00080829

0008098c <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8098c:	4a13      	ldr	r2, [pc, #76]	; (809dc <prvInsertBlockIntoFreeList+0x50>)
   8098e:	e000      	b.n	80992 <prvInsertBlockIntoFreeList+0x6>
   80990:	461a      	mov	r2, r3
   80992:	6813      	ldr	r3, [r2, #0]
   80994:	4283      	cmp	r3, r0
   80996:	d3fb      	bcc.n	80990 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80998:	b430      	push	{r4, r5}
   8099a:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   8099c:	6854      	ldr	r4, [r2, #4]
   8099e:	1915      	adds	r5, r2, r4
   809a0:	4285      	cmp	r5, r0
   809a2:	d103      	bne.n	809ac <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   809a4:	6868      	ldr	r0, [r5, #4]
   809a6:	4404      	add	r4, r0
   809a8:	6054      	str	r4, [r2, #4]
   809aa:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   809ac:	6842      	ldr	r2, [r0, #4]
   809ae:	1884      	adds	r4, r0, r2
   809b0:	429c      	cmp	r4, r3
   809b2:	d10c      	bne.n	809ce <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   809b4:	4b0a      	ldr	r3, [pc, #40]	; (809e0 <prvInsertBlockIntoFreeList+0x54>)
   809b6:	681b      	ldr	r3, [r3, #0]
   809b8:	429c      	cmp	r4, r3
   809ba:	d006      	beq.n	809ca <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   809bc:	6863      	ldr	r3, [r4, #4]
   809be:	441a      	add	r2, r3
   809c0:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   809c2:	680b      	ldr	r3, [r1, #0]
   809c4:	681b      	ldr	r3, [r3, #0]
   809c6:	6003      	str	r3, [r0, #0]
   809c8:	e002      	b.n	809d0 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   809ca:	6004      	str	r4, [r0, #0]
   809cc:	e000      	b.n	809d0 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   809ce:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   809d0:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   809d2:	bf18      	it	ne
   809d4:	6008      	strne	r0, [r1, #0]
	}
}
   809d6:	bc30      	pop	{r4, r5}
   809d8:	4770      	bx	lr
   809da:	bf00      	nop
   809dc:	200785dc 	.word	0x200785dc
   809e0:	200785d8 	.word	0x200785d8

000809e4 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   809e4:	b538      	push	{r3, r4, r5, lr}
   809e6:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   809e8:	4b29      	ldr	r3, [pc, #164]	; (80a90 <pvPortMalloc+0xac>)
   809ea:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   809ec:	4b29      	ldr	r3, [pc, #164]	; (80a94 <pvPortMalloc+0xb0>)
   809ee:	681b      	ldr	r3, [r3, #0]
   809f0:	b99b      	cbnz	r3, 80a1a <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   809f2:	4a29      	ldr	r2, [pc, #164]	; (80a98 <pvPortMalloc+0xb4>)
   809f4:	4b29      	ldr	r3, [pc, #164]	; (80a9c <pvPortMalloc+0xb8>)
   809f6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   809f8:	2100      	movs	r1, #0
   809fa:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   809fc:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   80a00:	1898      	adds	r0, r3, r2
   80a02:	4d24      	ldr	r5, [pc, #144]	; (80a94 <pvPortMalloc+0xb0>)
   80a04:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80a06:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   80a0a:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80a0c:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80a0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80a10:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80a12:	4a23      	ldr	r2, [pc, #140]	; (80aa0 <pvPortMalloc+0xbc>)
   80a14:	6813      	ldr	r3, [r2, #0]
   80a16:	3b10      	subs	r3, #16
   80a18:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80a1a:	2c00      	cmp	r4, #0
   80a1c:	d02e      	beq.n	80a7c <pvPortMalloc+0x98>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80a1e:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80a22:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80a26:	bf1c      	itt	ne
   80a28:	f022 0207 	bicne.w	r2, r2, #7
   80a2c:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80a2e:	1e51      	subs	r1, r2, #1
   80a30:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   80a34:	4299      	cmp	r1, r3
   80a36:	d823      	bhi.n	80a80 <pvPortMalloc+0x9c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80a38:	4917      	ldr	r1, [pc, #92]	; (80a98 <pvPortMalloc+0xb4>)
   80a3a:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80a3c:	e001      	b.n	80a42 <pvPortMalloc+0x5e>
   80a3e:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80a40:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80a42:	6863      	ldr	r3, [r4, #4]
   80a44:	429a      	cmp	r2, r3
   80a46:	d902      	bls.n	80a4e <pvPortMalloc+0x6a>
   80a48:	6823      	ldr	r3, [r4, #0]
   80a4a:	2b00      	cmp	r3, #0
   80a4c:	d1f7      	bne.n	80a3e <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80a4e:	4b11      	ldr	r3, [pc, #68]	; (80a94 <pvPortMalloc+0xb0>)
   80a50:	681b      	ldr	r3, [r3, #0]
   80a52:	429c      	cmp	r4, r3
   80a54:	d016      	beq.n	80a84 <pvPortMalloc+0xa0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80a56:	680d      	ldr	r5, [r1, #0]
   80a58:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80a5a:	6823      	ldr	r3, [r4, #0]
   80a5c:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80a5e:	6863      	ldr	r3, [r4, #4]
   80a60:	1a9b      	subs	r3, r3, r2
   80a62:	2b20      	cmp	r3, #32
   80a64:	d904      	bls.n	80a70 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80a66:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80a68:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80a6a:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80a6c:	4b0d      	ldr	r3, [pc, #52]	; (80aa4 <pvPortMalloc+0xc0>)
   80a6e:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80a70:	4a0b      	ldr	r2, [pc, #44]	; (80aa0 <pvPortMalloc+0xbc>)
   80a72:	6813      	ldr	r3, [r2, #0]
   80a74:	6861      	ldr	r1, [r4, #4]
   80a76:	1a5b      	subs	r3, r3, r1
   80a78:	6013      	str	r3, [r2, #0]
   80a7a:	e004      	b.n	80a86 <pvPortMalloc+0xa2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80a7c:	2500      	movs	r5, #0
   80a7e:	e002      	b.n	80a86 <pvPortMalloc+0xa2>
   80a80:	2500      	movs	r5, #0
   80a82:	e000      	b.n	80a86 <pvPortMalloc+0xa2>
   80a84:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80a86:	4b08      	ldr	r3, [pc, #32]	; (80aa8 <pvPortMalloc+0xc4>)
   80a88:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80a8a:	4628      	mov	r0, r5
   80a8c:	bd38      	pop	{r3, r4, r5, pc}
   80a8e:	bf00      	nop
   80a90:	00081309 	.word	0x00081309
   80a94:	200785d8 	.word	0x200785d8
   80a98:	200785dc 	.word	0x200785dc
   80a9c:	200705d8 	.word	0x200705d8
   80aa0:	20070134 	.word	0x20070134
   80aa4:	0008098d 	.word	0x0008098d
   80aa8:	00081465 	.word	0x00081465

00080aac <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80aac:	b180      	cbz	r0, 80ad0 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80aae:	b510      	push	{r4, lr}
   80ab0:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80ab2:	4b08      	ldr	r3, [pc, #32]	; (80ad4 <vPortFree+0x28>)
   80ab4:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80ab6:	4a08      	ldr	r2, [pc, #32]	; (80ad8 <vPortFree+0x2c>)
   80ab8:	6811      	ldr	r1, [r2, #0]
   80aba:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80abe:	440b      	add	r3, r1
   80ac0:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80ac2:	f1a4 0010 	sub.w	r0, r4, #16
   80ac6:	4b05      	ldr	r3, [pc, #20]	; (80adc <vPortFree+0x30>)
   80ac8:	4798      	blx	r3
		}
		xTaskResumeAll();
   80aca:	4b05      	ldr	r3, [pc, #20]	; (80ae0 <vPortFree+0x34>)
   80acc:	4798      	blx	r3
   80ace:	bd10      	pop	{r4, pc}
   80ad0:	4770      	bx	lr
   80ad2:	bf00      	nop
   80ad4:	00081309 	.word	0x00081309
   80ad8:	20070134 	.word	0x20070134
   80adc:	0008098d 	.word	0x0008098d
   80ae0:	00081465 	.word	0x00081465

00080ae4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80ae4:	b510      	push	{r4, lr}
   80ae6:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80ae8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80aea:	b93b      	cbnz	r3, 80afc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80aec:	6803      	ldr	r3, [r0, #0]
   80aee:	bb1b      	cbnz	r3, 80b38 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80af0:	6840      	ldr	r0, [r0, #4]
   80af2:	4b13      	ldr	r3, [pc, #76]	; (80b40 <prvCopyDataToQueue+0x5c>)
   80af4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80af6:	2300      	movs	r3, #0
   80af8:	6063      	str	r3, [r4, #4]
   80afa:	e01d      	b.n	80b38 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80afc:	b96a      	cbnz	r2, 80b1a <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80afe:	6880      	ldr	r0, [r0, #8]
   80b00:	461a      	mov	r2, r3
   80b02:	4b10      	ldr	r3, [pc, #64]	; (80b44 <prvCopyDataToQueue+0x60>)
   80b04:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80b06:	68a2      	ldr	r2, [r4, #8]
   80b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80b0a:	4413      	add	r3, r2
   80b0c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80b0e:	6862      	ldr	r2, [r4, #4]
   80b10:	4293      	cmp	r3, r2
   80b12:	d311      	bcc.n	80b38 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80b14:	6823      	ldr	r3, [r4, #0]
   80b16:	60a3      	str	r3, [r4, #8]
   80b18:	e00e      	b.n	80b38 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80b1a:	68c0      	ldr	r0, [r0, #12]
   80b1c:	461a      	mov	r2, r3
   80b1e:	4b09      	ldr	r3, [pc, #36]	; (80b44 <prvCopyDataToQueue+0x60>)
   80b20:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80b24:	425b      	negs	r3, r3
   80b26:	68e2      	ldr	r2, [r4, #12]
   80b28:	441a      	add	r2, r3
   80b2a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80b2c:	6821      	ldr	r1, [r4, #0]
   80b2e:	428a      	cmp	r2, r1
   80b30:	d202      	bcs.n	80b38 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80b32:	6862      	ldr	r2, [r4, #4]
   80b34:	4413      	add	r3, r2
   80b36:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80b38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80b3a:	3301      	adds	r3, #1
   80b3c:	63a3      	str	r3, [r4, #56]	; 0x38
   80b3e:	bd10      	pop	{r4, pc}
   80b40:	000819c5 	.word	0x000819c5
   80b44:	00082f19 	.word	0x00082f19

00080b48 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80b48:	b538      	push	{r3, r4, r5, lr}
   80b4a:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80b4c:	6800      	ldr	r0, [r0, #0]
   80b4e:	b158      	cbz	r0, 80b68 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80b52:	68dc      	ldr	r4, [r3, #12]
   80b54:	4414      	add	r4, r2
   80b56:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80b58:	685d      	ldr	r5, [r3, #4]
   80b5a:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80b5c:	bf28      	it	cs
   80b5e:	60d8      	strcs	r0, [r3, #12]
   80b60:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80b62:	68d9      	ldr	r1, [r3, #12]
   80b64:	4b01      	ldr	r3, [pc, #4]	; (80b6c <prvCopyDataFromQueue+0x24>)
   80b66:	4798      	blx	r3
   80b68:	bd38      	pop	{r3, r4, r5, pc}
   80b6a:	bf00      	nop
   80b6c:	00082f19 	.word	0x00082f19

00080b70 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b72:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80b74:	4b1e      	ldr	r3, [pc, #120]	; (80bf0 <prvUnlockQueue+0x80>)
   80b76:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80b78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b7a:	2b00      	cmp	r3, #0
   80b7c:	dd13      	ble.n	80ba6 <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b80:	b91b      	cbnz	r3, 80b8a <prvUnlockQueue+0x1a>
   80b82:	e010      	b.n	80ba6 <prvUnlockQueue+0x36>
   80b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b86:	b923      	cbnz	r3, 80b92 <prvUnlockQueue+0x22>
   80b88:	e00d      	b.n	80ba6 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b8a:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80b8e:	4d19      	ldr	r5, [pc, #100]	; (80bf4 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80b90:	4f19      	ldr	r7, [pc, #100]	; (80bf8 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b92:	4630      	mov	r0, r6
   80b94:	47a8      	blx	r5
   80b96:	b100      	cbz	r0, 80b9a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80b98:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80b9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b9c:	3b01      	subs	r3, #1
   80b9e:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80ba0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ba2:	2b00      	cmp	r3, #0
   80ba4:	dcee      	bgt.n	80b84 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80ba6:	f04f 33ff 	mov.w	r3, #4294967295
   80baa:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80bac:	4b13      	ldr	r3, [pc, #76]	; (80bfc <prvUnlockQueue+0x8c>)
   80bae:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80bb0:	4b0f      	ldr	r3, [pc, #60]	; (80bf0 <prvUnlockQueue+0x80>)
   80bb2:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80bb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80bb6:	2b00      	cmp	r3, #0
   80bb8:	dd13      	ble.n	80be2 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80bba:	6923      	ldr	r3, [r4, #16]
   80bbc:	b91b      	cbnz	r3, 80bc6 <prvUnlockQueue+0x56>
   80bbe:	e010      	b.n	80be2 <prvUnlockQueue+0x72>
   80bc0:	6923      	ldr	r3, [r4, #16]
   80bc2:	b923      	cbnz	r3, 80bce <prvUnlockQueue+0x5e>
   80bc4:	e00d      	b.n	80be2 <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80bc6:	f104 0610 	add.w	r6, r4, #16
   80bca:	4d0a      	ldr	r5, [pc, #40]	; (80bf4 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   80bcc:	4f0a      	ldr	r7, [pc, #40]	; (80bf8 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80bce:	4630      	mov	r0, r6
   80bd0:	47a8      	blx	r5
   80bd2:	b100      	cbz	r0, 80bd6 <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   80bd4:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80bd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80bd8:	3b01      	subs	r3, #1
   80bda:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80bdc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80bde:	2b00      	cmp	r3, #0
   80be0:	dcee      	bgt.n	80bc0 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80be2:	f04f 33ff 	mov.w	r3, #4294967295
   80be6:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80be8:	4b04      	ldr	r3, [pc, #16]	; (80bfc <prvUnlockQueue+0x8c>)
   80bea:	4798      	blx	r3
   80bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80bee:	bf00      	nop
   80bf0:	00080899 	.word	0x00080899
   80bf4:	000817d5 	.word	0x000817d5
   80bf8:	0008190d 	.word	0x0008190d
   80bfc:	000808b9 	.word	0x000808b9

00080c00 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80c00:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80c02:	b918      	cbnz	r0, 80c0c <xQueueGenericReset+0xc>
   80c04:	4b17      	ldr	r3, [pc, #92]	; (80c64 <xQueueGenericReset+0x64>)
   80c06:	4798      	blx	r3
   80c08:	bf00      	nop
   80c0a:	e7fd      	b.n	80c08 <xQueueGenericReset+0x8>
   80c0c:	460d      	mov	r5, r1
   80c0e:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   80c10:	4b15      	ldr	r3, [pc, #84]	; (80c68 <xQueueGenericReset+0x68>)
   80c12:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80c14:	6822      	ldr	r2, [r4, #0]
   80c16:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80c18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80c1a:	fb03 f301 	mul.w	r3, r3, r1
   80c1e:	18d0      	adds	r0, r2, r3
   80c20:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80c22:	2000      	movs	r0, #0
   80c24:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80c26:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80c28:	1a5b      	subs	r3, r3, r1
   80c2a:	4413      	add	r3, r2
   80c2c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80c2e:	f04f 33ff 	mov.w	r3, #4294967295
   80c32:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80c34:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80c36:	b955      	cbnz	r5, 80c4e <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80c38:	6923      	ldr	r3, [r4, #16]
   80c3a:	b17b      	cbz	r3, 80c5c <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80c3c:	f104 0010 	add.w	r0, r4, #16
   80c40:	4b0a      	ldr	r3, [pc, #40]	; (80c6c <xQueueGenericReset+0x6c>)
   80c42:	4798      	blx	r3
   80c44:	2801      	cmp	r0, #1
   80c46:	d109      	bne.n	80c5c <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80c48:	4b09      	ldr	r3, [pc, #36]	; (80c70 <xQueueGenericReset+0x70>)
   80c4a:	4798      	blx	r3
   80c4c:	e006      	b.n	80c5c <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80c4e:	f104 0010 	add.w	r0, r4, #16
   80c52:	4d08      	ldr	r5, [pc, #32]	; (80c74 <xQueueGenericReset+0x74>)
   80c54:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80c56:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c5a:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80c5c:	4b06      	ldr	r3, [pc, #24]	; (80c78 <xQueueGenericReset+0x78>)
   80c5e:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80c60:	2001      	movs	r0, #1
   80c62:	bd38      	pop	{r3, r4, r5, pc}
   80c64:	00080889 	.word	0x00080889
   80c68:	00080899 	.word	0x00080899
   80c6c:	000817d5 	.word	0x000817d5
   80c70:	00080879 	.word	0x00080879
   80c74:	00080781 	.word	0x00080781
   80c78:	000808b9 	.word	0x000808b9

00080c7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   80c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80c7e:	b1a0      	cbz	r0, 80caa <xQueueGenericCreate+0x2e>
   80c80:	460d      	mov	r5, r1
   80c82:	4617      	mov	r7, r2
   80c84:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80c86:	2050      	movs	r0, #80	; 0x50
   80c88:	4b0e      	ldr	r3, [pc, #56]	; (80cc4 <xQueueGenericCreate+0x48>)
   80c8a:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80c8c:	4604      	mov	r4, r0
   80c8e:	b160      	cbz	r0, 80caa <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80c90:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80c94:	3001      	adds	r0, #1
   80c96:	4b0b      	ldr	r3, [pc, #44]	; (80cc4 <xQueueGenericCreate+0x48>)
   80c98:	4798      	blx	r3
   80c9a:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80c9c:	b940      	cbnz	r0, 80cb0 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   80c9e:	4620      	mov	r0, r4
   80ca0:	4b09      	ldr	r3, [pc, #36]	; (80cc8 <xQueueGenericCreate+0x4c>)
   80ca2:	4798      	blx	r3
   80ca4:	e001      	b.n	80caa <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   80ca6:	bf00      	nop
   80ca8:	e7fd      	b.n	80ca6 <xQueueGenericCreate+0x2a>
   80caa:	4b08      	ldr	r3, [pc, #32]	; (80ccc <xQueueGenericCreate+0x50>)
   80cac:	4798      	blx	r3
   80cae:	e7fa      	b.n	80ca6 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   80cb0:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80cb2:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80cb4:	4620      	mov	r0, r4
   80cb6:	2101      	movs	r1, #1
   80cb8:	4b05      	ldr	r3, [pc, #20]	; (80cd0 <xQueueGenericCreate+0x54>)
   80cba:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   80cbc:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   80cc0:	4620      	mov	r0, r4
   80cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80cc4:	000809e5 	.word	0x000809e5
   80cc8:	00080aad 	.word	0x00080aad
   80ccc:	00080889 	.word	0x00080889
   80cd0:	00080c01 	.word	0x00080c01

00080cd4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80cd8:	b085      	sub	sp, #20
   80cda:	9300      	str	r3, [sp, #0]
   80cdc:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80ce0:	b918      	cbnz	r0, 80cea <xQueueGenericSend+0x16>
   80ce2:	4b3a      	ldr	r3, [pc, #232]	; (80dcc <xQueueGenericSend+0xf8>)
   80ce4:	4798      	blx	r3
   80ce6:	bf00      	nop
   80ce8:	e7fd      	b.n	80ce6 <xQueueGenericSend+0x12>
   80cea:	468a      	mov	sl, r1
   80cec:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80cee:	b929      	cbnz	r1, 80cfc <xQueueGenericSend+0x28>
   80cf0:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80cf2:	b12b      	cbz	r3, 80d00 <xQueueGenericSend+0x2c>
   80cf4:	4b35      	ldr	r3, [pc, #212]	; (80dcc <xQueueGenericSend+0xf8>)
   80cf6:	4798      	blx	r3
   80cf8:	bf00      	nop
   80cfa:	e7fd      	b.n	80cf8 <xQueueGenericSend+0x24>
   80cfc:	2700      	movs	r7, #0
   80cfe:	e000      	b.n	80d02 <xQueueGenericSend+0x2e>
   80d00:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80d02:	4e33      	ldr	r6, [pc, #204]	; (80dd0 <xQueueGenericSend+0xfc>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80d04:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 80df8 <xQueueGenericSend+0x124>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80d08:	4d32      	ldr	r5, [pc, #200]	; (80dd4 <xQueueGenericSend+0x100>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80d0a:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80d0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80d0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80d10:	429a      	cmp	r2, r3
   80d12:	d212      	bcs.n	80d3a <xQueueGenericSend+0x66>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80d14:	4620      	mov	r0, r4
   80d16:	4651      	mov	r1, sl
   80d18:	9a00      	ldr	r2, [sp, #0]
   80d1a:	4b2f      	ldr	r3, [pc, #188]	; (80dd8 <xQueueGenericSend+0x104>)
   80d1c:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80d20:	b13b      	cbz	r3, 80d32 <xQueueGenericSend+0x5e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80d22:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d26:	4b2d      	ldr	r3, [pc, #180]	; (80ddc <xQueueGenericSend+0x108>)
   80d28:	4798      	blx	r3
   80d2a:	2801      	cmp	r0, #1
   80d2c:	d101      	bne.n	80d32 <xQueueGenericSend+0x5e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80d2e:	4b2c      	ldr	r3, [pc, #176]	; (80de0 <xQueueGenericSend+0x10c>)
   80d30:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80d32:	4b28      	ldr	r3, [pc, #160]	; (80dd4 <xQueueGenericSend+0x100>)
   80d34:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   80d36:	2001      	movs	r0, #1
   80d38:	e045      	b.n	80dc6 <xQueueGenericSend+0xf2>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80d3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   80d3e:	b91b      	cbnz	r3, 80d48 <xQueueGenericSend+0x74>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80d40:	4b24      	ldr	r3, [pc, #144]	; (80dd4 <xQueueGenericSend+0x100>)
   80d42:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80d44:	2000      	movs	r0, #0
   80d46:	e03e      	b.n	80dc6 <xQueueGenericSend+0xf2>
				}
				else if( xEntryTimeSet == pdFALSE )
   80d48:	b917      	cbnz	r7, 80d50 <xQueueGenericSend+0x7c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80d4a:	a802      	add	r0, sp, #8
   80d4c:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80d4e:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80d50:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80d52:	4b24      	ldr	r3, [pc, #144]	; (80de4 <xQueueGenericSend+0x110>)
   80d54:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80d56:	47b0      	blx	r6
   80d58:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d5e:	bf04      	itt	eq
   80d60:	2300      	moveq	r3, #0
   80d62:	6463      	streq	r3, [r4, #68]	; 0x44
   80d64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80d66:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d6a:	bf04      	itt	eq
   80d6c:	2300      	moveq	r3, #0
   80d6e:	64a3      	streq	r3, [r4, #72]	; 0x48
   80d70:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80d72:	a802      	add	r0, sp, #8
   80d74:	f10d 0106 	add.w	r1, sp, #6
   80d78:	4b1b      	ldr	r3, [pc, #108]	; (80de8 <xQueueGenericSend+0x114>)
   80d7a:	4798      	blx	r3
   80d7c:	b9e8      	cbnz	r0, 80dba <xQueueGenericSend+0xe6>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80d7e:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80d80:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   80d84:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80d88:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80d8a:	45c1      	cmp	r9, r8
   80d8c:	d10f      	bne.n	80dae <xQueueGenericSend+0xda>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80d8e:	f104 0010 	add.w	r0, r4, #16
   80d92:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   80d96:	4b15      	ldr	r3, [pc, #84]	; (80dec <xQueueGenericSend+0x118>)
   80d98:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   80d9a:	4620      	mov	r0, r4
   80d9c:	4b14      	ldr	r3, [pc, #80]	; (80df0 <xQueueGenericSend+0x11c>)
   80d9e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   80da0:	4b14      	ldr	r3, [pc, #80]	; (80df4 <xQueueGenericSend+0x120>)
   80da2:	4798      	blx	r3
   80da4:	2800      	cmp	r0, #0
   80da6:	d1b0      	bne.n	80d0a <xQueueGenericSend+0x36>
				{
					portYIELD_WITHIN_API();
   80da8:	4b0d      	ldr	r3, [pc, #52]	; (80de0 <xQueueGenericSend+0x10c>)
   80daa:	4798      	blx	r3
   80dac:	e7ad      	b.n	80d0a <xQueueGenericSend+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80dae:	4620      	mov	r0, r4
   80db0:	4b0f      	ldr	r3, [pc, #60]	; (80df0 <xQueueGenericSend+0x11c>)
   80db2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80db4:	4b0f      	ldr	r3, [pc, #60]	; (80df4 <xQueueGenericSend+0x120>)
   80db6:	4798      	blx	r3
   80db8:	e7a7      	b.n	80d0a <xQueueGenericSend+0x36>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   80dba:	4620      	mov	r0, r4
   80dbc:	4b0c      	ldr	r3, [pc, #48]	; (80df0 <xQueueGenericSend+0x11c>)
   80dbe:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80dc0:	4b0c      	ldr	r3, [pc, #48]	; (80df4 <xQueueGenericSend+0x120>)
   80dc2:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   80dc4:	2000      	movs	r0, #0
		}
	}
}
   80dc6:	b005      	add	sp, #20
   80dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80dcc:	00080889 	.word	0x00080889
   80dd0:	00080899 	.word	0x00080899
   80dd4:	000808b9 	.word	0x000808b9
   80dd8:	00080ae5 	.word	0x00080ae5
   80ddc:	000817d5 	.word	0x000817d5
   80de0:	00080879 	.word	0x00080879
   80de4:	00081309 	.word	0x00081309
   80de8:	00081881 	.word	0x00081881
   80dec:	00081729 	.word	0x00081729
   80df0:	00080b71 	.word	0x00080b71
   80df4:	00081465 	.word	0x00081465
   80df8:	00081859 	.word	0x00081859

00080dfc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80e00:	b918      	cbnz	r0, 80e0a <xQueueGenericSendFromISR+0xe>
   80e02:	4b1e      	ldr	r3, [pc, #120]	; (80e7c <xQueueGenericSendFromISR+0x80>)
   80e04:	4798      	blx	r3
   80e06:	bf00      	nop
   80e08:	e7fd      	b.n	80e06 <xQueueGenericSendFromISR+0xa>
   80e0a:	460e      	mov	r6, r1
   80e0c:	4615      	mov	r5, r2
   80e0e:	4698      	mov	r8, r3
   80e10:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80e12:	b929      	cbnz	r1, 80e20 <xQueueGenericSendFromISR+0x24>
   80e14:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80e16:	b11b      	cbz	r3, 80e20 <xQueueGenericSendFromISR+0x24>
   80e18:	4b18      	ldr	r3, [pc, #96]	; (80e7c <xQueueGenericSendFromISR+0x80>)
   80e1a:	4798      	blx	r3
   80e1c:	bf00      	nop
   80e1e:	e7fd      	b.n	80e1c <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80e20:	4b16      	ldr	r3, [pc, #88]	; (80e7c <xQueueGenericSendFromISR+0x80>)
   80e22:	4798      	blx	r3
   80e24:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80e26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80e28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80e2a:	429a      	cmp	r2, r3
   80e2c:	d218      	bcs.n	80e60 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80e2e:	4620      	mov	r0, r4
   80e30:	4631      	mov	r1, r6
   80e32:	4642      	mov	r2, r8
   80e34:	4b12      	ldr	r3, [pc, #72]	; (80e80 <xQueueGenericSendFromISR+0x84>)
   80e36:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80e38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80e3e:	d10a      	bne.n	80e56 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80e42:	b17b      	cbz	r3, 80e64 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80e44:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80e48:	4b0e      	ldr	r3, [pc, #56]	; (80e84 <xQueueGenericSendFromISR+0x88>)
   80e4a:	4798      	blx	r3
   80e4c:	b160      	cbz	r0, 80e68 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80e4e:	b16d      	cbz	r5, 80e6c <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80e50:	2401      	movs	r4, #1
   80e52:	602c      	str	r4, [r5, #0]
   80e54:	e00b      	b.n	80e6e <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80e56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e58:	3301      	adds	r3, #1
   80e5a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80e5c:	2401      	movs	r4, #1
   80e5e:	e006      	b.n	80e6e <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   80e60:	2400      	movs	r4, #0
   80e62:	e004      	b.n	80e6e <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80e64:	2401      	movs	r4, #1
   80e66:	e002      	b.n	80e6e <xQueueGenericSendFromISR+0x72>
   80e68:	2401      	movs	r4, #1
   80e6a:	e000      	b.n	80e6e <xQueueGenericSendFromISR+0x72>
   80e6c:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80e6e:	4638      	mov	r0, r7
   80e70:	4b05      	ldr	r3, [pc, #20]	; (80e88 <xQueueGenericSendFromISR+0x8c>)
   80e72:	4798      	blx	r3

	return xReturn;
}
   80e74:	4620      	mov	r0, r4
   80e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e7a:	bf00      	nop
   80e7c:	00080889 	.word	0x00080889
   80e80:	00080ae5 	.word	0x00080ae5
   80e84:	000817d5 	.word	0x000817d5
   80e88:	000808b1 	.word	0x000808b1

00080e8c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e90:	b085      	sub	sp, #20
   80e92:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   80e96:	b918      	cbnz	r0, 80ea0 <xQueueGenericReceive+0x14>
   80e98:	4b47      	ldr	r3, [pc, #284]	; (80fb8 <xQueueGenericReceive+0x12c>)
   80e9a:	4798      	blx	r3
   80e9c:	bf00      	nop
   80e9e:	e7fd      	b.n	80e9c <xQueueGenericReceive+0x10>
   80ea0:	4689      	mov	r9, r1
   80ea2:	469a      	mov	sl, r3
   80ea4:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80ea6:	b929      	cbnz	r1, 80eb4 <xQueueGenericReceive+0x28>
   80ea8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80eaa:	b12b      	cbz	r3, 80eb8 <xQueueGenericReceive+0x2c>
   80eac:	4b42      	ldr	r3, [pc, #264]	; (80fb8 <xQueueGenericReceive+0x12c>)
   80eae:	4798      	blx	r3
   80eb0:	bf00      	nop
   80eb2:	e7fd      	b.n	80eb0 <xQueueGenericReceive+0x24>
   80eb4:	2700      	movs	r7, #0
   80eb6:	e000      	b.n	80eba <xQueueGenericReceive+0x2e>
   80eb8:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80eba:	4e40      	ldr	r6, [pc, #256]	; (80fbc <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80ebc:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80fec <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80ec0:	4d3f      	ldr	r5, [pc, #252]	; (80fc0 <xQueueGenericReceive+0x134>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80ec2:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80ec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80ec6:	b343      	cbz	r3, 80f1a <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80ec8:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80eca:	4620      	mov	r0, r4
   80ecc:	4649      	mov	r1, r9
   80ece:	4b3d      	ldr	r3, [pc, #244]	; (80fc4 <xQueueGenericReceive+0x138>)
   80ed0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80ed2:	f1ba 0f00 	cmp.w	sl, #0
   80ed6:	d112      	bne.n	80efe <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   80ed8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80eda:	3b01      	subs	r3, #1
   80edc:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80ede:	6823      	ldr	r3, [r4, #0]
   80ee0:	b913      	cbnz	r3, 80ee8 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80ee2:	4b39      	ldr	r3, [pc, #228]	; (80fc8 <xQueueGenericReceive+0x13c>)
   80ee4:	4798      	blx	r3
   80ee6:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80ee8:	6923      	ldr	r3, [r4, #16]
   80eea:	b193      	cbz	r3, 80f12 <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80eec:	f104 0010 	add.w	r0, r4, #16
   80ef0:	4b36      	ldr	r3, [pc, #216]	; (80fcc <xQueueGenericReceive+0x140>)
   80ef2:	4798      	blx	r3
   80ef4:	2801      	cmp	r0, #1
   80ef6:	d10c      	bne.n	80f12 <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   80ef8:	4b35      	ldr	r3, [pc, #212]	; (80fd0 <xQueueGenericReceive+0x144>)
   80efa:	4798      	blx	r3
   80efc:	e009      	b.n	80f12 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80efe:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80f02:	b133      	cbz	r3, 80f12 <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80f04:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80f08:	4b30      	ldr	r3, [pc, #192]	; (80fcc <xQueueGenericReceive+0x140>)
   80f0a:	4798      	blx	r3
   80f0c:	b108      	cbz	r0, 80f12 <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   80f0e:	4b30      	ldr	r3, [pc, #192]	; (80fd0 <xQueueGenericReceive+0x144>)
   80f10:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   80f12:	4b2b      	ldr	r3, [pc, #172]	; (80fc0 <xQueueGenericReceive+0x134>)
   80f14:	4798      	blx	r3
				return pdPASS;
   80f16:	2001      	movs	r0, #1
   80f18:	e04b      	b.n	80fb2 <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80f1a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   80f1e:	b91b      	cbnz	r3, 80f28 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80f20:	4b27      	ldr	r3, [pc, #156]	; (80fc0 <xQueueGenericReceive+0x134>)
   80f22:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   80f24:	2000      	movs	r0, #0
   80f26:	e044      	b.n	80fb2 <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   80f28:	b917      	cbnz	r7, 80f30 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80f2a:	a802      	add	r0, sp, #8
   80f2c:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80f2e:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80f30:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80f32:	4b28      	ldr	r3, [pc, #160]	; (80fd4 <xQueueGenericReceive+0x148>)
   80f34:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80f36:	47b0      	blx	r6
   80f38:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80f3e:	bf04      	itt	eq
   80f40:	2300      	moveq	r3, #0
   80f42:	6463      	streq	r3, [r4, #68]	; 0x44
   80f44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80f46:	f1b3 3fff 	cmp.w	r3, #4294967295
   80f4a:	bf04      	itt	eq
   80f4c:	2300      	moveq	r3, #0
   80f4e:	64a3      	streq	r3, [r4, #72]	; 0x48
   80f50:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80f52:	a802      	add	r0, sp, #8
   80f54:	f10d 0106 	add.w	r1, sp, #6
   80f58:	4b1f      	ldr	r3, [pc, #124]	; (80fd8 <xQueueGenericReceive+0x14c>)
   80f5a:	4798      	blx	r3
   80f5c:	bb18      	cbnz	r0, 80fa6 <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80f5e:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80f60:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80f64:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80f66:	f1b8 0f00 	cmp.w	r8, #0
   80f6a:	d116      	bne.n	80f9a <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80f6c:	6823      	ldr	r3, [r4, #0]
   80f6e:	b923      	cbnz	r3, 80f7a <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   80f70:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80f72:	6860      	ldr	r0, [r4, #4]
   80f74:	4b19      	ldr	r3, [pc, #100]	; (80fdc <xQueueGenericReceive+0x150>)
   80f76:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   80f78:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80f7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80f7e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   80f82:	4b17      	ldr	r3, [pc, #92]	; (80fe0 <xQueueGenericReceive+0x154>)
   80f84:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80f86:	4620      	mov	r0, r4
   80f88:	4b16      	ldr	r3, [pc, #88]	; (80fe4 <xQueueGenericReceive+0x158>)
   80f8a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80f8c:	4b16      	ldr	r3, [pc, #88]	; (80fe8 <xQueueGenericReceive+0x15c>)
   80f8e:	4798      	blx	r3
   80f90:	2800      	cmp	r0, #0
   80f92:	d196      	bne.n	80ec2 <xQueueGenericReceive+0x36>
				{
					portYIELD_WITHIN_API();
   80f94:	4b0e      	ldr	r3, [pc, #56]	; (80fd0 <xQueueGenericReceive+0x144>)
   80f96:	4798      	blx	r3
   80f98:	e793      	b.n	80ec2 <xQueueGenericReceive+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80f9a:	4620      	mov	r0, r4
   80f9c:	4b11      	ldr	r3, [pc, #68]	; (80fe4 <xQueueGenericReceive+0x158>)
   80f9e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80fa0:	4b11      	ldr	r3, [pc, #68]	; (80fe8 <xQueueGenericReceive+0x15c>)
   80fa2:	4798      	blx	r3
   80fa4:	e78d      	b.n	80ec2 <xQueueGenericReceive+0x36>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   80fa6:	4620      	mov	r0, r4
   80fa8:	4b0e      	ldr	r3, [pc, #56]	; (80fe4 <xQueueGenericReceive+0x158>)
   80faa:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80fac:	4b0e      	ldr	r3, [pc, #56]	; (80fe8 <xQueueGenericReceive+0x15c>)
   80fae:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   80fb0:	2000      	movs	r0, #0
		}
	}
}
   80fb2:	b005      	add	sp, #20
   80fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80fb8:	00080889 	.word	0x00080889
   80fbc:	00080899 	.word	0x00080899
   80fc0:	000808b9 	.word	0x000808b9
   80fc4:	00080b49 	.word	0x00080b49
   80fc8:	00081919 	.word	0x00081919
   80fcc:	000817d5 	.word	0x000817d5
   80fd0:	00080879 	.word	0x00080879
   80fd4:	00081309 	.word	0x00081309
   80fd8:	00081881 	.word	0x00081881
   80fdc:	00081945 	.word	0x00081945
   80fe0:	00081729 	.word	0x00081729
   80fe4:	00080b71 	.word	0x00080b71
   80fe8:	00081465 	.word	0x00081465
   80fec:	00081859 	.word	0x00081859

00080ff0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80ff0:	b538      	push	{r3, r4, r5, lr}
   80ff2:	4604      	mov	r4, r0
   80ff4:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80ff6:	4b0d      	ldr	r3, [pc, #52]	; (8102c <vQueueWaitForMessageRestricted+0x3c>)
   80ff8:	4798      	blx	r3
   80ffa:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
   81000:	bf04      	itt	eq
   81002:	2300      	moveq	r3, #0
   81004:	6463      	streq	r3, [r4, #68]	; 0x44
   81006:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81008:	f1b3 3fff 	cmp.w	r3, #4294967295
   8100c:	bf04      	itt	eq
   8100e:	2300      	moveq	r3, #0
   81010:	64a3      	streq	r3, [r4, #72]	; 0x48
   81012:	4b07      	ldr	r3, [pc, #28]	; (81030 <vQueueWaitForMessageRestricted+0x40>)
   81014:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   81016:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81018:	b923      	cbnz	r3, 81024 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8101a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8101e:	4629      	mov	r1, r5
   81020:	4b04      	ldr	r3, [pc, #16]	; (81034 <vQueueWaitForMessageRestricted+0x44>)
   81022:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   81024:	4620      	mov	r0, r4
   81026:	4b04      	ldr	r3, [pc, #16]	; (81038 <vQueueWaitForMessageRestricted+0x48>)
   81028:	4798      	blx	r3
   8102a:	bd38      	pop	{r3, r4, r5, pc}
   8102c:	00080899 	.word	0x00080899
   81030:	000808b9 	.word	0x000808b9
   81034:	0008178d 	.word	0x0008178d
   81038:	00080b71 	.word	0x00080b71

0008103c <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   8103c:	b510      	push	{r4, lr}
   8103e:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81040:	4b0f      	ldr	r3, [pc, #60]	; (81080 <prvAddCurrentTaskToDelayedList+0x44>)
   81042:	681b      	ldr	r3, [r3, #0]
   81044:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   81046:	4b0f      	ldr	r3, [pc, #60]	; (81084 <prvAddCurrentTaskToDelayedList+0x48>)
   81048:	881b      	ldrh	r3, [r3, #0]
   8104a:	b29b      	uxth	r3, r3
   8104c:	4298      	cmp	r0, r3
   8104e:	d207      	bcs.n	81060 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81050:	4b0d      	ldr	r3, [pc, #52]	; (81088 <prvAddCurrentTaskToDelayedList+0x4c>)
   81052:	6818      	ldr	r0, [r3, #0]
   81054:	4b0a      	ldr	r3, [pc, #40]	; (81080 <prvAddCurrentTaskToDelayedList+0x44>)
   81056:	6819      	ldr	r1, [r3, #0]
   81058:	3104      	adds	r1, #4
   8105a:	4b0c      	ldr	r3, [pc, #48]	; (8108c <prvAddCurrentTaskToDelayedList+0x50>)
   8105c:	4798      	blx	r3
   8105e:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81060:	4b0b      	ldr	r3, [pc, #44]	; (81090 <prvAddCurrentTaskToDelayedList+0x54>)
   81062:	6818      	ldr	r0, [r3, #0]
   81064:	4b06      	ldr	r3, [pc, #24]	; (81080 <prvAddCurrentTaskToDelayedList+0x44>)
   81066:	6819      	ldr	r1, [r3, #0]
   81068:	3104      	adds	r1, #4
   8106a:	4b08      	ldr	r3, [pc, #32]	; (8108c <prvAddCurrentTaskToDelayedList+0x50>)
   8106c:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   8106e:	4b09      	ldr	r3, [pc, #36]	; (81094 <prvAddCurrentTaskToDelayedList+0x58>)
   81070:	881b      	ldrh	r3, [r3, #0]
   81072:	b29b      	uxth	r3, r3
   81074:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   81076:	bf3c      	itt	cc
   81078:	4b06      	ldrcc	r3, [pc, #24]	; (81094 <prvAddCurrentTaskToDelayedList+0x58>)
   8107a:	801c      	strhcc	r4, [r3, #0]
   8107c:	bd10      	pop	{r4, pc}
   8107e:	bf00      	nop
   81080:	20078714 	.word	0x20078714
   81084:	20078730 	.word	0x20078730
   81088:	20078734 	.word	0x20078734
   8108c:	000807bd 	.word	0x000807bd
   81090:	200785fc 	.word	0x200785fc
   81094:	20070138 	.word	0x20070138

00081098 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8109c:	b083      	sub	sp, #12
   8109e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   810a0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   810a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   810a6:	9001      	str	r0, [sp, #4]
   810a8:	b918      	cbnz	r0, 810b2 <xTaskGenericCreate+0x1a>
   810aa:	4b62      	ldr	r3, [pc, #392]	; (81234 <xTaskGenericCreate+0x19c>)
   810ac:	4798      	blx	r3
   810ae:	bf00      	nop
   810b0:	e7fd      	b.n	810ae <xTaskGenericCreate+0x16>
   810b2:	4689      	mov	r9, r1
   810b4:	4615      	mov	r5, r2
   810b6:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   810b8:	2f09      	cmp	r7, #9
   810ba:	d903      	bls.n	810c4 <xTaskGenericCreate+0x2c>
   810bc:	4b5d      	ldr	r3, [pc, #372]	; (81234 <xTaskGenericCreate+0x19c>)
   810be:	4798      	blx	r3
   810c0:	bf00      	nop
   810c2:	e7fd      	b.n	810c0 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   810c4:	2050      	movs	r0, #80	; 0x50
   810c6:	4b5c      	ldr	r3, [pc, #368]	; (81238 <xTaskGenericCreate+0x1a0>)
   810c8:	4798      	blx	r3

	if( pxNewTCB != NULL )
   810ca:	4604      	mov	r4, r0
   810cc:	2800      	cmp	r0, #0
   810ce:	f000 80ab 	beq.w	81228 <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   810d2:	2e00      	cmp	r6, #0
   810d4:	f040 80a5 	bne.w	81222 <xTaskGenericCreate+0x18a>
   810d8:	00a8      	lsls	r0, r5, #2
   810da:	4b57      	ldr	r3, [pc, #348]	; (81238 <xTaskGenericCreate+0x1a0>)
   810dc:	4798      	blx	r3
   810de:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   810e0:	b918      	cbnz	r0, 810ea <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   810e2:	4620      	mov	r0, r4
   810e4:	4b55      	ldr	r3, [pc, #340]	; (8123c <xTaskGenericCreate+0x1a4>)
   810e6:	4798      	blx	r3
   810e8:	e09e      	b.n	81228 <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   810ea:	21a5      	movs	r1, #165	; 0xa5
   810ec:	00aa      	lsls	r2, r5, #2
   810ee:	4b54      	ldr	r3, [pc, #336]	; (81240 <xTaskGenericCreate+0x1a8>)
   810f0:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   810f2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   810f6:	3d01      	subs	r5, #1
   810f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   810fa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   810fe:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81102:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81106:	4649      	mov	r1, r9
   81108:	2210      	movs	r2, #16
   8110a:	4b4e      	ldr	r3, [pc, #312]	; (81244 <xTaskGenericCreate+0x1ac>)
   8110c:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   8110e:	2300      	movs	r3, #0
   81110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   81114:	463e      	mov	r6, r7
   81116:	2f09      	cmp	r7, #9
   81118:	bf28      	it	cs
   8111a:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   8111c:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   8111e:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81120:	f104 0904 	add.w	r9, r4, #4
   81124:	4648      	mov	r0, r9
   81126:	f8df a16c 	ldr.w	sl, [pc, #364]	; 81294 <xTaskGenericCreate+0x1fc>
   8112a:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   8112c:	f104 0018 	add.w	r0, r4, #24
   81130:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   81132:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   81134:	f1c6 060a 	rsb	r6, r6, #10
   81138:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   8113a:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   8113c:	4628      	mov	r0, r5
   8113e:	9901      	ldr	r1, [sp, #4]
   81140:	465a      	mov	r2, fp
   81142:	4b41      	ldr	r3, [pc, #260]	; (81248 <xTaskGenericCreate+0x1b0>)
   81144:	4798      	blx	r3
   81146:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81148:	f010 0f07 	tst.w	r0, #7
   8114c:	d003      	beq.n	81156 <xTaskGenericCreate+0xbe>
   8114e:	4b39      	ldr	r3, [pc, #228]	; (81234 <xTaskGenericCreate+0x19c>)
   81150:	4798      	blx	r3
   81152:	bf00      	nop
   81154:	e7fd      	b.n	81152 <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
   81156:	f1b8 0f00 	cmp.w	r8, #0
   8115a:	d001      	beq.n	81160 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   8115c:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81160:	4b3a      	ldr	r3, [pc, #232]	; (8124c <xTaskGenericCreate+0x1b4>)
   81162:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81164:	4a3a      	ldr	r2, [pc, #232]	; (81250 <xTaskGenericCreate+0x1b8>)
   81166:	6813      	ldr	r3, [r2, #0]
   81168:	3301      	adds	r3, #1
   8116a:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   8116c:	4b39      	ldr	r3, [pc, #228]	; (81254 <xTaskGenericCreate+0x1bc>)
   8116e:	681b      	ldr	r3, [r3, #0]
   81170:	bb0b      	cbnz	r3, 811b6 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   81172:	4b38      	ldr	r3, [pc, #224]	; (81254 <xTaskGenericCreate+0x1bc>)
   81174:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81176:	6813      	ldr	r3, [r2, #0]
   81178:	2b01      	cmp	r3, #1
   8117a:	d126      	bne.n	811ca <xTaskGenericCreate+0x132>
   8117c:	4d36      	ldr	r5, [pc, #216]	; (81258 <xTaskGenericCreate+0x1c0>)
   8117e:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81182:	4e36      	ldr	r6, [pc, #216]	; (8125c <xTaskGenericCreate+0x1c4>)
   81184:	4628      	mov	r0, r5
   81186:	47b0      	blx	r6
   81188:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   8118a:	4545      	cmp	r5, r8
   8118c:	d1fa      	bne.n	81184 <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   8118e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 81298 <xTaskGenericCreate+0x200>
   81192:	4640      	mov	r0, r8
   81194:	4d31      	ldr	r5, [pc, #196]	; (8125c <xTaskGenericCreate+0x1c4>)
   81196:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81198:	4e31      	ldr	r6, [pc, #196]	; (81260 <xTaskGenericCreate+0x1c8>)
   8119a:	4630      	mov	r0, r6
   8119c:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   8119e:	4831      	ldr	r0, [pc, #196]	; (81264 <xTaskGenericCreate+0x1cc>)
   811a0:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   811a2:	4831      	ldr	r0, [pc, #196]	; (81268 <xTaskGenericCreate+0x1d0>)
   811a4:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   811a6:	4831      	ldr	r0, [pc, #196]	; (8126c <xTaskGenericCreate+0x1d4>)
   811a8:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   811aa:	4b31      	ldr	r3, [pc, #196]	; (81270 <xTaskGenericCreate+0x1d8>)
   811ac:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   811b0:	4b30      	ldr	r3, [pc, #192]	; (81274 <xTaskGenericCreate+0x1dc>)
   811b2:	601e      	str	r6, [r3, #0]
   811b4:	e009      	b.n	811ca <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   811b6:	4b30      	ldr	r3, [pc, #192]	; (81278 <xTaskGenericCreate+0x1e0>)
   811b8:	681b      	ldr	r3, [r3, #0]
   811ba:	b933      	cbnz	r3, 811ca <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   811bc:	4b25      	ldr	r3, [pc, #148]	; (81254 <xTaskGenericCreate+0x1bc>)
   811be:	681b      	ldr	r3, [r3, #0]
   811c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   811c2:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   811c4:	bf24      	itt	cs
   811c6:	4b23      	ldrcs	r3, [pc, #140]	; (81254 <xTaskGenericCreate+0x1bc>)
   811c8:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   811ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   811cc:	4b2b      	ldr	r3, [pc, #172]	; (8127c <xTaskGenericCreate+0x1e4>)
   811ce:	681b      	ldr	r3, [r3, #0]
   811d0:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   811d2:	bf84      	itt	hi
   811d4:	4b29      	ldrhi	r3, [pc, #164]	; (8127c <xTaskGenericCreate+0x1e4>)
   811d6:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   811d8:	4a29      	ldr	r2, [pc, #164]	; (81280 <xTaskGenericCreate+0x1e8>)
   811da:	6813      	ldr	r3, [r2, #0]
   811dc:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   811de:	3301      	adds	r3, #1
   811e0:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   811e2:	4b28      	ldr	r3, [pc, #160]	; (81284 <xTaskGenericCreate+0x1ec>)
   811e4:	681b      	ldr	r3, [r3, #0]
   811e6:	4298      	cmp	r0, r3
   811e8:	bf84      	itt	hi
   811ea:	4b26      	ldrhi	r3, [pc, #152]	; (81284 <xTaskGenericCreate+0x1ec>)
   811ec:	6018      	strhi	r0, [r3, #0]
   811ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   811f2:	4b19      	ldr	r3, [pc, #100]	; (81258 <xTaskGenericCreate+0x1c0>)
   811f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   811f8:	4649      	mov	r1, r9
   811fa:	4b23      	ldr	r3, [pc, #140]	; (81288 <xTaskGenericCreate+0x1f0>)
   811fc:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   811fe:	4b23      	ldr	r3, [pc, #140]	; (8128c <xTaskGenericCreate+0x1f4>)
   81200:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81202:	4b1d      	ldr	r3, [pc, #116]	; (81278 <xTaskGenericCreate+0x1e0>)
   81204:	681b      	ldr	r3, [r3, #0]
   81206:	b143      	cbz	r3, 8121a <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81208:	4b12      	ldr	r3, [pc, #72]	; (81254 <xTaskGenericCreate+0x1bc>)
   8120a:	681b      	ldr	r3, [r3, #0]
   8120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8120e:	429f      	cmp	r7, r3
   81210:	d905      	bls.n	8121e <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
   81212:	4b1f      	ldr	r3, [pc, #124]	; (81290 <xTaskGenericCreate+0x1f8>)
   81214:	4798      	blx	r3
   81216:	2001      	movs	r0, #1
   81218:	e008      	b.n	8122c <xTaskGenericCreate+0x194>
   8121a:	2001      	movs	r0, #1
   8121c:	e006      	b.n	8122c <xTaskGenericCreate+0x194>
   8121e:	2001      	movs	r0, #1
   81220:	e004      	b.n	8122c <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81222:	6306      	str	r6, [r0, #48]	; 0x30
   81224:	4630      	mov	r0, r6
   81226:	e760      	b.n	810ea <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81228:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   8122c:	b003      	add	sp, #12
   8122e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81232:	bf00      	nop
   81234:	00080889 	.word	0x00080889
   81238:	000809e5 	.word	0x000809e5
   8123c:	00080aad 	.word	0x00080aad
   81240:	00083005 	.word	0x00083005
   81244:	000830a1 	.word	0x000830a1
   81248:	0008083d 	.word	0x0008083d
   8124c:	00080899 	.word	0x00080899
   81250:	2007873c 	.word	0x2007873c
   81254:	20078714 	.word	0x20078714
   81258:	20078634 	.word	0x20078634
   8125c:	00080781 	.word	0x00080781
   81260:	2007861c 	.word	0x2007861c
   81264:	20078718 	.word	0x20078718
   81268:	200786fc 	.word	0x200786fc
   8126c:	200785e8 	.word	0x200785e8
   81270:	200785fc 	.word	0x200785fc
   81274:	20078734 	.word	0x20078734
   81278:	20078600 	.word	0x20078600
   8127c:	20078744 	.word	0x20078744
   81280:	20078738 	.word	0x20078738
   81284:	20078630 	.word	0x20078630
   81288:	000807a1 	.word	0x000807a1
   8128c:	000808b9 	.word	0x000808b9
   81290:	00080879 	.word	0x00080879
   81294:	00080799 	.word	0x00080799
   81298:	20078608 	.word	0x20078608

0008129c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   8129c:	b510      	push	{r4, lr}
   8129e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   812a0:	2300      	movs	r3, #0
   812a2:	9300      	str	r3, [sp, #0]
   812a4:	9301      	str	r3, [sp, #4]
   812a6:	9302      	str	r3, [sp, #8]
   812a8:	9303      	str	r3, [sp, #12]
   812aa:	480f      	ldr	r0, [pc, #60]	; (812e8 <vTaskStartScheduler+0x4c>)
   812ac:	490f      	ldr	r1, [pc, #60]	; (812ec <vTaskStartScheduler+0x50>)
   812ae:	f44f 7280 	mov.w	r2, #256	; 0x100
   812b2:	4c0f      	ldr	r4, [pc, #60]	; (812f0 <vTaskStartScheduler+0x54>)
   812b4:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   812b6:	2801      	cmp	r0, #1
   812b8:	d10e      	bne.n	812d8 <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   812ba:	4b0e      	ldr	r3, [pc, #56]	; (812f4 <vTaskStartScheduler+0x58>)
   812bc:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   812be:	2801      	cmp	r0, #1
   812c0:	d10a      	bne.n	812d8 <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   812c2:	4b0d      	ldr	r3, [pc, #52]	; (812f8 <vTaskStartScheduler+0x5c>)
   812c4:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   812c6:	2201      	movs	r2, #1
   812c8:	4b0c      	ldr	r3, [pc, #48]	; (812fc <vTaskStartScheduler+0x60>)
   812ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   812cc:	2200      	movs	r2, #0
   812ce:	4b0c      	ldr	r3, [pc, #48]	; (81300 <vTaskStartScheduler+0x64>)
   812d0:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   812d2:	4b0c      	ldr	r3, [pc, #48]	; (81304 <vTaskStartScheduler+0x68>)
   812d4:	4798      	blx	r3
   812d6:	e004      	b.n	812e2 <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   812d8:	b918      	cbnz	r0, 812e2 <vTaskStartScheduler+0x46>
   812da:	4b07      	ldr	r3, [pc, #28]	; (812f8 <vTaskStartScheduler+0x5c>)
   812dc:	4798      	blx	r3
   812de:	bf00      	nop
   812e0:	e7fd      	b.n	812de <vTaskStartScheduler+0x42>
}
   812e2:	b004      	add	sp, #16
   812e4:	bd10      	pop	{r4, pc}
   812e6:	bf00      	nop
   812e8:	00081601 	.word	0x00081601
   812ec:	00083248 	.word	0x00083248
   812f0:	00081099 	.word	0x00081099
   812f4:	00081ac1 	.word	0x00081ac1
   812f8:	00080889 	.word	0x00080889
   812fc:	20078600 	.word	0x20078600
   81300:	20078730 	.word	0x20078730
   81304:	00080955 	.word	0x00080955

00081308 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81308:	4a02      	ldr	r2, [pc, #8]	; (81314 <vTaskSuspendAll+0xc>)
   8130a:	6813      	ldr	r3, [r2, #0]
   8130c:	3301      	adds	r3, #1
   8130e:	6013      	str	r3, [r2, #0]
   81310:	4770      	bx	lr
   81312:	bf00      	nop
   81314:	2007872c 	.word	0x2007872c

00081318 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81318:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8131a:	4b04      	ldr	r3, [pc, #16]	; (8132c <xTaskGetTickCount+0x14>)
   8131c:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8131e:	4b04      	ldr	r3, [pc, #16]	; (81330 <xTaskGetTickCount+0x18>)
   81320:	881c      	ldrh	r4, [r3, #0]
   81322:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   81324:	4b03      	ldr	r3, [pc, #12]	; (81334 <xTaskGetTickCount+0x1c>)
   81326:	4798      	blx	r3

	return xTicks;
}
   81328:	4620      	mov	r0, r4
   8132a:	bd10      	pop	{r4, pc}
   8132c:	00080899 	.word	0x00080899
   81330:	20078730 	.word	0x20078730
   81334:	000808b9 	.word	0x000808b9

00081338 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8133c:	4b3d      	ldr	r3, [pc, #244]	; (81434 <vTaskIncrementTick+0xfc>)
   8133e:	681b      	ldr	r3, [r3, #0]
   81340:	2b00      	cmp	r3, #0
   81342:	d171      	bne.n	81428 <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   81344:	4a3c      	ldr	r2, [pc, #240]	; (81438 <vTaskIncrementTick+0x100>)
   81346:	8813      	ldrh	r3, [r2, #0]
   81348:	3301      	adds	r3, #1
   8134a:	b29b      	uxth	r3, r3
   8134c:	8013      	strh	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
   8134e:	8813      	ldrh	r3, [r2, #0]
   81350:	b29b      	uxth	r3, r3
   81352:	bb03      	cbnz	r3, 81396 <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81354:	4b39      	ldr	r3, [pc, #228]	; (8143c <vTaskIncrementTick+0x104>)
   81356:	681b      	ldr	r3, [r3, #0]
   81358:	681b      	ldr	r3, [r3, #0]
   8135a:	b11b      	cbz	r3, 81364 <vTaskIncrementTick+0x2c>
   8135c:	4b38      	ldr	r3, [pc, #224]	; (81440 <vTaskIncrementTick+0x108>)
   8135e:	4798      	blx	r3
   81360:	bf00      	nop
   81362:	e7fd      	b.n	81360 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   81364:	4b35      	ldr	r3, [pc, #212]	; (8143c <vTaskIncrementTick+0x104>)
   81366:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81368:	4a36      	ldr	r2, [pc, #216]	; (81444 <vTaskIncrementTick+0x10c>)
   8136a:	6810      	ldr	r0, [r2, #0]
   8136c:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8136e:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81370:	4935      	ldr	r1, [pc, #212]	; (81448 <vTaskIncrementTick+0x110>)
   81372:	680a      	ldr	r2, [r1, #0]
   81374:	3201      	adds	r2, #1
   81376:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81378:	681b      	ldr	r3, [r3, #0]
   8137a:	681b      	ldr	r3, [r3, #0]
   8137c:	b923      	cbnz	r3, 81388 <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   8137e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81382:	4b32      	ldr	r3, [pc, #200]	; (8144c <vTaskIncrementTick+0x114>)
   81384:	801a      	strh	r2, [r3, #0]
   81386:	e006      	b.n	81396 <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81388:	4b2c      	ldr	r3, [pc, #176]	; (8143c <vTaskIncrementTick+0x104>)
   8138a:	681b      	ldr	r3, [r3, #0]
   8138c:	68db      	ldr	r3, [r3, #12]
   8138e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81390:	889a      	ldrh	r2, [r3, #4]
   81392:	4b2e      	ldr	r3, [pc, #184]	; (8144c <vTaskIncrementTick+0x114>)
   81394:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81396:	4b28      	ldr	r3, [pc, #160]	; (81438 <vTaskIncrementTick+0x100>)
   81398:	881a      	ldrh	r2, [r3, #0]
   8139a:	b292      	uxth	r2, r2
   8139c:	4b2b      	ldr	r3, [pc, #172]	; (8144c <vTaskIncrementTick+0x114>)
   8139e:	881b      	ldrh	r3, [r3, #0]
   813a0:	b29b      	uxth	r3, r3
   813a2:	429a      	cmp	r2, r3
   813a4:	d344      	bcc.n	81430 <vTaskIncrementTick+0xf8>
   813a6:	4b25      	ldr	r3, [pc, #148]	; (8143c <vTaskIncrementTick+0x104>)
   813a8:	681b      	ldr	r3, [r3, #0]
   813aa:	681b      	ldr	r3, [r3, #0]
   813ac:	b16b      	cbz	r3, 813ca <vTaskIncrementTick+0x92>
   813ae:	4b23      	ldr	r3, [pc, #140]	; (8143c <vTaskIncrementTick+0x104>)
   813b0:	681b      	ldr	r3, [r3, #0]
   813b2:	68db      	ldr	r3, [r3, #12]
   813b4:	68dc      	ldr	r4, [r3, #12]
   813b6:	88a2      	ldrh	r2, [r4, #4]
   813b8:	4b1f      	ldr	r3, [pc, #124]	; (81438 <vTaskIncrementTick+0x100>)
   813ba:	881b      	ldrh	r3, [r3, #0]
   813bc:	b29b      	uxth	r3, r3
   813be:	429a      	cmp	r2, r3
   813c0:	d813      	bhi.n	813ea <vTaskIncrementTick+0xb2>
   813c2:	4d23      	ldr	r5, [pc, #140]	; (81450 <vTaskIncrementTick+0x118>)
   813c4:	4e23      	ldr	r6, [pc, #140]	; (81454 <vTaskIncrementTick+0x11c>)
   813c6:	4f24      	ldr	r7, [pc, #144]	; (81458 <vTaskIncrementTick+0x120>)
   813c8:	e013      	b.n	813f2 <vTaskIncrementTick+0xba>
   813ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   813ce:	4b1f      	ldr	r3, [pc, #124]	; (8144c <vTaskIncrementTick+0x114>)
   813d0:	801a      	strh	r2, [r3, #0]
   813d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813d6:	4b19      	ldr	r3, [pc, #100]	; (8143c <vTaskIncrementTick+0x104>)
   813d8:	681b      	ldr	r3, [r3, #0]
   813da:	68db      	ldr	r3, [r3, #12]
   813dc:	68dc      	ldr	r4, [r3, #12]
   813de:	88a2      	ldrh	r2, [r4, #4]
   813e0:	4b15      	ldr	r3, [pc, #84]	; (81438 <vTaskIncrementTick+0x100>)
   813e2:	881b      	ldrh	r3, [r3, #0]
   813e4:	b29b      	uxth	r3, r3
   813e6:	429a      	cmp	r2, r3
   813e8:	d903      	bls.n	813f2 <vTaskIncrementTick+0xba>
   813ea:	4b18      	ldr	r3, [pc, #96]	; (8144c <vTaskIncrementTick+0x114>)
   813ec:	801a      	strh	r2, [r3, #0]
   813ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813f2:	f104 0804 	add.w	r8, r4, #4
   813f6:	4640      	mov	r0, r8
   813f8:	47a8      	blx	r5
   813fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   813fc:	b113      	cbz	r3, 81404 <vTaskIncrementTick+0xcc>
   813fe:	f104 0018 	add.w	r0, r4, #24
   81402:	47a8      	blx	r5
   81404:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81406:	6833      	ldr	r3, [r6, #0]
   81408:	4298      	cmp	r0, r3
   8140a:	bf88      	it	hi
   8140c:	6030      	strhi	r0, [r6, #0]
   8140e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81412:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   81416:	4641      	mov	r1, r8
   81418:	4b10      	ldr	r3, [pc, #64]	; (8145c <vTaskIncrementTick+0x124>)
   8141a:	4798      	blx	r3
   8141c:	4b07      	ldr	r3, [pc, #28]	; (8143c <vTaskIncrementTick+0x104>)
   8141e:	681b      	ldr	r3, [r3, #0]
   81420:	681b      	ldr	r3, [r3, #0]
   81422:	2b00      	cmp	r3, #0
   81424:	d1d7      	bne.n	813d6 <vTaskIncrementTick+0x9e>
   81426:	e7d0      	b.n	813ca <vTaskIncrementTick+0x92>
	}
	else
	{
		++uxMissedTicks;
   81428:	4a0d      	ldr	r2, [pc, #52]	; (81460 <vTaskIncrementTick+0x128>)
   8142a:	6813      	ldr	r3, [r2, #0]
   8142c:	3301      	adds	r3, #1
   8142e:	6013      	str	r3, [r2, #0]
   81430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81434:	2007872c 	.word	0x2007872c
   81438:	20078730 	.word	0x20078730
   8143c:	200785fc 	.word	0x200785fc
   81440:	00080889 	.word	0x00080889
   81444:	20078734 	.word	0x20078734
   81448:	20078710 	.word	0x20078710
   8144c:	20070138 	.word	0x20070138
   81450:	00080801 	.word	0x00080801
   81454:	20078630 	.word	0x20078630
   81458:	20078634 	.word	0x20078634
   8145c:	000807a1 	.word	0x000807a1
   81460:	200785e4 	.word	0x200785e4

00081464 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81468:	4b30      	ldr	r3, [pc, #192]	; (8152c <xTaskResumeAll+0xc8>)
   8146a:	681b      	ldr	r3, [r3, #0]
   8146c:	b91b      	cbnz	r3, 81476 <xTaskResumeAll+0x12>
   8146e:	4b30      	ldr	r3, [pc, #192]	; (81530 <xTaskResumeAll+0xcc>)
   81470:	4798      	blx	r3
   81472:	bf00      	nop
   81474:	e7fd      	b.n	81472 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81476:	4b2f      	ldr	r3, [pc, #188]	; (81534 <xTaskResumeAll+0xd0>)
   81478:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   8147a:	4b2c      	ldr	r3, [pc, #176]	; (8152c <xTaskResumeAll+0xc8>)
   8147c:	681a      	ldr	r2, [r3, #0]
   8147e:	3a01      	subs	r2, #1
   81480:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81482:	681b      	ldr	r3, [r3, #0]
   81484:	2b00      	cmp	r3, #0
   81486:	d149      	bne.n	8151c <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81488:	4b2b      	ldr	r3, [pc, #172]	; (81538 <xTaskResumeAll+0xd4>)
   8148a:	681b      	ldr	r3, [r3, #0]
   8148c:	bb03      	cbnz	r3, 814d0 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8148e:	2400      	movs	r4, #0
   81490:	e047      	b.n	81522 <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81492:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81496:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81498:	f104 0018 	add.w	r0, r4, #24
   8149c:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8149e:	f104 0904 	add.w	r9, r4, #4
   814a2:	4648      	mov	r0, r9
   814a4:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   814a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   814a8:	6833      	ldr	r3, [r6, #0]
   814aa:	4298      	cmp	r0, r3
   814ac:	bf88      	it	hi
   814ae:	6030      	strhi	r0, [r6, #0]
   814b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   814b4:	4b21      	ldr	r3, [pc, #132]	; (8153c <xTaskResumeAll+0xd8>)
   814b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   814ba:	4649      	mov	r1, r9
   814bc:	4b20      	ldr	r3, [pc, #128]	; (81540 <xTaskResumeAll+0xdc>)
   814be:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   814c0:	4b20      	ldr	r3, [pc, #128]	; (81544 <xTaskResumeAll+0xe0>)
   814c2:	681b      	ldr	r3, [r3, #0]
   814c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   814c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   814c8:	429a      	cmp	r2, r3
   814ca:	bf28      	it	cs
   814cc:	2501      	movcs	r5, #1
   814ce:	e004      	b.n	814da <xTaskResumeAll+0x76>
   814d0:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   814d2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 81564 <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   814d6:	4f1c      	ldr	r7, [pc, #112]	; (81548 <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   814d8:	4e1c      	ldr	r6, [pc, #112]	; (8154c <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   814da:	f8d8 3000 	ldr.w	r3, [r8]
   814de:	2b00      	cmp	r3, #0
   814e0:	d1d7      	bne.n	81492 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   814e2:	4b1b      	ldr	r3, [pc, #108]	; (81550 <xTaskResumeAll+0xec>)
   814e4:	681b      	ldr	r3, [r3, #0]
   814e6:	b163      	cbz	r3, 81502 <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   814e8:	4b19      	ldr	r3, [pc, #100]	; (81550 <xTaskResumeAll+0xec>)
   814ea:	681b      	ldr	r3, [r3, #0]
   814ec:	b17b      	cbz	r3, 8150e <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
   814ee:	4d19      	ldr	r5, [pc, #100]	; (81554 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   814f0:	4c17      	ldr	r4, [pc, #92]	; (81550 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   814f2:	47a8      	blx	r5
						--uxMissedTicks;
   814f4:	6823      	ldr	r3, [r4, #0]
   814f6:	3b01      	subs	r3, #1
   814f8:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   814fa:	6823      	ldr	r3, [r4, #0]
   814fc:	2b00      	cmp	r3, #0
   814fe:	d1f8      	bne.n	814f2 <xTaskResumeAll+0x8e>
   81500:	e005      	b.n	8150e <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81502:	2d01      	cmp	r5, #1
   81504:	d003      	beq.n	8150e <xTaskResumeAll+0xaa>
   81506:	4b14      	ldr	r3, [pc, #80]	; (81558 <xTaskResumeAll+0xf4>)
   81508:	681b      	ldr	r3, [r3, #0]
   8150a:	2b01      	cmp	r3, #1
   8150c:	d108      	bne.n	81520 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   8150e:	2200      	movs	r2, #0
   81510:	4b11      	ldr	r3, [pc, #68]	; (81558 <xTaskResumeAll+0xf4>)
   81512:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81514:	4b11      	ldr	r3, [pc, #68]	; (8155c <xTaskResumeAll+0xf8>)
   81516:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81518:	2401      	movs	r4, #1
   8151a:	e002      	b.n	81522 <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8151c:	2400      	movs	r4, #0
   8151e:	e000      	b.n	81522 <xTaskResumeAll+0xbe>
   81520:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81522:	4b0f      	ldr	r3, [pc, #60]	; (81560 <xTaskResumeAll+0xfc>)
   81524:	4798      	blx	r3

	return xAlreadyYielded;
}
   81526:	4620      	mov	r0, r4
   81528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8152c:	2007872c 	.word	0x2007872c
   81530:	00080889 	.word	0x00080889
   81534:	00080899 	.word	0x00080899
   81538:	2007873c 	.word	0x2007873c
   8153c:	20078634 	.word	0x20078634
   81540:	000807a1 	.word	0x000807a1
   81544:	20078714 	.word	0x20078714
   81548:	00080801 	.word	0x00080801
   8154c:	20078630 	.word	0x20078630
   81550:	200785e4 	.word	0x200785e4
   81554:	00081339 	.word	0x00081339
   81558:	20078740 	.word	0x20078740
   8155c:	00080879 	.word	0x00080879
   81560:	000808b9 	.word	0x000808b9
   81564:	20078718 	.word	0x20078718

00081568 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   81568:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   8156a:	b918      	cbnz	r0, 81574 <vTaskDelayUntil+0xc>
   8156c:	4b1c      	ldr	r3, [pc, #112]	; (815e0 <vTaskDelayUntil+0x78>)
   8156e:	4798      	blx	r3
   81570:	bf00      	nop
   81572:	e7fd      	b.n	81570 <vTaskDelayUntil+0x8>
   81574:	460c      	mov	r4, r1
   81576:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   81578:	b919      	cbnz	r1, 81582 <vTaskDelayUntil+0x1a>
   8157a:	4b19      	ldr	r3, [pc, #100]	; (815e0 <vTaskDelayUntil+0x78>)
   8157c:	4798      	blx	r3
   8157e:	bf00      	nop
   81580:	e7fd      	b.n	8157e <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   81582:	4b18      	ldr	r3, [pc, #96]	; (815e4 <vTaskDelayUntil+0x7c>)
   81584:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81586:	882b      	ldrh	r3, [r5, #0]
   81588:	441c      	add	r4, r3
   8158a:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   8158c:	4a16      	ldr	r2, [pc, #88]	; (815e8 <vTaskDelayUntil+0x80>)
   8158e:	8812      	ldrh	r2, [r2, #0]
   81590:	b292      	uxth	r2, r2
   81592:	4293      	cmp	r3, r2
   81594:	d908      	bls.n	815a8 <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81596:	42a3      	cmp	r3, r4
   81598:	d91e      	bls.n	815d8 <vTaskDelayUntil+0x70>
   8159a:	4b13      	ldr	r3, [pc, #76]	; (815e8 <vTaskDelayUntil+0x80>)
   8159c:	881b      	ldrh	r3, [r3, #0]
   8159e:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   815a0:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   815a2:	429c      	cmp	r4, r3
   815a4:	d910      	bls.n	815c8 <vTaskDelayUntil+0x60>
   815a6:	e007      	b.n	815b8 <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   815a8:	42a3      	cmp	r3, r4
   815aa:	d813      	bhi.n	815d4 <vTaskDelayUntil+0x6c>
   815ac:	4b0e      	ldr	r3, [pc, #56]	; (815e8 <vTaskDelayUntil+0x80>)
   815ae:	881b      	ldrh	r3, [r3, #0]
   815b0:	b29b      	uxth	r3, r3
   815b2:	429c      	cmp	r4, r3
   815b4:	d80e      	bhi.n	815d4 <vTaskDelayUntil+0x6c>
   815b6:	e00f      	b.n	815d8 <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   815b8:	4b0c      	ldr	r3, [pc, #48]	; (815ec <vTaskDelayUntil+0x84>)
   815ba:	6818      	ldr	r0, [r3, #0]
   815bc:	3004      	adds	r0, #4
   815be:	4b0c      	ldr	r3, [pc, #48]	; (815f0 <vTaskDelayUntil+0x88>)
   815c0:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   815c2:	4620      	mov	r0, r4
   815c4:	4b0b      	ldr	r3, [pc, #44]	; (815f4 <vTaskDelayUntil+0x8c>)
   815c6:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   815c8:	4b0b      	ldr	r3, [pc, #44]	; (815f8 <vTaskDelayUntil+0x90>)
   815ca:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   815cc:	b930      	cbnz	r0, 815dc <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   815ce:	4b0b      	ldr	r3, [pc, #44]	; (815fc <vTaskDelayUntil+0x94>)
   815d0:	4798      	blx	r3
   815d2:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   815d4:	802c      	strh	r4, [r5, #0]
   815d6:	e7ef      	b.n	815b8 <vTaskDelayUntil+0x50>
   815d8:	802c      	strh	r4, [r5, #0]
   815da:	e7f5      	b.n	815c8 <vTaskDelayUntil+0x60>
   815dc:	bd38      	pop	{r3, r4, r5, pc}
   815de:	bf00      	nop
   815e0:	00080889 	.word	0x00080889
   815e4:	00081309 	.word	0x00081309
   815e8:	20078730 	.word	0x20078730
   815ec:	20078714 	.word	0x20078714
   815f0:	00080801 	.word	0x00080801
   815f4:	0008103d 	.word	0x0008103d
   815f8:	00081465 	.word	0x00081465
   815fc:	00080879 	.word	0x00080879

00081600 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81600:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81602:	4d15      	ldr	r5, [pc, #84]	; (81658 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81604:	4e15      	ldr	r6, [pc, #84]	; (8165c <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81606:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8167c <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   8160a:	4f15      	ldr	r7, [pc, #84]	; (81660 <prvIdleTask+0x60>)
   8160c:	e019      	b.n	81642 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   8160e:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81610:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   81612:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
   81614:	b1ac      	cbz	r4, 81642 <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81616:	4b13      	ldr	r3, [pc, #76]	; (81664 <prvIdleTask+0x64>)
   81618:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   8161a:	68f3      	ldr	r3, [r6, #12]
   8161c:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8161e:	1d20      	adds	r0, r4, #4
   81620:	4b11      	ldr	r3, [pc, #68]	; (81668 <prvIdleTask+0x68>)
   81622:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81624:	4a11      	ldr	r2, [pc, #68]	; (8166c <prvIdleTask+0x6c>)
   81626:	6813      	ldr	r3, [r2, #0]
   81628:	3b01      	subs	r3, #1
   8162a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   8162c:	682b      	ldr	r3, [r5, #0]
   8162e:	3b01      	subs	r3, #1
   81630:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81632:	4b0f      	ldr	r3, [pc, #60]	; (81670 <prvIdleTask+0x70>)
   81634:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81636:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81638:	f8df 9044 	ldr.w	r9, [pc, #68]	; 81680 <prvIdleTask+0x80>
   8163c:	47c8      	blx	r9
		vPortFree( pxTCB );
   8163e:	4620      	mov	r0, r4
   81640:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81642:	682b      	ldr	r3, [r5, #0]
   81644:	2b00      	cmp	r3, #0
   81646:	d1e2      	bne.n	8160e <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81648:	4b0a      	ldr	r3, [pc, #40]	; (81674 <prvIdleTask+0x74>)
   8164a:	681b      	ldr	r3, [r3, #0]
   8164c:	2b01      	cmp	r3, #1
   8164e:	d9f8      	bls.n	81642 <prvIdleTask+0x42>
			{
				taskYIELD();
   81650:	4b09      	ldr	r3, [pc, #36]	; (81678 <prvIdleTask+0x78>)
   81652:	4798      	blx	r3
   81654:	e7d7      	b.n	81606 <prvIdleTask+0x6>
   81656:	bf00      	nop
   81658:	20078604 	.word	0x20078604
   8165c:	200786fc 	.word	0x200786fc
   81660:	00081465 	.word	0x00081465
   81664:	00080899 	.word	0x00080899
   81668:	00080801 	.word	0x00080801
   8166c:	2007873c 	.word	0x2007873c
   81670:	000808b9 	.word	0x000808b9
   81674:	20078634 	.word	0x20078634
   81678:	00080879 	.word	0x00080879
   8167c:	00081309 	.word	0x00081309
   81680:	00080aad 	.word	0x00080aad

00081684 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81684:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81686:	4b22      	ldr	r3, [pc, #136]	; (81710 <vTaskSwitchContext+0x8c>)
   81688:	681b      	ldr	r3, [r3, #0]
   8168a:	b96b      	cbnz	r3, 816a8 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8168c:	4b21      	ldr	r3, [pc, #132]	; (81714 <vTaskSwitchContext+0x90>)
   8168e:	681b      	ldr	r3, [r3, #0]
   81690:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81694:	009b      	lsls	r3, r3, #2
   81696:	4a20      	ldr	r2, [pc, #128]	; (81718 <vTaskSwitchContext+0x94>)
   81698:	58d3      	ldr	r3, [r2, r3]
   8169a:	b9cb      	cbnz	r3, 816d0 <vTaskSwitchContext+0x4c>
   8169c:	4b1d      	ldr	r3, [pc, #116]	; (81714 <vTaskSwitchContext+0x90>)
   8169e:	681b      	ldr	r3, [r3, #0]
   816a0:	b143      	cbz	r3, 816b4 <vTaskSwitchContext+0x30>
   816a2:	4a1c      	ldr	r2, [pc, #112]	; (81714 <vTaskSwitchContext+0x90>)
   816a4:	491c      	ldr	r1, [pc, #112]	; (81718 <vTaskSwitchContext+0x94>)
   816a6:	e009      	b.n	816bc <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   816a8:	2201      	movs	r2, #1
   816aa:	4b1c      	ldr	r3, [pc, #112]	; (8171c <vTaskSwitchContext+0x98>)
   816ac:	601a      	str	r2, [r3, #0]
   816ae:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   816b0:	6813      	ldr	r3, [r2, #0]
   816b2:	b91b      	cbnz	r3, 816bc <vTaskSwitchContext+0x38>
   816b4:	4b1a      	ldr	r3, [pc, #104]	; (81720 <vTaskSwitchContext+0x9c>)
   816b6:	4798      	blx	r3
   816b8:	bf00      	nop
   816ba:	e7fd      	b.n	816b8 <vTaskSwitchContext+0x34>
   816bc:	6813      	ldr	r3, [r2, #0]
   816be:	3b01      	subs	r3, #1
   816c0:	6013      	str	r3, [r2, #0]
   816c2:	6813      	ldr	r3, [r2, #0]
   816c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   816c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   816cc:	2b00      	cmp	r3, #0
   816ce:	d0ef      	beq.n	816b0 <vTaskSwitchContext+0x2c>
   816d0:	4b10      	ldr	r3, [pc, #64]	; (81714 <vTaskSwitchContext+0x90>)
   816d2:	681b      	ldr	r3, [r3, #0]
   816d4:	4a10      	ldr	r2, [pc, #64]	; (81718 <vTaskSwitchContext+0x94>)
   816d6:	0099      	lsls	r1, r3, #2
   816d8:	18c8      	adds	r0, r1, r3
   816da:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   816de:	6844      	ldr	r4, [r0, #4]
   816e0:	6864      	ldr	r4, [r4, #4]
   816e2:	6044      	str	r4, [r0, #4]
   816e4:	4602      	mov	r2, r0
   816e6:	3208      	adds	r2, #8
   816e8:	4294      	cmp	r4, r2
   816ea:	d106      	bne.n	816fa <vTaskSwitchContext+0x76>
   816ec:	6860      	ldr	r0, [r4, #4]
   816ee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   816f2:	4a09      	ldr	r2, [pc, #36]	; (81718 <vTaskSwitchContext+0x94>)
   816f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   816f8:	6050      	str	r0, [r2, #4]
   816fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   816fe:	4a06      	ldr	r2, [pc, #24]	; (81718 <vTaskSwitchContext+0x94>)
   81700:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81704:	685b      	ldr	r3, [r3, #4]
   81706:	68da      	ldr	r2, [r3, #12]
   81708:	4b06      	ldr	r3, [pc, #24]	; (81724 <vTaskSwitchContext+0xa0>)
   8170a:	601a      	str	r2, [r3, #0]
   8170c:	bd10      	pop	{r4, pc}
   8170e:	bf00      	nop
   81710:	2007872c 	.word	0x2007872c
   81714:	20078630 	.word	0x20078630
   81718:	20078634 	.word	0x20078634
   8171c:	20078740 	.word	0x20078740
   81720:	00080889 	.word	0x00080889
   81724:	20078714 	.word	0x20078714

00081728 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81728:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   8172a:	b918      	cbnz	r0, 81734 <vTaskPlaceOnEventList+0xc>
   8172c:	4b0f      	ldr	r3, [pc, #60]	; (8176c <vTaskPlaceOnEventList+0x44>)
   8172e:	4798      	blx	r3
   81730:	bf00      	nop
   81732:	e7fd      	b.n	81730 <vTaskPlaceOnEventList+0x8>
   81734:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81736:	4d0e      	ldr	r5, [pc, #56]	; (81770 <vTaskPlaceOnEventList+0x48>)
   81738:	6829      	ldr	r1, [r5, #0]
   8173a:	3118      	adds	r1, #24
   8173c:	4b0d      	ldr	r3, [pc, #52]	; (81774 <vTaskPlaceOnEventList+0x4c>)
   8173e:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81740:	6828      	ldr	r0, [r5, #0]
   81742:	3004      	adds	r0, #4
   81744:	4b0c      	ldr	r3, [pc, #48]	; (81778 <vTaskPlaceOnEventList+0x50>)
   81746:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81748:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8174c:	429c      	cmp	r4, r3
   8174e:	d105      	bne.n	8175c <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81750:	6829      	ldr	r1, [r5, #0]
   81752:	480a      	ldr	r0, [pc, #40]	; (8177c <vTaskPlaceOnEventList+0x54>)
   81754:	3104      	adds	r1, #4
   81756:	4b0a      	ldr	r3, [pc, #40]	; (81780 <vTaskPlaceOnEventList+0x58>)
   81758:	4798      	blx	r3
   8175a:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   8175c:	4b09      	ldr	r3, [pc, #36]	; (81784 <vTaskPlaceOnEventList+0x5c>)
   8175e:	8818      	ldrh	r0, [r3, #0]
   81760:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81762:	b280      	uxth	r0, r0
   81764:	4b08      	ldr	r3, [pc, #32]	; (81788 <vTaskPlaceOnEventList+0x60>)
   81766:	4798      	blx	r3
   81768:	bd38      	pop	{r3, r4, r5, pc}
   8176a:	bf00      	nop
   8176c:	00080889 	.word	0x00080889
   81770:	20078714 	.word	0x20078714
   81774:	000807bd 	.word	0x000807bd
   81778:	00080801 	.word	0x00080801
   8177c:	200785e8 	.word	0x200785e8
   81780:	000807a1 	.word	0x000807a1
   81784:	20078730 	.word	0x20078730
   81788:	0008103d 	.word	0x0008103d

0008178c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   8178c:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   8178e:	b918      	cbnz	r0, 81798 <vTaskPlaceOnEventListRestricted+0xc>
   81790:	4b0a      	ldr	r3, [pc, #40]	; (817bc <vTaskPlaceOnEventListRestricted+0x30>)
   81792:	4798      	blx	r3
   81794:	bf00      	nop
   81796:	e7fd      	b.n	81794 <vTaskPlaceOnEventListRestricted+0x8>
   81798:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8179a:	4c09      	ldr	r4, [pc, #36]	; (817c0 <vTaskPlaceOnEventListRestricted+0x34>)
   8179c:	6821      	ldr	r1, [r4, #0]
   8179e:	3118      	adds	r1, #24
   817a0:	4b08      	ldr	r3, [pc, #32]	; (817c4 <vTaskPlaceOnEventListRestricted+0x38>)
   817a2:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   817a4:	6820      	ldr	r0, [r4, #0]
   817a6:	3004      	adds	r0, #4
   817a8:	4b07      	ldr	r3, [pc, #28]	; (817c8 <vTaskPlaceOnEventListRestricted+0x3c>)
   817aa:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   817ac:	4b07      	ldr	r3, [pc, #28]	; (817cc <vTaskPlaceOnEventListRestricted+0x40>)
   817ae:	8818      	ldrh	r0, [r3, #0]
   817b0:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   817b2:	b280      	uxth	r0, r0
   817b4:	4b06      	ldr	r3, [pc, #24]	; (817d0 <vTaskPlaceOnEventListRestricted+0x44>)
   817b6:	4798      	blx	r3
   817b8:	bd38      	pop	{r3, r4, r5, pc}
   817ba:	bf00      	nop
   817bc:	00080889 	.word	0x00080889
   817c0:	20078714 	.word	0x20078714
   817c4:	000807a1 	.word	0x000807a1
   817c8:	00080801 	.word	0x00080801
   817cc:	20078730 	.word	0x20078730
   817d0:	0008103d 	.word	0x0008103d

000817d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   817d4:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   817d6:	68c3      	ldr	r3, [r0, #12]
   817d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   817da:	b91c      	cbnz	r4, 817e4 <xTaskRemoveFromEventList+0x10>
   817dc:	4b16      	ldr	r3, [pc, #88]	; (81838 <xTaskRemoveFromEventList+0x64>)
   817de:	4798      	blx	r3
   817e0:	bf00      	nop
   817e2:	e7fd      	b.n	817e0 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   817e4:	f104 0518 	add.w	r5, r4, #24
   817e8:	4628      	mov	r0, r5
   817ea:	4b14      	ldr	r3, [pc, #80]	; (8183c <xTaskRemoveFromEventList+0x68>)
   817ec:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   817ee:	4b14      	ldr	r3, [pc, #80]	; (81840 <xTaskRemoveFromEventList+0x6c>)
   817f0:	681b      	ldr	r3, [r3, #0]
   817f2:	b99b      	cbnz	r3, 8181c <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   817f4:	1d25      	adds	r5, r4, #4
   817f6:	4628      	mov	r0, r5
   817f8:	4b10      	ldr	r3, [pc, #64]	; (8183c <xTaskRemoveFromEventList+0x68>)
   817fa:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   817fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   817fe:	4b11      	ldr	r3, [pc, #68]	; (81844 <xTaskRemoveFromEventList+0x70>)
   81800:	681b      	ldr	r3, [r3, #0]
   81802:	4298      	cmp	r0, r3
   81804:	bf84      	itt	hi
   81806:	4b0f      	ldrhi	r3, [pc, #60]	; (81844 <xTaskRemoveFromEventList+0x70>)
   81808:	6018      	strhi	r0, [r3, #0]
   8180a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8180e:	4b0e      	ldr	r3, [pc, #56]	; (81848 <xTaskRemoveFromEventList+0x74>)
   81810:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81814:	4629      	mov	r1, r5
   81816:	4b0d      	ldr	r3, [pc, #52]	; (8184c <xTaskRemoveFromEventList+0x78>)
   81818:	4798      	blx	r3
   8181a:	e003      	b.n	81824 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   8181c:	480c      	ldr	r0, [pc, #48]	; (81850 <xTaskRemoveFromEventList+0x7c>)
   8181e:	4629      	mov	r1, r5
   81820:	4b0a      	ldr	r3, [pc, #40]	; (8184c <xTaskRemoveFromEventList+0x78>)
   81822:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81824:	4b0b      	ldr	r3, [pc, #44]	; (81854 <xTaskRemoveFromEventList+0x80>)
   81826:	681b      	ldr	r3, [r3, #0]
   81828:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   8182c:	4298      	cmp	r0, r3
   8182e:	bf34      	ite	cc
   81830:	2000      	movcc	r0, #0
   81832:	2001      	movcs	r0, #1
   81834:	bd38      	pop	{r3, r4, r5, pc}
   81836:	bf00      	nop
   81838:	00080889 	.word	0x00080889
   8183c:	00080801 	.word	0x00080801
   81840:	2007872c 	.word	0x2007872c
   81844:	20078630 	.word	0x20078630
   81848:	20078634 	.word	0x20078634
   8184c:	000807a1 	.word	0x000807a1
   81850:	20078718 	.word	0x20078718
   81854:	20078714 	.word	0x20078714

00081858 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81858:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8185a:	b918      	cbnz	r0, 81864 <vTaskSetTimeOutState+0xc>
   8185c:	4b05      	ldr	r3, [pc, #20]	; (81874 <vTaskSetTimeOutState+0x1c>)
   8185e:	4798      	blx	r3
   81860:	bf00      	nop
   81862:	e7fd      	b.n	81860 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81864:	4a04      	ldr	r2, [pc, #16]	; (81878 <vTaskSetTimeOutState+0x20>)
   81866:	6812      	ldr	r2, [r2, #0]
   81868:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8186a:	4a04      	ldr	r2, [pc, #16]	; (8187c <vTaskSetTimeOutState+0x24>)
   8186c:	8812      	ldrh	r2, [r2, #0]
   8186e:	8082      	strh	r2, [r0, #4]
   81870:	bd08      	pop	{r3, pc}
   81872:	bf00      	nop
   81874:	00080889 	.word	0x00080889
   81878:	20078710 	.word	0x20078710
   8187c:	20078730 	.word	0x20078730

00081880 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81880:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81882:	b918      	cbnz	r0, 8188c <xTaskCheckForTimeOut+0xc>
   81884:	4b1b      	ldr	r3, [pc, #108]	; (818f4 <xTaskCheckForTimeOut+0x74>)
   81886:	4798      	blx	r3
   81888:	bf00      	nop
   8188a:	e7fd      	b.n	81888 <xTaskCheckForTimeOut+0x8>
   8188c:	460d      	mov	r5, r1
   8188e:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   81890:	b919      	cbnz	r1, 8189a <xTaskCheckForTimeOut+0x1a>
   81892:	4b18      	ldr	r3, [pc, #96]	; (818f4 <xTaskCheckForTimeOut+0x74>)
   81894:	4798      	blx	r3
   81896:	bf00      	nop
   81898:	e7fd      	b.n	81896 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   8189a:	4b17      	ldr	r3, [pc, #92]	; (818f8 <xTaskCheckForTimeOut+0x78>)
   8189c:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   8189e:	882b      	ldrh	r3, [r5, #0]
   818a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   818a4:	4293      	cmp	r3, r2
   818a6:	d01b      	beq.n	818e0 <xTaskCheckForTimeOut+0x60>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   818a8:	4a14      	ldr	r2, [pc, #80]	; (818fc <xTaskCheckForTimeOut+0x7c>)
   818aa:	6812      	ldr	r2, [r2, #0]
   818ac:	6821      	ldr	r1, [r4, #0]
   818ae:	4291      	cmp	r1, r2
   818b0:	d005      	beq.n	818be <xTaskCheckForTimeOut+0x3e>
   818b2:	4a13      	ldr	r2, [pc, #76]	; (81900 <xTaskCheckForTimeOut+0x80>)
   818b4:	8812      	ldrh	r2, [r2, #0]
   818b6:	b292      	uxth	r2, r2
   818b8:	88a1      	ldrh	r1, [r4, #4]
   818ba:	4291      	cmp	r1, r2
   818bc:	d912      	bls.n	818e4 <xTaskCheckForTimeOut+0x64>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   818be:	4a10      	ldr	r2, [pc, #64]	; (81900 <xTaskCheckForTimeOut+0x80>)
   818c0:	8811      	ldrh	r1, [r2, #0]
   818c2:	88a0      	ldrh	r0, [r4, #4]
   818c4:	1a09      	subs	r1, r1, r0
   818c6:	b289      	uxth	r1, r1
   818c8:	428b      	cmp	r3, r1
   818ca:	d90d      	bls.n	818e8 <xTaskCheckForTimeOut+0x68>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   818cc:	8812      	ldrh	r2, [r2, #0]
   818ce:	b292      	uxth	r2, r2
   818d0:	1a12      	subs	r2, r2, r0
   818d2:	1a9b      	subs	r3, r3, r2
   818d4:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   818d6:	4620      	mov	r0, r4
   818d8:	4b0a      	ldr	r3, [pc, #40]	; (81904 <xTaskCheckForTimeOut+0x84>)
   818da:	4798      	blx	r3
			xReturn = pdFALSE;
   818dc:	2400      	movs	r4, #0
   818de:	e004      	b.n	818ea <xTaskCheckForTimeOut+0x6a>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   818e0:	2400      	movs	r4, #0
   818e2:	e002      	b.n	818ea <xTaskCheckForTimeOut+0x6a>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   818e4:	2401      	movs	r4, #1
   818e6:	e000      	b.n	818ea <xTaskCheckForTimeOut+0x6a>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   818e8:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   818ea:	4b07      	ldr	r3, [pc, #28]	; (81908 <xTaskCheckForTimeOut+0x88>)
   818ec:	4798      	blx	r3

	return xReturn;
}
   818ee:	4620      	mov	r0, r4
   818f0:	bd38      	pop	{r3, r4, r5, pc}
   818f2:	bf00      	nop
   818f4:	00080889 	.word	0x00080889
   818f8:	00080899 	.word	0x00080899
   818fc:	20078710 	.word	0x20078710
   81900:	20078730 	.word	0x20078730
   81904:	00081859 	.word	0x00081859
   81908:	000808b9 	.word	0x000808b9

0008190c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   8190c:	2201      	movs	r2, #1
   8190e:	4b01      	ldr	r3, [pc, #4]	; (81914 <vTaskMissedYield+0x8>)
   81910:	601a      	str	r2, [r3, #0]
   81912:	4770      	bx	lr
   81914:	20078740 	.word	0x20078740

00081918 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81918:	4b01      	ldr	r3, [pc, #4]	; (81920 <xTaskGetCurrentTaskHandle+0x8>)
   8191a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   8191c:	4770      	bx	lr
   8191e:	bf00      	nop
   81920:	20078714 	.word	0x20078714

00081924 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81924:	4b05      	ldr	r3, [pc, #20]	; (8193c <xTaskGetSchedulerState+0x18>)
   81926:	681b      	ldr	r3, [r3, #0]
   81928:	b133      	cbz	r3, 81938 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8192a:	4b05      	ldr	r3, [pc, #20]	; (81940 <xTaskGetSchedulerState+0x1c>)
   8192c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   8192e:	2b00      	cmp	r3, #0
   81930:	bf0c      	ite	eq
   81932:	2001      	moveq	r0, #1
   81934:	2002      	movne	r0, #2
   81936:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81938:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   8193a:	4770      	bx	lr
   8193c:	20078600 	.word	0x20078600
   81940:	2007872c 	.word	0x2007872c

00081944 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81944:	2800      	cmp	r0, #0
   81946:	d031      	beq.n	819ac <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81948:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   8194a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   8194c:	4918      	ldr	r1, [pc, #96]	; (819b0 <vTaskPriorityInherit+0x6c>)
   8194e:	6809      	ldr	r1, [r1, #0]
   81950:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81952:	428b      	cmp	r3, r1
   81954:	d229      	bcs.n	819aa <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81956:	4916      	ldr	r1, [pc, #88]	; (819b0 <vTaskPriorityInherit+0x6c>)
   81958:	6809      	ldr	r1, [r1, #0]
   8195a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   8195c:	f1c1 010a 	rsb	r1, r1, #10
   81960:	8301      	strh	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81962:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81966:	4913      	ldr	r1, [pc, #76]	; (819b4 <vTaskPriorityInherit+0x70>)
   81968:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   8196c:	6941      	ldr	r1, [r0, #20]
   8196e:	4299      	cmp	r1, r3
   81970:	d117      	bne.n	819a2 <vTaskPriorityInherit+0x5e>
   81972:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81974:	1d04      	adds	r4, r0, #4
   81976:	4620      	mov	r0, r4
   81978:	4b0f      	ldr	r3, [pc, #60]	; (819b8 <vTaskPriorityInherit+0x74>)
   8197a:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8197c:	4b0c      	ldr	r3, [pc, #48]	; (819b0 <vTaskPriorityInherit+0x6c>)
   8197e:	681b      	ldr	r3, [r3, #0]
   81980:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   81982:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81984:	4b0d      	ldr	r3, [pc, #52]	; (819bc <vTaskPriorityInherit+0x78>)
   81986:	681b      	ldr	r3, [r3, #0]
   81988:	4298      	cmp	r0, r3
   8198a:	bf84      	itt	hi
   8198c:	4b0b      	ldrhi	r3, [pc, #44]	; (819bc <vTaskPriorityInherit+0x78>)
   8198e:	6018      	strhi	r0, [r3, #0]
   81990:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81994:	4b07      	ldr	r3, [pc, #28]	; (819b4 <vTaskPriorityInherit+0x70>)
   81996:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8199a:	4621      	mov	r1, r4
   8199c:	4b08      	ldr	r3, [pc, #32]	; (819c0 <vTaskPriorityInherit+0x7c>)
   8199e:	4798      	blx	r3
   819a0:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   819a2:	4b03      	ldr	r3, [pc, #12]	; (819b0 <vTaskPriorityInherit+0x6c>)
   819a4:	681b      	ldr	r3, [r3, #0]
   819a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   819a8:	62c3      	str	r3, [r0, #44]	; 0x2c
   819aa:	bd38      	pop	{r3, r4, r5, pc}
   819ac:	4770      	bx	lr
   819ae:	bf00      	nop
   819b0:	20078714 	.word	0x20078714
   819b4:	20078634 	.word	0x20078634
   819b8:	00080801 	.word	0x00080801
   819bc:	20078630 	.word	0x20078630
   819c0:	000807a1 	.word	0x000807a1

000819c4 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   819c4:	b1e8      	cbz	r0, 81a02 <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   819c6:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   819c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   819ca:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   819cc:	4291      	cmp	r1, r2
   819ce:	d017      	beq.n	81a00 <vTaskPriorityDisinherit+0x3c>
   819d0:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   819d2:	1d05      	adds	r5, r0, #4
   819d4:	4628      	mov	r0, r5
   819d6:	4b0b      	ldr	r3, [pc, #44]	; (81a04 <vTaskPriorityDisinherit+0x40>)
   819d8:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   819da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   819dc:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   819de:	f1c0 030a 	rsb	r3, r0, #10
   819e2:	8323      	strh	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   819e4:	4b08      	ldr	r3, [pc, #32]	; (81a08 <vTaskPriorityDisinherit+0x44>)
   819e6:	681b      	ldr	r3, [r3, #0]
   819e8:	4298      	cmp	r0, r3
   819ea:	bf84      	itt	hi
   819ec:	4b06      	ldrhi	r3, [pc, #24]	; (81a08 <vTaskPriorityDisinherit+0x44>)
   819ee:	6018      	strhi	r0, [r3, #0]
   819f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   819f4:	4b05      	ldr	r3, [pc, #20]	; (81a0c <vTaskPriorityDisinherit+0x48>)
   819f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   819fa:	4629      	mov	r1, r5
   819fc:	4b04      	ldr	r3, [pc, #16]	; (81a10 <vTaskPriorityDisinherit+0x4c>)
   819fe:	4798      	blx	r3
   81a00:	bd38      	pop	{r3, r4, r5, pc}
   81a02:	4770      	bx	lr
   81a04:	00080801 	.word	0x00080801
   81a08:	20078630 	.word	0x20078630
   81a0c:	20078634 	.word	0x20078634
   81a10:	000807a1 	.word	0x000807a1

00081a14 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81a14:	b510      	push	{r4, lr}
   81a16:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81a18:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81a1a:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81a1c:	4291      	cmp	r1, r2
   81a1e:	d80b      	bhi.n	81a38 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81a20:	1ad2      	subs	r2, r2, r3
   81a22:	8b03      	ldrh	r3, [r0, #24]
   81a24:	b292      	uxth	r2, r2
   81a26:	4293      	cmp	r3, r2
   81a28:	d911      	bls.n	81a4e <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81a2a:	4b0b      	ldr	r3, [pc, #44]	; (81a58 <prvInsertTimerInActiveList+0x44>)
   81a2c:	6818      	ldr	r0, [r3, #0]
   81a2e:	1d21      	adds	r1, r4, #4
   81a30:	4b0a      	ldr	r3, [pc, #40]	; (81a5c <prvInsertTimerInActiveList+0x48>)
   81a32:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81a34:	2000      	movs	r0, #0
   81a36:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81a38:	429a      	cmp	r2, r3
   81a3a:	d201      	bcs.n	81a40 <prvInsertTimerInActiveList+0x2c>
   81a3c:	4299      	cmp	r1, r3
   81a3e:	d208      	bcs.n	81a52 <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81a40:	4b07      	ldr	r3, [pc, #28]	; (81a60 <prvInsertTimerInActiveList+0x4c>)
   81a42:	6818      	ldr	r0, [r3, #0]
   81a44:	1d21      	adds	r1, r4, #4
   81a46:	4b05      	ldr	r3, [pc, #20]	; (81a5c <prvInsertTimerInActiveList+0x48>)
   81a48:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81a4a:	2000      	movs	r0, #0
   81a4c:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81a4e:	2001      	movs	r0, #1
   81a50:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81a52:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81a54:	bd10      	pop	{r4, pc}
   81a56:	bf00      	nop
   81a58:	2007877c 	.word	0x2007877c
   81a5c:	000807bd 	.word	0x000807bd
   81a60:	20078748 	.word	0x20078748

00081a64 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81a64:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81a66:	4b0d      	ldr	r3, [pc, #52]	; (81a9c <prvCheckForValidListAndQueue+0x38>)
   81a68:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81a6a:	4b0d      	ldr	r3, [pc, #52]	; (81aa0 <prvCheckForValidListAndQueue+0x3c>)
   81a6c:	681b      	ldr	r3, [r3, #0]
   81a6e:	b98b      	cbnz	r3, 81a94 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81a70:	4d0c      	ldr	r5, [pc, #48]	; (81aa4 <prvCheckForValidListAndQueue+0x40>)
   81a72:	4628      	mov	r0, r5
   81a74:	4e0c      	ldr	r6, [pc, #48]	; (81aa8 <prvCheckForValidListAndQueue+0x44>)
   81a76:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81a78:	4c0c      	ldr	r4, [pc, #48]	; (81aac <prvCheckForValidListAndQueue+0x48>)
   81a7a:	4620      	mov	r0, r4
   81a7c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81a7e:	4b0c      	ldr	r3, [pc, #48]	; (81ab0 <prvCheckForValidListAndQueue+0x4c>)
   81a80:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81a82:	4b0c      	ldr	r3, [pc, #48]	; (81ab4 <prvCheckForValidListAndQueue+0x50>)
   81a84:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81a86:	2005      	movs	r0, #5
   81a88:	210c      	movs	r1, #12
   81a8a:	2200      	movs	r2, #0
   81a8c:	4b0a      	ldr	r3, [pc, #40]	; (81ab8 <prvCheckForValidListAndQueue+0x54>)
   81a8e:	4798      	blx	r3
   81a90:	4b03      	ldr	r3, [pc, #12]	; (81aa0 <prvCheckForValidListAndQueue+0x3c>)
   81a92:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81a94:	4b09      	ldr	r3, [pc, #36]	; (81abc <prvCheckForValidListAndQueue+0x58>)
   81a96:	4798      	blx	r3
   81a98:	bd70      	pop	{r4, r5, r6, pc}
   81a9a:	bf00      	nop
   81a9c:	00080899 	.word	0x00080899
   81aa0:	20078778 	.word	0x20078778
   81aa4:	2007874c 	.word	0x2007874c
   81aa8:	00080781 	.word	0x00080781
   81aac:	20078760 	.word	0x20078760
   81ab0:	20078748 	.word	0x20078748
   81ab4:	2007877c 	.word	0x2007877c
   81ab8:	00080c7d 	.word	0x00080c7d
   81abc:	000808b9 	.word	0x000808b9

00081ac0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81ac0:	b510      	push	{r4, lr}
   81ac2:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81ac4:	4b0b      	ldr	r3, [pc, #44]	; (81af4 <xTimerCreateTimerTask+0x34>)
   81ac6:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81ac8:	4b0b      	ldr	r3, [pc, #44]	; (81af8 <xTimerCreateTimerTask+0x38>)
   81aca:	681b      	ldr	r3, [r3, #0]
   81acc:	b163      	cbz	r3, 81ae8 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81ace:	2309      	movs	r3, #9
   81ad0:	9300      	str	r3, [sp, #0]
   81ad2:	2300      	movs	r3, #0
   81ad4:	9301      	str	r3, [sp, #4]
   81ad6:	9302      	str	r3, [sp, #8]
   81ad8:	9303      	str	r3, [sp, #12]
   81ada:	4808      	ldr	r0, [pc, #32]	; (81afc <xTimerCreateTimerTask+0x3c>)
   81adc:	4908      	ldr	r1, [pc, #32]	; (81b00 <xTimerCreateTimerTask+0x40>)
   81ade:	f44f 7200 	mov.w	r2, #512	; 0x200
   81ae2:	4c08      	ldr	r4, [pc, #32]	; (81b04 <xTimerCreateTimerTask+0x44>)
   81ae4:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81ae6:	b918      	cbnz	r0, 81af0 <xTimerCreateTimerTask+0x30>
   81ae8:	4b07      	ldr	r3, [pc, #28]	; (81b08 <xTimerCreateTimerTask+0x48>)
   81aea:	4798      	blx	r3
   81aec:	bf00      	nop
   81aee:	e7fd      	b.n	81aec <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81af0:	b004      	add	sp, #16
   81af2:	bd10      	pop	{r4, pc}
   81af4:	00081a65 	.word	0x00081a65
   81af8:	20078778 	.word	0x20078778
   81afc:	00081c1d 	.word	0x00081c1d
   81b00:	00083254 	.word	0x00083254
   81b04:	00081099 	.word	0x00081099
   81b08:	00080889 	.word	0x00080889

00081b0c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81b0c:	b510      	push	{r4, lr}
   81b0e:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81b10:	4c10      	ldr	r4, [pc, #64]	; (81b54 <xTimerGenericCommand+0x48>)
   81b12:	6824      	ldr	r4, [r4, #0]
   81b14:	b1d4      	cbz	r4, 81b4c <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81b16:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81b18:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81b1c:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81b1e:	b973      	cbnz	r3, 81b3e <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81b20:	4b0d      	ldr	r3, [pc, #52]	; (81b58 <xTimerGenericCommand+0x4c>)
   81b22:	4798      	blx	r3
   81b24:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81b26:	4b0b      	ldr	r3, [pc, #44]	; (81b54 <xTimerGenericCommand+0x48>)
   81b28:	6818      	ldr	r0, [r3, #0]
   81b2a:	a901      	add	r1, sp, #4
   81b2c:	bf07      	ittee	eq
   81b2e:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   81b32:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81b34:	2200      	movne	r2, #0
   81b36:	4613      	movne	r3, r2
   81b38:	4c08      	ldr	r4, [pc, #32]	; (81b5c <xTimerGenericCommand+0x50>)
   81b3a:	47a0      	blx	r4
   81b3c:	e007      	b.n	81b4e <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81b3e:	4620      	mov	r0, r4
   81b40:	a901      	add	r1, sp, #4
   81b42:	461a      	mov	r2, r3
   81b44:	2300      	movs	r3, #0
   81b46:	4c06      	ldr	r4, [pc, #24]	; (81b60 <xTimerGenericCommand+0x54>)
   81b48:	47a0      	blx	r4
   81b4a:	e000      	b.n	81b4e <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81b4c:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81b4e:	b004      	add	sp, #16
   81b50:	bd10      	pop	{r4, pc}
   81b52:	bf00      	nop
   81b54:	20078778 	.word	0x20078778
   81b58:	00081925 	.word	0x00081925
   81b5c:	00080cd5 	.word	0x00080cd5
   81b60:	00080dfd 	.word	0x00080dfd

00081b64 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81b68:	b082      	sub	sp, #8
   81b6a:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81b6c:	4b23      	ldr	r3, [pc, #140]	; (81bfc <prvSampleTimeNow+0x98>)
   81b6e:	4798      	blx	r3
   81b70:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81b72:	4b23      	ldr	r3, [pc, #140]	; (81c00 <prvSampleTimeNow+0x9c>)
   81b74:	881b      	ldrh	r3, [r3, #0]
   81b76:	4283      	cmp	r3, r0
   81b78:	d936      	bls.n	81be8 <prvSampleTimeNow+0x84>
   81b7a:	e026      	b.n	81bca <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b7c:	68da      	ldr	r2, [r3, #12]
   81b7e:	8815      	ldrh	r5, [r2, #0]
   81b80:	b2ad      	uxth	r5, r5

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b82:	68db      	ldr	r3, [r3, #12]
   81b84:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81b86:	f104 0a04 	add.w	sl, r4, #4
   81b8a:	4650      	mov	r0, sl
   81b8c:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81b90:	4620      	mov	r0, r4
   81b92:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81b94:	69e3      	ldr	r3, [r4, #28]
   81b96:	2b01      	cmp	r3, #1
   81b98:	d119      	bne.n	81bce <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81b9a:	8b23      	ldrh	r3, [r4, #24]
   81b9c:	442b      	add	r3, r5
   81b9e:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   81ba0:	42ab      	cmp	r3, r5
   81ba2:	d906      	bls.n	81bb2 <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81ba4:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81ba6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81ba8:	6830      	ldr	r0, [r6, #0]
   81baa:	4651      	mov	r1, sl
   81bac:	4b15      	ldr	r3, [pc, #84]	; (81c04 <prvSampleTimeNow+0xa0>)
   81bae:	4798      	blx	r3
   81bb0:	e00d      	b.n	81bce <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81bb2:	2300      	movs	r3, #0
   81bb4:	9300      	str	r3, [sp, #0]
   81bb6:	4620      	mov	r0, r4
   81bb8:	4619      	mov	r1, r3
   81bba:	462a      	mov	r2, r5
   81bbc:	4c12      	ldr	r4, [pc, #72]	; (81c08 <prvSampleTimeNow+0xa4>)
   81bbe:	47a0      	blx	r4
				configASSERT( xResult );
   81bc0:	b928      	cbnz	r0, 81bce <prvSampleTimeNow+0x6a>
   81bc2:	4b12      	ldr	r3, [pc, #72]	; (81c0c <prvSampleTimeNow+0xa8>)
   81bc4:	4798      	blx	r3
   81bc6:	bf00      	nop
   81bc8:	e7fd      	b.n	81bc6 <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81bca:	4e11      	ldr	r6, [pc, #68]	; (81c10 <prvSampleTimeNow+0xac>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81bcc:	4f11      	ldr	r7, [pc, #68]	; (81c14 <prvSampleTimeNow+0xb0>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81bce:	6833      	ldr	r3, [r6, #0]
   81bd0:	681a      	ldr	r2, [r3, #0]
   81bd2:	2a00      	cmp	r2, #0
   81bd4:	d1d2      	bne.n	81b7c <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81bd6:	4a10      	ldr	r2, [pc, #64]	; (81c18 <prvSampleTimeNow+0xb4>)
   81bd8:	6810      	ldr	r0, [r2, #0]
   81bda:	490d      	ldr	r1, [pc, #52]	; (81c10 <prvSampleTimeNow+0xac>)
   81bdc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81bde:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81be0:	2301      	movs	r3, #1
   81be2:	f8c9 3000 	str.w	r3, [r9]
   81be6:	e002      	b.n	81bee <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81be8:	2300      	movs	r3, #0
   81bea:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   81bee:	4b04      	ldr	r3, [pc, #16]	; (81c00 <prvSampleTimeNow+0x9c>)
   81bf0:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   81bf4:	4640      	mov	r0, r8
   81bf6:	b002      	add	sp, #8
   81bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81bfc:	00081319 	.word	0x00081319
   81c00:	20078774 	.word	0x20078774
   81c04:	000807bd 	.word	0x000807bd
   81c08:	00081b0d 	.word	0x00081b0d
   81c0c:	00080889 	.word	0x00080889
   81c10:	20078748 	.word	0x20078748
   81c14:	00080801 	.word	0x00080801
   81c18:	2007877c 	.word	0x2007877c

00081c1c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81c20:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81c22:	4d51      	ldr	r5, [pc, #324]	; (81d68 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81c24:	f8df 8170 	ldr.w	r8, [pc, #368]	; 81d98 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81c28:	4b50      	ldr	r3, [pc, #320]	; (81d6c <prvTimerTask+0x150>)
   81c2a:	681b      	ldr	r3, [r3, #0]
   81c2c:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81c2e:	2a00      	cmp	r2, #0
   81c30:	f000 8090 	beq.w	81d54 <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81c34:	68db      	ldr	r3, [r3, #12]
   81c36:	881c      	ldrh	r4, [r3, #0]
   81c38:	b2a4      	uxth	r4, r4
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81c3a:	4b4d      	ldr	r3, [pc, #308]	; (81d70 <prvTimerTask+0x154>)
   81c3c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81c3e:	a803      	add	r0, sp, #12
   81c40:	4b4c      	ldr	r3, [pc, #304]	; (81d74 <prvTimerTask+0x158>)
   81c42:	4798      	blx	r3
   81c44:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81c46:	9b03      	ldr	r3, [sp, #12]
   81c48:	2b00      	cmp	r3, #0
   81c4a:	d132      	bne.n	81cb2 <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81c4c:	4284      	cmp	r4, r0
   81c4e:	d825      	bhi.n	81c9c <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   81c50:	4b49      	ldr	r3, [pc, #292]	; (81d78 <prvTimerTask+0x15c>)
   81c52:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81c54:	4b45      	ldr	r3, [pc, #276]	; (81d6c <prvTimerTask+0x150>)
   81c56:	681b      	ldr	r3, [r3, #0]
   81c58:	68db      	ldr	r3, [r3, #12]
   81c5a:	68de      	ldr	r6, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81c5c:	1d30      	adds	r0, r6, #4
   81c5e:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81c60:	69f3      	ldr	r3, [r6, #28]
   81c62:	2b01      	cmp	r3, #1
   81c64:	d115      	bne.n	81c92 <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81c66:	8b31      	ldrh	r1, [r6, #24]
   81c68:	4421      	add	r1, r4
   81c6a:	4630      	mov	r0, r6
   81c6c:	b289      	uxth	r1, r1
   81c6e:	463a      	mov	r2, r7
   81c70:	4623      	mov	r3, r4
   81c72:	4f42      	ldr	r7, [pc, #264]	; (81d7c <prvTimerTask+0x160>)
   81c74:	47b8      	blx	r7
   81c76:	2801      	cmp	r0, #1
   81c78:	d10b      	bne.n	81c92 <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81c7a:	2300      	movs	r3, #0
   81c7c:	9300      	str	r3, [sp, #0]
   81c7e:	4630      	mov	r0, r6
   81c80:	4619      	mov	r1, r3
   81c82:	4622      	mov	r2, r4
   81c84:	4c3e      	ldr	r4, [pc, #248]	; (81d80 <prvTimerTask+0x164>)
   81c86:	47a0      	blx	r4
			configASSERT( xResult );
   81c88:	b918      	cbnz	r0, 81c92 <prvTimerTask+0x76>
   81c8a:	4b3e      	ldr	r3, [pc, #248]	; (81d84 <prvTimerTask+0x168>)
   81c8c:	4798      	blx	r3
   81c8e:	bf00      	nop
   81c90:	e7fd      	b.n	81c8e <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81c92:	6a73      	ldr	r3, [r6, #36]	; 0x24
   81c94:	4630      	mov	r0, r6
   81c96:	4798      	blx	r3
   81c98:	e00d      	b.n	81cb6 <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   81c9a:	2400      	movs	r4, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81c9c:	1be1      	subs	r1, r4, r7
   81c9e:	6828      	ldr	r0, [r5, #0]
   81ca0:	b289      	uxth	r1, r1
   81ca2:	4b39      	ldr	r3, [pc, #228]	; (81d88 <prvTimerTask+0x16c>)
   81ca4:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81ca6:	4b34      	ldr	r3, [pc, #208]	; (81d78 <prvTimerTask+0x15c>)
   81ca8:	4798      	blx	r3
   81caa:	b920      	cbnz	r0, 81cb6 <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   81cac:	4b37      	ldr	r3, [pc, #220]	; (81d8c <prvTimerTask+0x170>)
   81cae:	4798      	blx	r3
   81cb0:	e001      	b.n	81cb6 <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   81cb2:	4b31      	ldr	r3, [pc, #196]	; (81d78 <prvTimerTask+0x15c>)
   81cb4:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81cb6:	a802      	add	r0, sp, #8
   81cb8:	4b2e      	ldr	r3, [pc, #184]	; (81d74 <prvTimerTask+0x158>)
   81cba:	4798      	blx	r3
   81cbc:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81cbe:	4e34      	ldr	r6, [pc, #208]	; (81d90 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81cc0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 81d7c <prvTimerTask+0x160>
   81cc4:	e03e      	b.n	81d44 <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   81cc6:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   81cc8:	b11c      	cbz	r4, 81cd2 <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81cca:	6963      	ldr	r3, [r4, #20]
   81ccc:	b10b      	cbz	r3, 81cd2 <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81cce:	1d20      	adds	r0, r4, #4
   81cd0:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   81cd2:	9b03      	ldr	r3, [sp, #12]
   81cd4:	2b02      	cmp	r3, #2
   81cd6:	d023      	beq.n	81d20 <prvTimerTask+0x104>
   81cd8:	2b03      	cmp	r3, #3
   81cda:	d030      	beq.n	81d3e <prvTimerTask+0x122>
   81cdc:	2b00      	cmp	r3, #0
   81cde:	d131      	bne.n	81d44 <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81ce0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81ce4:	8b21      	ldrh	r1, [r4, #24]
   81ce6:	4419      	add	r1, r3
   81ce8:	4620      	mov	r0, r4
   81cea:	b289      	uxth	r1, r1
   81cec:	463a      	mov	r2, r7
   81cee:	47c8      	blx	r9
   81cf0:	2801      	cmp	r0, #1
   81cf2:	d127      	bne.n	81d44 <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81cf6:	4620      	mov	r0, r4
   81cf8:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81cfa:	69e3      	ldr	r3, [r4, #28]
   81cfc:	2b01      	cmp	r3, #1
   81cfe:	d121      	bne.n	81d44 <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81d00:	8b22      	ldrh	r2, [r4, #24]
   81d02:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81d06:	441a      	add	r2, r3
   81d08:	2300      	movs	r3, #0
   81d0a:	9300      	str	r3, [sp, #0]
   81d0c:	4620      	mov	r0, r4
   81d0e:	4619      	mov	r1, r3
   81d10:	b292      	uxth	r2, r2
   81d12:	4c1b      	ldr	r4, [pc, #108]	; (81d80 <prvTimerTask+0x164>)
   81d14:	47a0      	blx	r4
						configASSERT( xResult );
   81d16:	b9a8      	cbnz	r0, 81d44 <prvTimerTask+0x128>
   81d18:	4b1a      	ldr	r3, [pc, #104]	; (81d84 <prvTimerTask+0x168>)
   81d1a:	4798      	blx	r3
   81d1c:	bf00      	nop
   81d1e:	e7fd      	b.n	81d1c <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81d20:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81d24:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81d26:	b91b      	cbnz	r3, 81d30 <prvTimerTask+0x114>
   81d28:	4b16      	ldr	r3, [pc, #88]	; (81d84 <prvTimerTask+0x168>)
   81d2a:	4798      	blx	r3
   81d2c:	bf00      	nop
   81d2e:	e7fd      	b.n	81d2c <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81d30:	18f9      	adds	r1, r7, r3
   81d32:	4620      	mov	r0, r4
   81d34:	b289      	uxth	r1, r1
   81d36:	463a      	mov	r2, r7
   81d38:	463b      	mov	r3, r7
   81d3a:	47c8      	blx	r9
   81d3c:	e002      	b.n	81d44 <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   81d3e:	4620      	mov	r0, r4
   81d40:	4b14      	ldr	r3, [pc, #80]	; (81d94 <prvTimerTask+0x178>)
   81d42:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81d44:	6828      	ldr	r0, [r5, #0]
   81d46:	a903      	add	r1, sp, #12
   81d48:	2200      	movs	r2, #0
   81d4a:	4613      	mov	r3, r2
   81d4c:	47b0      	blx	r6
   81d4e:	2800      	cmp	r0, #0
   81d50:	d1b9      	bne.n	81cc6 <prvTimerTask+0xaa>
   81d52:	e769      	b.n	81c28 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81d54:	4b06      	ldr	r3, [pc, #24]	; (81d70 <prvTimerTask+0x154>)
   81d56:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81d58:	a803      	add	r0, sp, #12
   81d5a:	4b06      	ldr	r3, [pc, #24]	; (81d74 <prvTimerTask+0x158>)
   81d5c:	4798      	blx	r3
   81d5e:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81d60:	9b03      	ldr	r3, [sp, #12]
   81d62:	2b00      	cmp	r3, #0
   81d64:	d099      	beq.n	81c9a <prvTimerTask+0x7e>
   81d66:	e7a4      	b.n	81cb2 <prvTimerTask+0x96>
   81d68:	20078778 	.word	0x20078778
   81d6c:	20078748 	.word	0x20078748
   81d70:	00081309 	.word	0x00081309
   81d74:	00081b65 	.word	0x00081b65
   81d78:	00081465 	.word	0x00081465
   81d7c:	00081a15 	.word	0x00081a15
   81d80:	00081b0d 	.word	0x00081b0d
   81d84:	00080889 	.word	0x00080889
   81d88:	00080ff1 	.word	0x00080ff1
   81d8c:	00080879 	.word	0x00080879
   81d90:	00080e8d 	.word	0x00080e8d
   81d94:	00080aad 	.word	0x00080aad
   81d98:	00080801 	.word	0x00080801

00081d9c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81d9c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81d9e:	480e      	ldr	r0, [pc, #56]	; (81dd8 <sysclk_init+0x3c>)
   81da0:	4b0e      	ldr	r3, [pc, #56]	; (81ddc <sysclk_init+0x40>)
   81da2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81da4:	2000      	movs	r0, #0
   81da6:	213e      	movs	r1, #62	; 0x3e
   81da8:	4b0d      	ldr	r3, [pc, #52]	; (81de0 <sysclk_init+0x44>)
   81daa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81dac:	4c0d      	ldr	r4, [pc, #52]	; (81de4 <sysclk_init+0x48>)
   81dae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81db0:	2800      	cmp	r0, #0
   81db2:	d0fc      	beq.n	81dae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81db4:	4b0c      	ldr	r3, [pc, #48]	; (81de8 <sysclk_init+0x4c>)
   81db6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81db8:	4a0c      	ldr	r2, [pc, #48]	; (81dec <sysclk_init+0x50>)
   81dba:	4b0d      	ldr	r3, [pc, #52]	; (81df0 <sysclk_init+0x54>)
   81dbc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81dbe:	4c0d      	ldr	r4, [pc, #52]	; (81df4 <sysclk_init+0x58>)
   81dc0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81dc2:	2800      	cmp	r0, #0
   81dc4:	d0fc      	beq.n	81dc0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81dc6:	2010      	movs	r0, #16
   81dc8:	4b0b      	ldr	r3, [pc, #44]	; (81df8 <sysclk_init+0x5c>)
   81dca:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81dcc:	4b0b      	ldr	r3, [pc, #44]	; (81dfc <sysclk_init+0x60>)
   81dce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81dd0:	4801      	ldr	r0, [pc, #4]	; (81dd8 <sysclk_init+0x3c>)
   81dd2:	4b02      	ldr	r3, [pc, #8]	; (81ddc <sysclk_init+0x40>)
   81dd4:	4798      	blx	r3
   81dd6:	bd10      	pop	{r4, pc}
   81dd8:	0501bd00 	.word	0x0501bd00
   81ddc:	200700a5 	.word	0x200700a5
   81de0:	00082191 	.word	0x00082191
   81de4:	000821e5 	.word	0x000821e5
   81de8:	000821f5 	.word	0x000821f5
   81dec:	200d3f01 	.word	0x200d3f01
   81df0:	400e0600 	.word	0x400e0600
   81df4:	00082205 	.word	0x00082205
   81df8:	00082129 	.word	0x00082129
   81dfc:	0008231d 	.word	0x0008231d

00081e00 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81e00:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81e02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81e06:	4b12      	ldr	r3, [pc, #72]	; (81e50 <board_init+0x50>)
   81e08:	605a      	str	r2, [r3, #4]
   81e0a:	200b      	movs	r0, #11
   81e0c:	4c11      	ldr	r4, [pc, #68]	; (81e54 <board_init+0x54>)
   81e0e:	47a0      	blx	r4
   81e10:	200c      	movs	r0, #12
   81e12:	47a0      	blx	r4
   81e14:	200d      	movs	r0, #13
   81e16:	47a0      	blx	r4
   81e18:	200e      	movs	r0, #14
   81e1a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81e1c:	203b      	movs	r0, #59	; 0x3b
   81e1e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81e22:	4c0d      	ldr	r4, [pc, #52]	; (81e58 <board_init+0x58>)
   81e24:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81e26:	2055      	movs	r0, #85	; 0x55
   81e28:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81e2c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81e2e:	2056      	movs	r0, #86	; 0x56
   81e30:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81e34:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81e36:	2068      	movs	r0, #104	; 0x68
   81e38:	4908      	ldr	r1, [pc, #32]	; (81e5c <board_init+0x5c>)
   81e3a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81e3c:	205c      	movs	r0, #92	; 0x5c
   81e3e:	4908      	ldr	r1, [pc, #32]	; (81e60 <board_init+0x60>)
   81e40:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81e42:	4808      	ldr	r0, [pc, #32]	; (81e64 <board_init+0x64>)
   81e44:	f44f 7140 	mov.w	r1, #768	; 0x300
   81e48:	4a07      	ldr	r2, [pc, #28]	; (81e68 <board_init+0x68>)
   81e4a:	4b08      	ldr	r3, [pc, #32]	; (81e6c <board_init+0x6c>)
   81e4c:	4798      	blx	r3
   81e4e:	bd10      	pop	{r4, pc}
   81e50:	400e1a50 	.word	0x400e1a50
   81e54:	00082215 	.word	0x00082215
   81e58:	00081f15 	.word	0x00081f15
   81e5c:	28000079 	.word	0x28000079
   81e60:	28000001 	.word	0x28000001
   81e64:	400e0e00 	.word	0x400e0e00
   81e68:	08000001 	.word	0x08000001
   81e6c:	00081fe9 	.word	0x00081fe9

00081e70 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81e70:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81e72:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81e76:	d016      	beq.n	81ea6 <pio_set_peripheral+0x36>
   81e78:	d804      	bhi.n	81e84 <pio_set_peripheral+0x14>
   81e7a:	b1c1      	cbz	r1, 81eae <pio_set_peripheral+0x3e>
   81e7c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81e80:	d00a      	beq.n	81e98 <pio_set_peripheral+0x28>
   81e82:	e013      	b.n	81eac <pio_set_peripheral+0x3c>
   81e84:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81e88:	d011      	beq.n	81eae <pio_set_peripheral+0x3e>
   81e8a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81e8e:	d00e      	beq.n	81eae <pio_set_peripheral+0x3e>
   81e90:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81e94:	d10a      	bne.n	81eac <pio_set_peripheral+0x3c>
   81e96:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81e98:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81e9a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81e9c:	400b      	ands	r3, r1
   81e9e:	ea23 0302 	bic.w	r3, r3, r2
   81ea2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81ea4:	e002      	b.n	81eac <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81ea6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81ea8:	4313      	orrs	r3, r2
   81eaa:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81eac:	6042      	str	r2, [r0, #4]
   81eae:	4770      	bx	lr

00081eb0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81eb0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81eb2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81eb6:	bf14      	ite	ne
   81eb8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81eba:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81ebc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81ec0:	bf14      	ite	ne
   81ec2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81ec4:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81ec6:	f012 0f02 	tst.w	r2, #2
   81eca:	d002      	beq.n	81ed2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81ecc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81ed0:	e004      	b.n	81edc <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81ed2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81ed6:	bf18      	it	ne
   81ed8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81edc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81ede:	6001      	str	r1, [r0, #0]
   81ee0:	4770      	bx	lr
   81ee2:	bf00      	nop

00081ee4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81ee4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81ee6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81ee8:	9c01      	ldr	r4, [sp, #4]
   81eea:	b10c      	cbz	r4, 81ef0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81eec:	6641      	str	r1, [r0, #100]	; 0x64
   81eee:	e000      	b.n	81ef2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81ef0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81ef2:	b10b      	cbz	r3, 81ef8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81ef4:	6501      	str	r1, [r0, #80]	; 0x50
   81ef6:	e000      	b.n	81efa <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81ef8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81efa:	b10a      	cbz	r2, 81f00 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81efc:	6301      	str	r1, [r0, #48]	; 0x30
   81efe:	e000      	b.n	81f02 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81f00:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81f02:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81f04:	6001      	str	r1, [r0, #0]
}
   81f06:	f85d 4b04 	ldr.w	r4, [sp], #4
   81f0a:	4770      	bx	lr

00081f0c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81f0c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81f0e:	4770      	bx	lr

00081f10 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81f10:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81f12:	4770      	bx	lr

00081f14 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81f14:	b570      	push	{r4, r5, r6, lr}
   81f16:	b082      	sub	sp, #8
   81f18:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81f1a:	0943      	lsrs	r3, r0, #5
   81f1c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81f20:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81f24:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81f26:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81f2a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81f2e:	d030      	beq.n	81f92 <pio_configure_pin+0x7e>
   81f30:	d806      	bhi.n	81f40 <pio_configure_pin+0x2c>
   81f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81f36:	d00a      	beq.n	81f4e <pio_configure_pin+0x3a>
   81f38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81f3c:	d018      	beq.n	81f70 <pio_configure_pin+0x5c>
   81f3e:	e049      	b.n	81fd4 <pio_configure_pin+0xc0>
   81f40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81f44:	d030      	beq.n	81fa8 <pio_configure_pin+0x94>
   81f46:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81f4a:	d02d      	beq.n	81fa8 <pio_configure_pin+0x94>
   81f4c:	e042      	b.n	81fd4 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81f4e:	f000 001f 	and.w	r0, r0, #31
   81f52:	2601      	movs	r6, #1
   81f54:	4086      	lsls	r6, r0
   81f56:	4620      	mov	r0, r4
   81f58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f5c:	4632      	mov	r2, r6
   81f5e:	4b1f      	ldr	r3, [pc, #124]	; (81fdc <pio_configure_pin+0xc8>)
   81f60:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81f62:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81f66:	bf14      	ite	ne
   81f68:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81f6a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81f6c:	2001      	movs	r0, #1
   81f6e:	e032      	b.n	81fd6 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81f70:	f000 001f 	and.w	r0, r0, #31
   81f74:	2601      	movs	r6, #1
   81f76:	4086      	lsls	r6, r0
   81f78:	4620      	mov	r0, r4
   81f7a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81f7e:	4632      	mov	r2, r6
   81f80:	4b16      	ldr	r3, [pc, #88]	; (81fdc <pio_configure_pin+0xc8>)
   81f82:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81f84:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81f88:	bf14      	ite	ne
   81f8a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81f8c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81f8e:	2001      	movs	r0, #1
   81f90:	e021      	b.n	81fd6 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81f92:	f000 031f 	and.w	r3, r0, #31
   81f96:	2601      	movs	r6, #1
   81f98:	4620      	mov	r0, r4
   81f9a:	fa06 f103 	lsl.w	r1, r6, r3
   81f9e:	462a      	mov	r2, r5
   81fa0:	4b0f      	ldr	r3, [pc, #60]	; (81fe0 <pio_configure_pin+0xcc>)
   81fa2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81fa4:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   81fa6:	e016      	b.n	81fd6 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81fa8:	f000 031f 	and.w	r3, r0, #31
   81fac:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81fae:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81fb2:	ea05 0106 	and.w	r1, r5, r6
   81fb6:	9100      	str	r1, [sp, #0]
   81fb8:	4620      	mov	r0, r4
   81fba:	fa06 f103 	lsl.w	r1, r6, r3
   81fbe:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81fc2:	bf14      	ite	ne
   81fc4:	2200      	movne	r2, #0
   81fc6:	2201      	moveq	r2, #1
   81fc8:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81fcc:	4c05      	ldr	r4, [pc, #20]	; (81fe4 <pio_configure_pin+0xd0>)
   81fce:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81fd0:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81fd2:	e000      	b.n	81fd6 <pio_configure_pin+0xc2>

	default:
		return 0;
   81fd4:	2000      	movs	r0, #0
	}

	return 1;
}
   81fd6:	b002      	add	sp, #8
   81fd8:	bd70      	pop	{r4, r5, r6, pc}
   81fda:	bf00      	nop
   81fdc:	00081e71 	.word	0x00081e71
   81fe0:	00081eb1 	.word	0x00081eb1
   81fe4:	00081ee5 	.word	0x00081ee5

00081fe8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81fe8:	b570      	push	{r4, r5, r6, lr}
   81fea:	b082      	sub	sp, #8
   81fec:	4606      	mov	r6, r0
   81fee:	460d      	mov	r5, r1
   81ff0:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81ff2:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81ff6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81ffa:	d026      	beq.n	8204a <pio_configure_pin_group+0x62>
   81ffc:	d806      	bhi.n	8200c <pio_configure_pin_group+0x24>
   81ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82002:	d00a      	beq.n	8201a <pio_configure_pin_group+0x32>
   82004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82008:	d013      	beq.n	82032 <pio_configure_pin_group+0x4a>
   8200a:	e034      	b.n	82076 <pio_configure_pin_group+0x8e>
   8200c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82010:	d01f      	beq.n	82052 <pio_configure_pin_group+0x6a>
   82012:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82016:	d01c      	beq.n	82052 <pio_configure_pin_group+0x6a>
   82018:	e02d      	b.n	82076 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8201a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8201e:	462a      	mov	r2, r5
   82020:	4b16      	ldr	r3, [pc, #88]	; (8207c <pio_configure_pin_group+0x94>)
   82022:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82024:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82028:	bf14      	ite	ne
   8202a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8202c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8202e:	2001      	movs	r0, #1
   82030:	e022      	b.n	82078 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82032:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82036:	462a      	mov	r2, r5
   82038:	4b10      	ldr	r3, [pc, #64]	; (8207c <pio_configure_pin_group+0x94>)
   8203a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8203c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82040:	bf14      	ite	ne
   82042:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82044:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82046:	2001      	movs	r0, #1
   82048:	e016      	b.n	82078 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8204a:	4b0d      	ldr	r3, [pc, #52]	; (82080 <pio_configure_pin_group+0x98>)
   8204c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8204e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82050:	e012      	b.n	82078 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82052:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82056:	f004 0301 	and.w	r3, r4, #1
   8205a:	9300      	str	r3, [sp, #0]
   8205c:	4630      	mov	r0, r6
   8205e:	4629      	mov	r1, r5
   82060:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82064:	bf14      	ite	ne
   82066:	2200      	movne	r2, #0
   82068:	2201      	moveq	r2, #1
   8206a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8206e:	4c05      	ldr	r4, [pc, #20]	; (82084 <pio_configure_pin_group+0x9c>)
   82070:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82072:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82074:	e000      	b.n	82078 <pio_configure_pin_group+0x90>

	default:
		return 0;
   82076:	2000      	movs	r0, #0
	}

	return 1;
}
   82078:	b002      	add	sp, #8
   8207a:	bd70      	pop	{r4, r5, r6, pc}
   8207c:	00081e71 	.word	0x00081e71
   82080:	00081eb1 	.word	0x00081eb1
   82084:	00081ee5 	.word	0x00081ee5

00082088 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8208c:	4604      	mov	r4, r0
   8208e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82090:	4b0e      	ldr	r3, [pc, #56]	; (820cc <pio_handler_process+0x44>)
   82092:	4798      	blx	r3
   82094:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82096:	4620      	mov	r0, r4
   82098:	4b0d      	ldr	r3, [pc, #52]	; (820d0 <pio_handler_process+0x48>)
   8209a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8209c:	4005      	ands	r5, r0
   8209e:	d013      	beq.n	820c8 <pio_handler_process+0x40>
   820a0:	4c0c      	ldr	r4, [pc, #48]	; (820d4 <pio_handler_process+0x4c>)
   820a2:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   820a6:	6823      	ldr	r3, [r4, #0]
   820a8:	4543      	cmp	r3, r8
   820aa:	d108      	bne.n	820be <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   820ac:	6861      	ldr	r1, [r4, #4]
   820ae:	4229      	tst	r1, r5
   820b0:	d005      	beq.n	820be <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   820b2:	68e3      	ldr	r3, [r4, #12]
   820b4:	4640      	mov	r0, r8
   820b6:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   820b8:	6863      	ldr	r3, [r4, #4]
   820ba:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   820be:	42b4      	cmp	r4, r6
   820c0:	d002      	beq.n	820c8 <pio_handler_process+0x40>
   820c2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   820c4:	2d00      	cmp	r5, #0
   820c6:	d1ee      	bne.n	820a6 <pio_handler_process+0x1e>
   820c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820cc:	00081f0d 	.word	0x00081f0d
   820d0:	00081f11 	.word	0x00081f11
   820d4:	20078780 	.word	0x20078780

000820d8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   820d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   820da:	4802      	ldr	r0, [pc, #8]	; (820e4 <PIOA_Handler+0xc>)
   820dc:	210b      	movs	r1, #11
   820de:	4b02      	ldr	r3, [pc, #8]	; (820e8 <PIOA_Handler+0x10>)
   820e0:	4798      	blx	r3
   820e2:	bd08      	pop	{r3, pc}
   820e4:	400e0e00 	.word	0x400e0e00
   820e8:	00082089 	.word	0x00082089

000820ec <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   820ec:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   820ee:	4802      	ldr	r0, [pc, #8]	; (820f8 <PIOB_Handler+0xc>)
   820f0:	210c      	movs	r1, #12
   820f2:	4b02      	ldr	r3, [pc, #8]	; (820fc <PIOB_Handler+0x10>)
   820f4:	4798      	blx	r3
   820f6:	bd08      	pop	{r3, pc}
   820f8:	400e1000 	.word	0x400e1000
   820fc:	00082089 	.word	0x00082089

00082100 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82100:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82102:	4802      	ldr	r0, [pc, #8]	; (8210c <PIOC_Handler+0xc>)
   82104:	210d      	movs	r1, #13
   82106:	4b02      	ldr	r3, [pc, #8]	; (82110 <PIOC_Handler+0x10>)
   82108:	4798      	blx	r3
   8210a:	bd08      	pop	{r3, pc}
   8210c:	400e1200 	.word	0x400e1200
   82110:	00082089 	.word	0x00082089

00082114 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82114:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82116:	4802      	ldr	r0, [pc, #8]	; (82120 <PIOD_Handler+0xc>)
   82118:	210e      	movs	r1, #14
   8211a:	4b02      	ldr	r3, [pc, #8]	; (82124 <PIOD_Handler+0x10>)
   8211c:	4798      	blx	r3
   8211e:	bd08      	pop	{r3, pc}
   82120:	400e1400 	.word	0x400e1400
   82124:	00082089 	.word	0x00082089

00082128 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82128:	4a18      	ldr	r2, [pc, #96]	; (8218c <pmc_switch_mck_to_pllack+0x64>)
   8212a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8212c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82130:	4318      	orrs	r0, r3
   82132:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82134:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82136:	f013 0f08 	tst.w	r3, #8
   8213a:	d003      	beq.n	82144 <pmc_switch_mck_to_pllack+0x1c>
   8213c:	e009      	b.n	82152 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8213e:	3b01      	subs	r3, #1
   82140:	d103      	bne.n	8214a <pmc_switch_mck_to_pllack+0x22>
   82142:	e01e      	b.n	82182 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82144:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82148:	4910      	ldr	r1, [pc, #64]	; (8218c <pmc_switch_mck_to_pllack+0x64>)
   8214a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8214c:	f012 0f08 	tst.w	r2, #8
   82150:	d0f5      	beq.n	8213e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82152:	4a0e      	ldr	r2, [pc, #56]	; (8218c <pmc_switch_mck_to_pllack+0x64>)
   82154:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82156:	f023 0303 	bic.w	r3, r3, #3
   8215a:	f043 0302 	orr.w	r3, r3, #2
   8215e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82160:	6e90      	ldr	r0, [r2, #104]	; 0x68
   82162:	f010 0008 	ands.w	r0, r0, #8
   82166:	d004      	beq.n	82172 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82168:	2000      	movs	r0, #0
   8216a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   8216c:	3b01      	subs	r3, #1
   8216e:	d103      	bne.n	82178 <pmc_switch_mck_to_pllack+0x50>
   82170:	e009      	b.n	82186 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82172:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82176:	4905      	ldr	r1, [pc, #20]	; (8218c <pmc_switch_mck_to_pllack+0x64>)
   82178:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8217a:	f012 0f08 	tst.w	r2, #8
   8217e:	d0f5      	beq.n	8216c <pmc_switch_mck_to_pllack+0x44>
   82180:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82182:	2001      	movs	r0, #1
   82184:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82186:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82188:	4770      	bx	lr
   8218a:	bf00      	nop
   8218c:	400e0600 	.word	0x400e0600

00082190 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82190:	b138      	cbz	r0, 821a2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82192:	4911      	ldr	r1, [pc, #68]	; (821d8 <pmc_switch_mainck_to_xtal+0x48>)
   82194:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82196:	4a11      	ldr	r2, [pc, #68]	; (821dc <pmc_switch_mainck_to_xtal+0x4c>)
   82198:	401a      	ands	r2, r3
   8219a:	4b11      	ldr	r3, [pc, #68]	; (821e0 <pmc_switch_mainck_to_xtal+0x50>)
   8219c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8219e:	620b      	str	r3, [r1, #32]
   821a0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   821a2:	4a0d      	ldr	r2, [pc, #52]	; (821d8 <pmc_switch_mainck_to_xtal+0x48>)
   821a4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   821a6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   821aa:	f023 0303 	bic.w	r3, r3, #3
   821ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   821b2:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   821b6:	0209      	lsls	r1, r1, #8
   821b8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   821ba:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   821bc:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   821be:	6e93      	ldr	r3, [r2, #104]	; 0x68
   821c0:	f013 0f01 	tst.w	r3, #1
   821c4:	d0fb      	beq.n	821be <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   821c6:	4a04      	ldr	r2, [pc, #16]	; (821d8 <pmc_switch_mainck_to_xtal+0x48>)
   821c8:	6a13      	ldr	r3, [r2, #32]
   821ca:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   821ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   821d2:	6213      	str	r3, [r2, #32]
   821d4:	4770      	bx	lr
   821d6:	bf00      	nop
   821d8:	400e0600 	.word	0x400e0600
   821dc:	fec8fffc 	.word	0xfec8fffc
   821e0:	01370002 	.word	0x01370002

000821e4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   821e4:	4b02      	ldr	r3, [pc, #8]	; (821f0 <pmc_osc_is_ready_mainck+0xc>)
   821e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   821e8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   821ec:	4770      	bx	lr
   821ee:	bf00      	nop
   821f0:	400e0600 	.word	0x400e0600

000821f4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   821f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   821f8:	4b01      	ldr	r3, [pc, #4]	; (82200 <pmc_disable_pllack+0xc>)
   821fa:	629a      	str	r2, [r3, #40]	; 0x28
   821fc:	4770      	bx	lr
   821fe:	bf00      	nop
   82200:	400e0600 	.word	0x400e0600

00082204 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82204:	4b02      	ldr	r3, [pc, #8]	; (82210 <pmc_is_locked_pllack+0xc>)
   82206:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82208:	f000 0002 	and.w	r0, r0, #2
   8220c:	4770      	bx	lr
   8220e:	bf00      	nop
   82210:	400e0600 	.word	0x400e0600

00082214 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82214:	282c      	cmp	r0, #44	; 0x2c
   82216:	d81e      	bhi.n	82256 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   82218:	281f      	cmp	r0, #31
   8221a:	d80c      	bhi.n	82236 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8221c:	4b11      	ldr	r3, [pc, #68]	; (82264 <pmc_enable_periph_clk+0x50>)
   8221e:	699a      	ldr	r2, [r3, #24]
   82220:	2301      	movs	r3, #1
   82222:	4083      	lsls	r3, r0
   82224:	401a      	ands	r2, r3
   82226:	4293      	cmp	r3, r2
   82228:	d017      	beq.n	8225a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8222a:	2301      	movs	r3, #1
   8222c:	4083      	lsls	r3, r0
   8222e:	4a0d      	ldr	r2, [pc, #52]	; (82264 <pmc_enable_periph_clk+0x50>)
   82230:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82232:	2000      	movs	r0, #0
   82234:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82236:	4b0b      	ldr	r3, [pc, #44]	; (82264 <pmc_enable_periph_clk+0x50>)
   82238:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8223c:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8223e:	2301      	movs	r3, #1
   82240:	4083      	lsls	r3, r0
   82242:	401a      	ands	r2, r3
   82244:	4293      	cmp	r3, r2
   82246:	d00a      	beq.n	8225e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   82248:	2301      	movs	r3, #1
   8224a:	4083      	lsls	r3, r0
   8224c:	4a05      	ldr	r2, [pc, #20]	; (82264 <pmc_enable_periph_clk+0x50>)
   8224e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   82252:	2000      	movs	r0, #0
   82254:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   82256:	2001      	movs	r0, #1
   82258:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8225a:	2000      	movs	r0, #0
   8225c:	4770      	bx	lr
   8225e:	2000      	movs	r0, #0
}
   82260:	4770      	bx	lr
   82262:	bf00      	nop
   82264:	400e0600 	.word	0x400e0600

00082268 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   82268:	e7fe      	b.n	82268 <Dummy_Handler>
   8226a:	bf00      	nop

0008226c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8226c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8226e:	4b1f      	ldr	r3, [pc, #124]	; (822ec <Reset_Handler+0x80>)
   82270:	4a1f      	ldr	r2, [pc, #124]	; (822f0 <Reset_Handler+0x84>)
   82272:	429a      	cmp	r2, r3
   82274:	d003      	beq.n	8227e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   82276:	4b1f      	ldr	r3, [pc, #124]	; (822f4 <Reset_Handler+0x88>)
   82278:	4a1c      	ldr	r2, [pc, #112]	; (822ec <Reset_Handler+0x80>)
   8227a:	429a      	cmp	r2, r3
   8227c:	d304      	bcc.n	82288 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8227e:	4b1e      	ldr	r3, [pc, #120]	; (822f8 <Reset_Handler+0x8c>)
   82280:	4a1e      	ldr	r2, [pc, #120]	; (822fc <Reset_Handler+0x90>)
   82282:	429a      	cmp	r2, r3
   82284:	d310      	bcc.n	822a8 <Reset_Handler+0x3c>
   82286:	e01b      	b.n	822c0 <Reset_Handler+0x54>
   82288:	4918      	ldr	r1, [pc, #96]	; (822ec <Reset_Handler+0x80>)
   8228a:	1d0a      	adds	r2, r1, #4
   8228c:	4b1c      	ldr	r3, [pc, #112]	; (82300 <Reset_Handler+0x94>)
   8228e:	1a9b      	subs	r3, r3, r2
   82290:	f023 0303 	bic.w	r3, r3, #3
   82294:	3304      	adds	r3, #4
   82296:	4a16      	ldr	r2, [pc, #88]	; (822f0 <Reset_Handler+0x84>)
   82298:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8229a:	f852 0b04 	ldr.w	r0, [r2], #4
   8229e:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   822a2:	429a      	cmp	r2, r3
   822a4:	d1f9      	bne.n	8229a <Reset_Handler+0x2e>
   822a6:	e7ea      	b.n	8227e <Reset_Handler+0x12>
   822a8:	4b16      	ldr	r3, [pc, #88]	; (82304 <Reset_Handler+0x98>)
   822aa:	4a17      	ldr	r2, [pc, #92]	; (82308 <Reset_Handler+0x9c>)
   822ac:	1ad2      	subs	r2, r2, r3
   822ae:	f022 0203 	bic.w	r2, r2, #3
   822b2:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   822b4:	3b04      	subs	r3, #4
		*pDest++ = 0;
   822b6:	2100      	movs	r1, #0
   822b8:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   822bc:	4293      	cmp	r3, r2
   822be:	d1fb      	bne.n	822b8 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   822c0:	4b12      	ldr	r3, [pc, #72]	; (8230c <Reset_Handler+0xa0>)
   822c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   822c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   822ca:	4911      	ldr	r1, [pc, #68]	; (82310 <Reset_Handler+0xa4>)
   822cc:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   822ce:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   822d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   822d6:	d203      	bcs.n	822e0 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   822d8:	688b      	ldr	r3, [r1, #8]
   822da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   822de:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   822e0:	4b0c      	ldr	r3, [pc, #48]	; (82314 <Reset_Handler+0xa8>)
   822e2:	4798      	blx	r3

	/* Branch to main function */
	main();
   822e4:	4b0c      	ldr	r3, [pc, #48]	; (82318 <Reset_Handler+0xac>)
   822e6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   822e8:	e7fe      	b.n	822e8 <Reset_Handler+0x7c>
   822ea:	bf00      	nop
   822ec:	20070000 	.word	0x20070000
   822f0:	00083288 	.word	0x00083288
   822f4:	20070568 	.word	0x20070568
   822f8:	200787f0 	.word	0x200787f0
   822fc:	20070568 	.word	0x20070568
   82300:	2007056b 	.word	0x2007056b
   82304:	2007056c 	.word	0x2007056c
   82308:	200787f3 	.word	0x200787f3
   8230c:	00080000 	.word	0x00080000
   82310:	e000ed00 	.word	0xe000ed00
   82314:	00082ec9 	.word	0x00082ec9
   82318:	00080489 	.word	0x00080489

0008231c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8231c:	4b3e      	ldr	r3, [pc, #248]	; (82418 <SystemCoreClockUpdate+0xfc>)
   8231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82320:	f003 0303 	and.w	r3, r3, #3
   82324:	2b03      	cmp	r3, #3
   82326:	d85f      	bhi.n	823e8 <SystemCoreClockUpdate+0xcc>
   82328:	e8df f003 	tbb	[pc, r3]
   8232c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82330:	4b3a      	ldr	r3, [pc, #232]	; (8241c <SystemCoreClockUpdate+0x100>)
   82332:	695b      	ldr	r3, [r3, #20]
   82334:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82338:	bf14      	ite	ne
   8233a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8233e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82342:	4b37      	ldr	r3, [pc, #220]	; (82420 <SystemCoreClockUpdate+0x104>)
   82344:	601a      	str	r2, [r3, #0]
   82346:	e04f      	b.n	823e8 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82348:	4b33      	ldr	r3, [pc, #204]	; (82418 <SystemCoreClockUpdate+0xfc>)
   8234a:	6a1b      	ldr	r3, [r3, #32]
   8234c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82350:	d003      	beq.n	8235a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82352:	4a34      	ldr	r2, [pc, #208]	; (82424 <SystemCoreClockUpdate+0x108>)
   82354:	4b32      	ldr	r3, [pc, #200]	; (82420 <SystemCoreClockUpdate+0x104>)
   82356:	601a      	str	r2, [r3, #0]
   82358:	e046      	b.n	823e8 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8235a:	4a33      	ldr	r2, [pc, #204]	; (82428 <SystemCoreClockUpdate+0x10c>)
   8235c:	4b30      	ldr	r3, [pc, #192]	; (82420 <SystemCoreClockUpdate+0x104>)
   8235e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82360:	4b2d      	ldr	r3, [pc, #180]	; (82418 <SystemCoreClockUpdate+0xfc>)
   82362:	6a1b      	ldr	r3, [r3, #32]
   82364:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82368:	2b10      	cmp	r3, #16
   8236a:	d002      	beq.n	82372 <SystemCoreClockUpdate+0x56>
   8236c:	2b20      	cmp	r3, #32
   8236e:	d004      	beq.n	8237a <SystemCoreClockUpdate+0x5e>
   82370:	e03a      	b.n	823e8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82372:	4a2e      	ldr	r2, [pc, #184]	; (8242c <SystemCoreClockUpdate+0x110>)
   82374:	4b2a      	ldr	r3, [pc, #168]	; (82420 <SystemCoreClockUpdate+0x104>)
   82376:	601a      	str	r2, [r3, #0]
				break;
   82378:	e036      	b.n	823e8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8237a:	4a2a      	ldr	r2, [pc, #168]	; (82424 <SystemCoreClockUpdate+0x108>)
   8237c:	4b28      	ldr	r3, [pc, #160]	; (82420 <SystemCoreClockUpdate+0x104>)
   8237e:	601a      	str	r2, [r3, #0]
				break;
   82380:	e032      	b.n	823e8 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82382:	4b25      	ldr	r3, [pc, #148]	; (82418 <SystemCoreClockUpdate+0xfc>)
   82384:	6a1b      	ldr	r3, [r3, #32]
   82386:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8238a:	d003      	beq.n	82394 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8238c:	4a25      	ldr	r2, [pc, #148]	; (82424 <SystemCoreClockUpdate+0x108>)
   8238e:	4b24      	ldr	r3, [pc, #144]	; (82420 <SystemCoreClockUpdate+0x104>)
   82390:	601a      	str	r2, [r3, #0]
   82392:	e012      	b.n	823ba <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82394:	4a24      	ldr	r2, [pc, #144]	; (82428 <SystemCoreClockUpdate+0x10c>)
   82396:	4b22      	ldr	r3, [pc, #136]	; (82420 <SystemCoreClockUpdate+0x104>)
   82398:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8239a:	4b1f      	ldr	r3, [pc, #124]	; (82418 <SystemCoreClockUpdate+0xfc>)
   8239c:	6a1b      	ldr	r3, [r3, #32]
   8239e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   823a2:	2b10      	cmp	r3, #16
   823a4:	d002      	beq.n	823ac <SystemCoreClockUpdate+0x90>
   823a6:	2b20      	cmp	r3, #32
   823a8:	d004      	beq.n	823b4 <SystemCoreClockUpdate+0x98>
   823aa:	e006      	b.n	823ba <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   823ac:	4a1f      	ldr	r2, [pc, #124]	; (8242c <SystemCoreClockUpdate+0x110>)
   823ae:	4b1c      	ldr	r3, [pc, #112]	; (82420 <SystemCoreClockUpdate+0x104>)
   823b0:	601a      	str	r2, [r3, #0]
				break;
   823b2:	e002      	b.n	823ba <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   823b4:	4a1b      	ldr	r2, [pc, #108]	; (82424 <SystemCoreClockUpdate+0x108>)
   823b6:	4b1a      	ldr	r3, [pc, #104]	; (82420 <SystemCoreClockUpdate+0x104>)
   823b8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   823ba:	4b17      	ldr	r3, [pc, #92]	; (82418 <SystemCoreClockUpdate+0xfc>)
   823bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   823be:	f003 0303 	and.w	r3, r3, #3
   823c2:	2b02      	cmp	r3, #2
   823c4:	d10d      	bne.n	823e2 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   823c6:	4a14      	ldr	r2, [pc, #80]	; (82418 <SystemCoreClockUpdate+0xfc>)
   823c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   823ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
   823cc:	4814      	ldr	r0, [pc, #80]	; (82420 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   823ce:	f3c3 410a 	ubfx	r1, r3, #16, #11
   823d2:	6803      	ldr	r3, [r0, #0]
   823d4:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   823d8:	b2d2      	uxtb	r2, r2
   823da:	fbb3 f3f2 	udiv	r3, r3, r2
   823de:	6003      	str	r3, [r0, #0]
   823e0:	e002      	b.n	823e8 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   823e2:	4a13      	ldr	r2, [pc, #76]	; (82430 <SystemCoreClockUpdate+0x114>)
   823e4:	4b0e      	ldr	r3, [pc, #56]	; (82420 <SystemCoreClockUpdate+0x104>)
   823e6:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   823e8:	4b0b      	ldr	r3, [pc, #44]	; (82418 <SystemCoreClockUpdate+0xfc>)
   823ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   823ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
   823f0:	2b70      	cmp	r3, #112	; 0x70
   823f2:	d107      	bne.n	82404 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   823f4:	4a0a      	ldr	r2, [pc, #40]	; (82420 <SystemCoreClockUpdate+0x104>)
   823f6:	6813      	ldr	r3, [r2, #0]
   823f8:	490e      	ldr	r1, [pc, #56]	; (82434 <SystemCoreClockUpdate+0x118>)
   823fa:	fba1 1303 	umull	r1, r3, r1, r3
   823fe:	085b      	lsrs	r3, r3, #1
   82400:	6013      	str	r3, [r2, #0]
   82402:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82404:	4b04      	ldr	r3, [pc, #16]	; (82418 <SystemCoreClockUpdate+0xfc>)
   82406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82408:	4905      	ldr	r1, [pc, #20]	; (82420 <SystemCoreClockUpdate+0x104>)
   8240a:	f3c2 1202 	ubfx	r2, r2, #4, #3
   8240e:	680b      	ldr	r3, [r1, #0]
   82410:	40d3      	lsrs	r3, r2
   82412:	600b      	str	r3, [r1, #0]
   82414:	4770      	bx	lr
   82416:	bf00      	nop
   82418:	400e0600 	.word	0x400e0600
   8241c:	400e1a10 	.word	0x400e1a10
   82420:	2007013c 	.word	0x2007013c
   82424:	00b71b00 	.word	0x00b71b00
   82428:	003d0900 	.word	0x003d0900
   8242c:	007a1200 	.word	0x007a1200
   82430:	0e4e1c00 	.word	0x0e4e1c00
   82434:	aaaaaaab 	.word	0xaaaaaaab

00082438 <__aeabi_drsub>:
   82438:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8243c:	e002      	b.n	82444 <__adddf3>
   8243e:	bf00      	nop

00082440 <__aeabi_dsub>:
   82440:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00082444 <__adddf3>:
   82444:	b530      	push	{r4, r5, lr}
   82446:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8244a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8244e:	ea94 0f05 	teq	r4, r5
   82452:	bf08      	it	eq
   82454:	ea90 0f02 	teqeq	r0, r2
   82458:	bf1f      	itttt	ne
   8245a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8245e:	ea55 0c02 	orrsne.w	ip, r5, r2
   82462:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   82466:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8246a:	f000 80e2 	beq.w	82632 <__adddf3+0x1ee>
   8246e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82472:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   82476:	bfb8      	it	lt
   82478:	426d      	neglt	r5, r5
   8247a:	dd0c      	ble.n	82496 <__adddf3+0x52>
   8247c:	442c      	add	r4, r5
   8247e:	ea80 0202 	eor.w	r2, r0, r2
   82482:	ea81 0303 	eor.w	r3, r1, r3
   82486:	ea82 0000 	eor.w	r0, r2, r0
   8248a:	ea83 0101 	eor.w	r1, r3, r1
   8248e:	ea80 0202 	eor.w	r2, r0, r2
   82492:	ea81 0303 	eor.w	r3, r1, r3
   82496:	2d36      	cmp	r5, #54	; 0x36
   82498:	bf88      	it	hi
   8249a:	bd30      	pophi	{r4, r5, pc}
   8249c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   824a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   824a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   824a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   824ac:	d002      	beq.n	824b4 <__adddf3+0x70>
   824ae:	4240      	negs	r0, r0
   824b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   824b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   824b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   824bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   824c0:	d002      	beq.n	824c8 <__adddf3+0x84>
   824c2:	4252      	negs	r2, r2
   824c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   824c8:	ea94 0f05 	teq	r4, r5
   824cc:	f000 80a7 	beq.w	8261e <__adddf3+0x1da>
   824d0:	f1a4 0401 	sub.w	r4, r4, #1
   824d4:	f1d5 0e20 	rsbs	lr, r5, #32
   824d8:	db0d      	blt.n	824f6 <__adddf3+0xb2>
   824da:	fa02 fc0e 	lsl.w	ip, r2, lr
   824de:	fa22 f205 	lsr.w	r2, r2, r5
   824e2:	1880      	adds	r0, r0, r2
   824e4:	f141 0100 	adc.w	r1, r1, #0
   824e8:	fa03 f20e 	lsl.w	r2, r3, lr
   824ec:	1880      	adds	r0, r0, r2
   824ee:	fa43 f305 	asr.w	r3, r3, r5
   824f2:	4159      	adcs	r1, r3
   824f4:	e00e      	b.n	82514 <__adddf3+0xd0>
   824f6:	f1a5 0520 	sub.w	r5, r5, #32
   824fa:	f10e 0e20 	add.w	lr, lr, #32
   824fe:	2a01      	cmp	r2, #1
   82500:	fa03 fc0e 	lsl.w	ip, r3, lr
   82504:	bf28      	it	cs
   82506:	f04c 0c02 	orrcs.w	ip, ip, #2
   8250a:	fa43 f305 	asr.w	r3, r3, r5
   8250e:	18c0      	adds	r0, r0, r3
   82510:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   82514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82518:	d507      	bpl.n	8252a <__adddf3+0xe6>
   8251a:	f04f 0e00 	mov.w	lr, #0
   8251e:	f1dc 0c00 	rsbs	ip, ip, #0
   82522:	eb7e 0000 	sbcs.w	r0, lr, r0
   82526:	eb6e 0101 	sbc.w	r1, lr, r1
   8252a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8252e:	d31b      	bcc.n	82568 <__adddf3+0x124>
   82530:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   82534:	d30c      	bcc.n	82550 <__adddf3+0x10c>
   82536:	0849      	lsrs	r1, r1, #1
   82538:	ea5f 0030 	movs.w	r0, r0, rrx
   8253c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   82540:	f104 0401 	add.w	r4, r4, #1
   82544:	ea4f 5244 	mov.w	r2, r4, lsl #21
   82548:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8254c:	f080 809a 	bcs.w	82684 <__adddf3+0x240>
   82550:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82554:	bf08      	it	eq
   82556:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8255a:	f150 0000 	adcs.w	r0, r0, #0
   8255e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82562:	ea41 0105 	orr.w	r1, r1, r5
   82566:	bd30      	pop	{r4, r5, pc}
   82568:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8256c:	4140      	adcs	r0, r0
   8256e:	eb41 0101 	adc.w	r1, r1, r1
   82572:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82576:	f1a4 0401 	sub.w	r4, r4, #1
   8257a:	d1e9      	bne.n	82550 <__adddf3+0x10c>
   8257c:	f091 0f00 	teq	r1, #0
   82580:	bf04      	itt	eq
   82582:	4601      	moveq	r1, r0
   82584:	2000      	moveq	r0, #0
   82586:	fab1 f381 	clz	r3, r1
   8258a:	bf08      	it	eq
   8258c:	3320      	addeq	r3, #32
   8258e:	f1a3 030b 	sub.w	r3, r3, #11
   82592:	f1b3 0220 	subs.w	r2, r3, #32
   82596:	da0c      	bge.n	825b2 <__adddf3+0x16e>
   82598:	320c      	adds	r2, #12
   8259a:	dd08      	ble.n	825ae <__adddf3+0x16a>
   8259c:	f102 0c14 	add.w	ip, r2, #20
   825a0:	f1c2 020c 	rsb	r2, r2, #12
   825a4:	fa01 f00c 	lsl.w	r0, r1, ip
   825a8:	fa21 f102 	lsr.w	r1, r1, r2
   825ac:	e00c      	b.n	825c8 <__adddf3+0x184>
   825ae:	f102 0214 	add.w	r2, r2, #20
   825b2:	bfd8      	it	le
   825b4:	f1c2 0c20 	rsble	ip, r2, #32
   825b8:	fa01 f102 	lsl.w	r1, r1, r2
   825bc:	fa20 fc0c 	lsr.w	ip, r0, ip
   825c0:	bfdc      	itt	le
   825c2:	ea41 010c 	orrle.w	r1, r1, ip
   825c6:	4090      	lslle	r0, r2
   825c8:	1ae4      	subs	r4, r4, r3
   825ca:	bfa2      	ittt	ge
   825cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   825d0:	4329      	orrge	r1, r5
   825d2:	bd30      	popge	{r4, r5, pc}
   825d4:	ea6f 0404 	mvn.w	r4, r4
   825d8:	3c1f      	subs	r4, #31
   825da:	da1c      	bge.n	82616 <__adddf3+0x1d2>
   825dc:	340c      	adds	r4, #12
   825de:	dc0e      	bgt.n	825fe <__adddf3+0x1ba>
   825e0:	f104 0414 	add.w	r4, r4, #20
   825e4:	f1c4 0220 	rsb	r2, r4, #32
   825e8:	fa20 f004 	lsr.w	r0, r0, r4
   825ec:	fa01 f302 	lsl.w	r3, r1, r2
   825f0:	ea40 0003 	orr.w	r0, r0, r3
   825f4:	fa21 f304 	lsr.w	r3, r1, r4
   825f8:	ea45 0103 	orr.w	r1, r5, r3
   825fc:	bd30      	pop	{r4, r5, pc}
   825fe:	f1c4 040c 	rsb	r4, r4, #12
   82602:	f1c4 0220 	rsb	r2, r4, #32
   82606:	fa20 f002 	lsr.w	r0, r0, r2
   8260a:	fa01 f304 	lsl.w	r3, r1, r4
   8260e:	ea40 0003 	orr.w	r0, r0, r3
   82612:	4629      	mov	r1, r5
   82614:	bd30      	pop	{r4, r5, pc}
   82616:	fa21 f004 	lsr.w	r0, r1, r4
   8261a:	4629      	mov	r1, r5
   8261c:	bd30      	pop	{r4, r5, pc}
   8261e:	f094 0f00 	teq	r4, #0
   82622:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   82626:	bf06      	itte	eq
   82628:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8262c:	3401      	addeq	r4, #1
   8262e:	3d01      	subne	r5, #1
   82630:	e74e      	b.n	824d0 <__adddf3+0x8c>
   82632:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82636:	bf18      	it	ne
   82638:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8263c:	d029      	beq.n	82692 <__adddf3+0x24e>
   8263e:	ea94 0f05 	teq	r4, r5
   82642:	bf08      	it	eq
   82644:	ea90 0f02 	teqeq	r0, r2
   82648:	d005      	beq.n	82656 <__adddf3+0x212>
   8264a:	ea54 0c00 	orrs.w	ip, r4, r0
   8264e:	bf04      	itt	eq
   82650:	4619      	moveq	r1, r3
   82652:	4610      	moveq	r0, r2
   82654:	bd30      	pop	{r4, r5, pc}
   82656:	ea91 0f03 	teq	r1, r3
   8265a:	bf1e      	ittt	ne
   8265c:	2100      	movne	r1, #0
   8265e:	2000      	movne	r0, #0
   82660:	bd30      	popne	{r4, r5, pc}
   82662:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   82666:	d105      	bne.n	82674 <__adddf3+0x230>
   82668:	0040      	lsls	r0, r0, #1
   8266a:	4149      	adcs	r1, r1
   8266c:	bf28      	it	cs
   8266e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82672:	bd30      	pop	{r4, r5, pc}
   82674:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   82678:	bf3c      	itt	cc
   8267a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8267e:	bd30      	popcc	{r4, r5, pc}
   82680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82684:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   82688:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8268c:	f04f 0000 	mov.w	r0, #0
   82690:	bd30      	pop	{r4, r5, pc}
   82692:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82696:	bf1a      	itte	ne
   82698:	4619      	movne	r1, r3
   8269a:	4610      	movne	r0, r2
   8269c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   826a0:	bf1c      	itt	ne
   826a2:	460b      	movne	r3, r1
   826a4:	4602      	movne	r2, r0
   826a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   826aa:	bf06      	itte	eq
   826ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   826b0:	ea91 0f03 	teqeq	r1, r3
   826b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   826b8:	bd30      	pop	{r4, r5, pc}
   826ba:	bf00      	nop

000826bc <__aeabi_ui2d>:
   826bc:	f090 0f00 	teq	r0, #0
   826c0:	bf04      	itt	eq
   826c2:	2100      	moveq	r1, #0
   826c4:	4770      	bxeq	lr
   826c6:	b530      	push	{r4, r5, lr}
   826c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   826cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   826d0:	f04f 0500 	mov.w	r5, #0
   826d4:	f04f 0100 	mov.w	r1, #0
   826d8:	e750      	b.n	8257c <__adddf3+0x138>
   826da:	bf00      	nop

000826dc <__aeabi_i2d>:
   826dc:	f090 0f00 	teq	r0, #0
   826e0:	bf04      	itt	eq
   826e2:	2100      	moveq	r1, #0
   826e4:	4770      	bxeq	lr
   826e6:	b530      	push	{r4, r5, lr}
   826e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   826ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   826f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   826f4:	bf48      	it	mi
   826f6:	4240      	negmi	r0, r0
   826f8:	f04f 0100 	mov.w	r1, #0
   826fc:	e73e      	b.n	8257c <__adddf3+0x138>
   826fe:	bf00      	nop

00082700 <__aeabi_f2d>:
   82700:	0042      	lsls	r2, r0, #1
   82702:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82706:	ea4f 0131 	mov.w	r1, r1, rrx
   8270a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8270e:	bf1f      	itttt	ne
   82710:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   82714:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82718:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8271c:	4770      	bxne	lr
   8271e:	f092 0f00 	teq	r2, #0
   82722:	bf14      	ite	ne
   82724:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82728:	4770      	bxeq	lr
   8272a:	b530      	push	{r4, r5, lr}
   8272c:	f44f 7460 	mov.w	r4, #896	; 0x380
   82730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82738:	e720      	b.n	8257c <__adddf3+0x138>
   8273a:	bf00      	nop

0008273c <__aeabi_ul2d>:
   8273c:	ea50 0201 	orrs.w	r2, r0, r1
   82740:	bf08      	it	eq
   82742:	4770      	bxeq	lr
   82744:	b530      	push	{r4, r5, lr}
   82746:	f04f 0500 	mov.w	r5, #0
   8274a:	e00a      	b.n	82762 <__aeabi_l2d+0x16>

0008274c <__aeabi_l2d>:
   8274c:	ea50 0201 	orrs.w	r2, r0, r1
   82750:	bf08      	it	eq
   82752:	4770      	bxeq	lr
   82754:	b530      	push	{r4, r5, lr}
   82756:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8275a:	d502      	bpl.n	82762 <__aeabi_l2d+0x16>
   8275c:	4240      	negs	r0, r0
   8275e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82762:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82766:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8276a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8276e:	f43f aedc 	beq.w	8252a <__adddf3+0xe6>
   82772:	f04f 0203 	mov.w	r2, #3
   82776:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8277a:	bf18      	it	ne
   8277c:	3203      	addne	r2, #3
   8277e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82782:	bf18      	it	ne
   82784:	3203      	addne	r2, #3
   82786:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8278a:	f1c2 0320 	rsb	r3, r2, #32
   8278e:	fa00 fc03 	lsl.w	ip, r0, r3
   82792:	fa20 f002 	lsr.w	r0, r0, r2
   82796:	fa01 fe03 	lsl.w	lr, r1, r3
   8279a:	ea40 000e 	orr.w	r0, r0, lr
   8279e:	fa21 f102 	lsr.w	r1, r1, r2
   827a2:	4414      	add	r4, r2
   827a4:	e6c1      	b.n	8252a <__adddf3+0xe6>
   827a6:	bf00      	nop

000827a8 <__aeabi_dmul>:
   827a8:	b570      	push	{r4, r5, r6, lr}
   827aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   827ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   827b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   827b6:	bf1d      	ittte	ne
   827b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   827bc:	ea94 0f0c 	teqne	r4, ip
   827c0:	ea95 0f0c 	teqne	r5, ip
   827c4:	f000 f8de 	bleq	82984 <__aeabi_dmul+0x1dc>
   827c8:	442c      	add	r4, r5
   827ca:	ea81 0603 	eor.w	r6, r1, r3
   827ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   827d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   827d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   827da:	bf18      	it	ne
   827dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   827e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   827e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   827e8:	d038      	beq.n	8285c <__aeabi_dmul+0xb4>
   827ea:	fba0 ce02 	umull	ip, lr, r0, r2
   827ee:	f04f 0500 	mov.w	r5, #0
   827f2:	fbe1 e502 	umlal	lr, r5, r1, r2
   827f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   827fa:	fbe0 e503 	umlal	lr, r5, r0, r3
   827fe:	f04f 0600 	mov.w	r6, #0
   82802:	fbe1 5603 	umlal	r5, r6, r1, r3
   82806:	f09c 0f00 	teq	ip, #0
   8280a:	bf18      	it	ne
   8280c:	f04e 0e01 	orrne.w	lr, lr, #1
   82810:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   82814:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   82818:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8281c:	d204      	bcs.n	82828 <__aeabi_dmul+0x80>
   8281e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   82822:	416d      	adcs	r5, r5
   82824:	eb46 0606 	adc.w	r6, r6, r6
   82828:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8282c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   82830:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   82834:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   82838:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8283c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82840:	bf88      	it	hi
   82842:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   82846:	d81e      	bhi.n	82886 <__aeabi_dmul+0xde>
   82848:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8284c:	bf08      	it	eq
   8284e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   82852:	f150 0000 	adcs.w	r0, r0, #0
   82856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8285a:	bd70      	pop	{r4, r5, r6, pc}
   8285c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   82860:	ea46 0101 	orr.w	r1, r6, r1
   82864:	ea40 0002 	orr.w	r0, r0, r2
   82868:	ea81 0103 	eor.w	r1, r1, r3
   8286c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   82870:	bfc2      	ittt	gt
   82872:	ebd4 050c 	rsbsgt	r5, r4, ip
   82876:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8287a:	bd70      	popgt	{r4, r5, r6, pc}
   8287c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82880:	f04f 0e00 	mov.w	lr, #0
   82884:	3c01      	subs	r4, #1
   82886:	f300 80ab 	bgt.w	829e0 <__aeabi_dmul+0x238>
   8288a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8288e:	bfde      	ittt	le
   82890:	2000      	movle	r0, #0
   82892:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   82896:	bd70      	pople	{r4, r5, r6, pc}
   82898:	f1c4 0400 	rsb	r4, r4, #0
   8289c:	3c20      	subs	r4, #32
   8289e:	da35      	bge.n	8290c <__aeabi_dmul+0x164>
   828a0:	340c      	adds	r4, #12
   828a2:	dc1b      	bgt.n	828dc <__aeabi_dmul+0x134>
   828a4:	f104 0414 	add.w	r4, r4, #20
   828a8:	f1c4 0520 	rsb	r5, r4, #32
   828ac:	fa00 f305 	lsl.w	r3, r0, r5
   828b0:	fa20 f004 	lsr.w	r0, r0, r4
   828b4:	fa01 f205 	lsl.w	r2, r1, r5
   828b8:	ea40 0002 	orr.w	r0, r0, r2
   828bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   828c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   828c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   828c8:	fa21 f604 	lsr.w	r6, r1, r4
   828cc:	eb42 0106 	adc.w	r1, r2, r6
   828d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   828d4:	bf08      	it	eq
   828d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   828da:	bd70      	pop	{r4, r5, r6, pc}
   828dc:	f1c4 040c 	rsb	r4, r4, #12
   828e0:	f1c4 0520 	rsb	r5, r4, #32
   828e4:	fa00 f304 	lsl.w	r3, r0, r4
   828e8:	fa20 f005 	lsr.w	r0, r0, r5
   828ec:	fa01 f204 	lsl.w	r2, r1, r4
   828f0:	ea40 0002 	orr.w	r0, r0, r2
   828f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   828f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   828fc:	f141 0100 	adc.w	r1, r1, #0
   82900:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82904:	bf08      	it	eq
   82906:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8290a:	bd70      	pop	{r4, r5, r6, pc}
   8290c:	f1c4 0520 	rsb	r5, r4, #32
   82910:	fa00 f205 	lsl.w	r2, r0, r5
   82914:	ea4e 0e02 	orr.w	lr, lr, r2
   82918:	fa20 f304 	lsr.w	r3, r0, r4
   8291c:	fa01 f205 	lsl.w	r2, r1, r5
   82920:	ea43 0302 	orr.w	r3, r3, r2
   82924:	fa21 f004 	lsr.w	r0, r1, r4
   82928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8292c:	fa21 f204 	lsr.w	r2, r1, r4
   82930:	ea20 0002 	bic.w	r0, r0, r2
   82934:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   82938:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8293c:	bf08      	it	eq
   8293e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82942:	bd70      	pop	{r4, r5, r6, pc}
   82944:	f094 0f00 	teq	r4, #0
   82948:	d10f      	bne.n	8296a <__aeabi_dmul+0x1c2>
   8294a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8294e:	0040      	lsls	r0, r0, #1
   82950:	eb41 0101 	adc.w	r1, r1, r1
   82954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82958:	bf08      	it	eq
   8295a:	3c01      	subeq	r4, #1
   8295c:	d0f7      	beq.n	8294e <__aeabi_dmul+0x1a6>
   8295e:	ea41 0106 	orr.w	r1, r1, r6
   82962:	f095 0f00 	teq	r5, #0
   82966:	bf18      	it	ne
   82968:	4770      	bxne	lr
   8296a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8296e:	0052      	lsls	r2, r2, #1
   82970:	eb43 0303 	adc.w	r3, r3, r3
   82974:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   82978:	bf08      	it	eq
   8297a:	3d01      	subeq	r5, #1
   8297c:	d0f7      	beq.n	8296e <__aeabi_dmul+0x1c6>
   8297e:	ea43 0306 	orr.w	r3, r3, r6
   82982:	4770      	bx	lr
   82984:	ea94 0f0c 	teq	r4, ip
   82988:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8298c:	bf18      	it	ne
   8298e:	ea95 0f0c 	teqne	r5, ip
   82992:	d00c      	beq.n	829ae <__aeabi_dmul+0x206>
   82994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82998:	bf18      	it	ne
   8299a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8299e:	d1d1      	bne.n	82944 <__aeabi_dmul+0x19c>
   829a0:	ea81 0103 	eor.w	r1, r1, r3
   829a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   829a8:	f04f 0000 	mov.w	r0, #0
   829ac:	bd70      	pop	{r4, r5, r6, pc}
   829ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   829b2:	bf06      	itte	eq
   829b4:	4610      	moveq	r0, r2
   829b6:	4619      	moveq	r1, r3
   829b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   829bc:	d019      	beq.n	829f2 <__aeabi_dmul+0x24a>
   829be:	ea94 0f0c 	teq	r4, ip
   829c2:	d102      	bne.n	829ca <__aeabi_dmul+0x222>
   829c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   829c8:	d113      	bne.n	829f2 <__aeabi_dmul+0x24a>
   829ca:	ea95 0f0c 	teq	r5, ip
   829ce:	d105      	bne.n	829dc <__aeabi_dmul+0x234>
   829d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   829d4:	bf1c      	itt	ne
   829d6:	4610      	movne	r0, r2
   829d8:	4619      	movne	r1, r3
   829da:	d10a      	bne.n	829f2 <__aeabi_dmul+0x24a>
   829dc:	ea81 0103 	eor.w	r1, r1, r3
   829e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   829e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   829e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   829ec:	f04f 0000 	mov.w	r0, #0
   829f0:	bd70      	pop	{r4, r5, r6, pc}
   829f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   829f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   829fa:	bd70      	pop	{r4, r5, r6, pc}

000829fc <__aeabi_ddiv>:
   829fc:	b570      	push	{r4, r5, r6, lr}
   829fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82a02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82a06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82a0a:	bf1d      	ittte	ne
   82a0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82a10:	ea94 0f0c 	teqne	r4, ip
   82a14:	ea95 0f0c 	teqne	r5, ip
   82a18:	f000 f8a7 	bleq	82b6a <__aeabi_ddiv+0x16e>
   82a1c:	eba4 0405 	sub.w	r4, r4, r5
   82a20:	ea81 0e03 	eor.w	lr, r1, r3
   82a24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82a28:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82a2c:	f000 8088 	beq.w	82b40 <__aeabi_ddiv+0x144>
   82a30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82a34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   82a38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   82a3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   82a40:	ea4f 2202 	mov.w	r2, r2, lsl #8
   82a44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   82a48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   82a4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   82a50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   82a54:	429d      	cmp	r5, r3
   82a56:	bf08      	it	eq
   82a58:	4296      	cmpeq	r6, r2
   82a5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   82a5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   82a62:	d202      	bcs.n	82a6a <__aeabi_ddiv+0x6e>
   82a64:	085b      	lsrs	r3, r3, #1
   82a66:	ea4f 0232 	mov.w	r2, r2, rrx
   82a6a:	1ab6      	subs	r6, r6, r2
   82a6c:	eb65 0503 	sbc.w	r5, r5, r3
   82a70:	085b      	lsrs	r3, r3, #1
   82a72:	ea4f 0232 	mov.w	r2, r2, rrx
   82a76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   82a7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   82a7e:	ebb6 0e02 	subs.w	lr, r6, r2
   82a82:	eb75 0e03 	sbcs.w	lr, r5, r3
   82a86:	bf22      	ittt	cs
   82a88:	1ab6      	subcs	r6, r6, r2
   82a8a:	4675      	movcs	r5, lr
   82a8c:	ea40 000c 	orrcs.w	r0, r0, ip
   82a90:	085b      	lsrs	r3, r3, #1
   82a92:	ea4f 0232 	mov.w	r2, r2, rrx
   82a96:	ebb6 0e02 	subs.w	lr, r6, r2
   82a9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   82a9e:	bf22      	ittt	cs
   82aa0:	1ab6      	subcs	r6, r6, r2
   82aa2:	4675      	movcs	r5, lr
   82aa4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82aa8:	085b      	lsrs	r3, r3, #1
   82aaa:	ea4f 0232 	mov.w	r2, r2, rrx
   82aae:	ebb6 0e02 	subs.w	lr, r6, r2
   82ab2:	eb75 0e03 	sbcs.w	lr, r5, r3
   82ab6:	bf22      	ittt	cs
   82ab8:	1ab6      	subcs	r6, r6, r2
   82aba:	4675      	movcs	r5, lr
   82abc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82ac0:	085b      	lsrs	r3, r3, #1
   82ac2:	ea4f 0232 	mov.w	r2, r2, rrx
   82ac6:	ebb6 0e02 	subs.w	lr, r6, r2
   82aca:	eb75 0e03 	sbcs.w	lr, r5, r3
   82ace:	bf22      	ittt	cs
   82ad0:	1ab6      	subcs	r6, r6, r2
   82ad2:	4675      	movcs	r5, lr
   82ad4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82ad8:	ea55 0e06 	orrs.w	lr, r5, r6
   82adc:	d018      	beq.n	82b10 <__aeabi_ddiv+0x114>
   82ade:	ea4f 1505 	mov.w	r5, r5, lsl #4
   82ae2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   82ae6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   82aea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   82aee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   82af2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   82af6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   82afa:	d1c0      	bne.n	82a7e <__aeabi_ddiv+0x82>
   82afc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82b00:	d10b      	bne.n	82b1a <__aeabi_ddiv+0x11e>
   82b02:	ea41 0100 	orr.w	r1, r1, r0
   82b06:	f04f 0000 	mov.w	r0, #0
   82b0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   82b0e:	e7b6      	b.n	82a7e <__aeabi_ddiv+0x82>
   82b10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82b14:	bf04      	itt	eq
   82b16:	4301      	orreq	r1, r0
   82b18:	2000      	moveq	r0, #0
   82b1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82b1e:	bf88      	it	hi
   82b20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   82b24:	f63f aeaf 	bhi.w	82886 <__aeabi_dmul+0xde>
   82b28:	ebb5 0c03 	subs.w	ip, r5, r3
   82b2c:	bf04      	itt	eq
   82b2e:	ebb6 0c02 	subseq.w	ip, r6, r2
   82b32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82b36:	f150 0000 	adcs.w	r0, r0, #0
   82b3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82b3e:	bd70      	pop	{r4, r5, r6, pc}
   82b40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   82b44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   82b48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   82b4c:	bfc2      	ittt	gt
   82b4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   82b52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82b56:	bd70      	popgt	{r4, r5, r6, pc}
   82b58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82b5c:	f04f 0e00 	mov.w	lr, #0
   82b60:	3c01      	subs	r4, #1
   82b62:	e690      	b.n	82886 <__aeabi_dmul+0xde>
   82b64:	ea45 0e06 	orr.w	lr, r5, r6
   82b68:	e68d      	b.n	82886 <__aeabi_dmul+0xde>
   82b6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82b6e:	ea94 0f0c 	teq	r4, ip
   82b72:	bf08      	it	eq
   82b74:	ea95 0f0c 	teqeq	r5, ip
   82b78:	f43f af3b 	beq.w	829f2 <__aeabi_dmul+0x24a>
   82b7c:	ea94 0f0c 	teq	r4, ip
   82b80:	d10a      	bne.n	82b98 <__aeabi_ddiv+0x19c>
   82b82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82b86:	f47f af34 	bne.w	829f2 <__aeabi_dmul+0x24a>
   82b8a:	ea95 0f0c 	teq	r5, ip
   82b8e:	f47f af25 	bne.w	829dc <__aeabi_dmul+0x234>
   82b92:	4610      	mov	r0, r2
   82b94:	4619      	mov	r1, r3
   82b96:	e72c      	b.n	829f2 <__aeabi_dmul+0x24a>
   82b98:	ea95 0f0c 	teq	r5, ip
   82b9c:	d106      	bne.n	82bac <__aeabi_ddiv+0x1b0>
   82b9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82ba2:	f43f aefd 	beq.w	829a0 <__aeabi_dmul+0x1f8>
   82ba6:	4610      	mov	r0, r2
   82ba8:	4619      	mov	r1, r3
   82baa:	e722      	b.n	829f2 <__aeabi_dmul+0x24a>
   82bac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82bb0:	bf18      	it	ne
   82bb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82bb6:	f47f aec5 	bne.w	82944 <__aeabi_dmul+0x19c>
   82bba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   82bbe:	f47f af0d 	bne.w	829dc <__aeabi_dmul+0x234>
   82bc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   82bc6:	f47f aeeb 	bne.w	829a0 <__aeabi_dmul+0x1f8>
   82bca:	e712      	b.n	829f2 <__aeabi_dmul+0x24a>

00082bcc <__aeabi_d2f>:
   82bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   82bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   82bd4:	bf24      	itt	cs
   82bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   82bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   82bde:	d90d      	bls.n	82bfc <__aeabi_d2f+0x30>
   82be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   82be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   82bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   82bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   82bf4:	bf08      	it	eq
   82bf6:	f020 0001 	biceq.w	r0, r0, #1
   82bfa:	4770      	bx	lr
   82bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   82c00:	d121      	bne.n	82c46 <__aeabi_d2f+0x7a>
   82c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   82c06:	bfbc      	itt	lt
   82c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   82c0c:	4770      	bxlt	lr
   82c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
   82c16:	f1c2 0218 	rsb	r2, r2, #24
   82c1a:	f1c2 0c20 	rsb	ip, r2, #32
   82c1e:	fa10 f30c 	lsls.w	r3, r0, ip
   82c22:	fa20 f002 	lsr.w	r0, r0, r2
   82c26:	bf18      	it	ne
   82c28:	f040 0001 	orrne.w	r0, r0, #1
   82c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   82c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   82c34:	fa03 fc0c 	lsl.w	ip, r3, ip
   82c38:	ea40 000c 	orr.w	r0, r0, ip
   82c3c:	fa23 f302 	lsr.w	r3, r3, r2
   82c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
   82c44:	e7cc      	b.n	82be0 <__aeabi_d2f+0x14>
   82c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
   82c4a:	d107      	bne.n	82c5c <__aeabi_d2f+0x90>
   82c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   82c50:	bf1e      	ittt	ne
   82c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   82c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   82c5a:	4770      	bxne	lr
   82c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   82c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82c68:	4770      	bx	lr
   82c6a:	bf00      	nop

00082c6c <__aeabi_frsub>:
   82c6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   82c70:	e002      	b.n	82c78 <__addsf3>
   82c72:	bf00      	nop

00082c74 <__aeabi_fsub>:
   82c74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00082c78 <__addsf3>:
   82c78:	0042      	lsls	r2, r0, #1
   82c7a:	bf1f      	itttt	ne
   82c7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   82c80:	ea92 0f03 	teqne	r2, r3
   82c84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   82c88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82c8c:	d06a      	beq.n	82d64 <__addsf3+0xec>
   82c8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   82c92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   82c96:	bfc1      	itttt	gt
   82c98:	18d2      	addgt	r2, r2, r3
   82c9a:	4041      	eorgt	r1, r0
   82c9c:	4048      	eorgt	r0, r1
   82c9e:	4041      	eorgt	r1, r0
   82ca0:	bfb8      	it	lt
   82ca2:	425b      	neglt	r3, r3
   82ca4:	2b19      	cmp	r3, #25
   82ca6:	bf88      	it	hi
   82ca8:	4770      	bxhi	lr
   82caa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   82cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82cb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   82cb6:	bf18      	it	ne
   82cb8:	4240      	negne	r0, r0
   82cba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82cbe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   82cc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   82cc6:	bf18      	it	ne
   82cc8:	4249      	negne	r1, r1
   82cca:	ea92 0f03 	teq	r2, r3
   82cce:	d03f      	beq.n	82d50 <__addsf3+0xd8>
   82cd0:	f1a2 0201 	sub.w	r2, r2, #1
   82cd4:	fa41 fc03 	asr.w	ip, r1, r3
   82cd8:	eb10 000c 	adds.w	r0, r0, ip
   82cdc:	f1c3 0320 	rsb	r3, r3, #32
   82ce0:	fa01 f103 	lsl.w	r1, r1, r3
   82ce4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82ce8:	d502      	bpl.n	82cf0 <__addsf3+0x78>
   82cea:	4249      	negs	r1, r1
   82cec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   82cf0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   82cf4:	d313      	bcc.n	82d1e <__addsf3+0xa6>
   82cf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   82cfa:	d306      	bcc.n	82d0a <__addsf3+0x92>
   82cfc:	0840      	lsrs	r0, r0, #1
   82cfe:	ea4f 0131 	mov.w	r1, r1, rrx
   82d02:	f102 0201 	add.w	r2, r2, #1
   82d06:	2afe      	cmp	r2, #254	; 0xfe
   82d08:	d251      	bcs.n	82dae <__addsf3+0x136>
   82d0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   82d0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82d12:	bf08      	it	eq
   82d14:	f020 0001 	biceq.w	r0, r0, #1
   82d18:	ea40 0003 	orr.w	r0, r0, r3
   82d1c:	4770      	bx	lr
   82d1e:	0049      	lsls	r1, r1, #1
   82d20:	eb40 0000 	adc.w	r0, r0, r0
   82d24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   82d28:	f1a2 0201 	sub.w	r2, r2, #1
   82d2c:	d1ed      	bne.n	82d0a <__addsf3+0x92>
   82d2e:	fab0 fc80 	clz	ip, r0
   82d32:	f1ac 0c08 	sub.w	ip, ip, #8
   82d36:	ebb2 020c 	subs.w	r2, r2, ip
   82d3a:	fa00 f00c 	lsl.w	r0, r0, ip
   82d3e:	bfaa      	itet	ge
   82d40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   82d44:	4252      	neglt	r2, r2
   82d46:	4318      	orrge	r0, r3
   82d48:	bfbc      	itt	lt
   82d4a:	40d0      	lsrlt	r0, r2
   82d4c:	4318      	orrlt	r0, r3
   82d4e:	4770      	bx	lr
   82d50:	f092 0f00 	teq	r2, #0
   82d54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   82d58:	bf06      	itte	eq
   82d5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   82d5e:	3201      	addeq	r2, #1
   82d60:	3b01      	subne	r3, #1
   82d62:	e7b5      	b.n	82cd0 <__addsf3+0x58>
   82d64:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82d68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82d6c:	bf18      	it	ne
   82d6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82d72:	d021      	beq.n	82db8 <__addsf3+0x140>
   82d74:	ea92 0f03 	teq	r2, r3
   82d78:	d004      	beq.n	82d84 <__addsf3+0x10c>
   82d7a:	f092 0f00 	teq	r2, #0
   82d7e:	bf08      	it	eq
   82d80:	4608      	moveq	r0, r1
   82d82:	4770      	bx	lr
   82d84:	ea90 0f01 	teq	r0, r1
   82d88:	bf1c      	itt	ne
   82d8a:	2000      	movne	r0, #0
   82d8c:	4770      	bxne	lr
   82d8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   82d92:	d104      	bne.n	82d9e <__addsf3+0x126>
   82d94:	0040      	lsls	r0, r0, #1
   82d96:	bf28      	it	cs
   82d98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   82d9c:	4770      	bx	lr
   82d9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   82da2:	bf3c      	itt	cc
   82da4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   82da8:	4770      	bxcc	lr
   82daa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82dae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   82db2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82db6:	4770      	bx	lr
   82db8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   82dbc:	bf16      	itet	ne
   82dbe:	4608      	movne	r0, r1
   82dc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   82dc4:	4601      	movne	r1, r0
   82dc6:	0242      	lsls	r2, r0, #9
   82dc8:	bf06      	itte	eq
   82dca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   82dce:	ea90 0f01 	teqeq	r0, r1
   82dd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   82dd6:	4770      	bx	lr

00082dd8 <__aeabi_ui2f>:
   82dd8:	f04f 0300 	mov.w	r3, #0
   82ddc:	e004      	b.n	82de8 <__aeabi_i2f+0x8>
   82dde:	bf00      	nop

00082de0 <__aeabi_i2f>:
   82de0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   82de4:	bf48      	it	mi
   82de6:	4240      	negmi	r0, r0
   82de8:	ea5f 0c00 	movs.w	ip, r0
   82dec:	bf08      	it	eq
   82dee:	4770      	bxeq	lr
   82df0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   82df4:	4601      	mov	r1, r0
   82df6:	f04f 0000 	mov.w	r0, #0
   82dfa:	e01c      	b.n	82e36 <__aeabi_l2f+0x2a>

00082dfc <__aeabi_ul2f>:
   82dfc:	ea50 0201 	orrs.w	r2, r0, r1
   82e00:	bf08      	it	eq
   82e02:	4770      	bxeq	lr
   82e04:	f04f 0300 	mov.w	r3, #0
   82e08:	e00a      	b.n	82e20 <__aeabi_l2f+0x14>
   82e0a:	bf00      	nop

00082e0c <__aeabi_l2f>:
   82e0c:	ea50 0201 	orrs.w	r2, r0, r1
   82e10:	bf08      	it	eq
   82e12:	4770      	bxeq	lr
   82e14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   82e18:	d502      	bpl.n	82e20 <__aeabi_l2f+0x14>
   82e1a:	4240      	negs	r0, r0
   82e1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82e20:	ea5f 0c01 	movs.w	ip, r1
   82e24:	bf02      	ittt	eq
   82e26:	4684      	moveq	ip, r0
   82e28:	4601      	moveq	r1, r0
   82e2a:	2000      	moveq	r0, #0
   82e2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   82e30:	bf08      	it	eq
   82e32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   82e36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   82e3a:	fabc f28c 	clz	r2, ip
   82e3e:	3a08      	subs	r2, #8
   82e40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   82e44:	db10      	blt.n	82e68 <__aeabi_l2f+0x5c>
   82e46:	fa01 fc02 	lsl.w	ip, r1, r2
   82e4a:	4463      	add	r3, ip
   82e4c:	fa00 fc02 	lsl.w	ip, r0, r2
   82e50:	f1c2 0220 	rsb	r2, r2, #32
   82e54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82e58:	fa20 f202 	lsr.w	r2, r0, r2
   82e5c:	eb43 0002 	adc.w	r0, r3, r2
   82e60:	bf08      	it	eq
   82e62:	f020 0001 	biceq.w	r0, r0, #1
   82e66:	4770      	bx	lr
   82e68:	f102 0220 	add.w	r2, r2, #32
   82e6c:	fa01 fc02 	lsl.w	ip, r1, r2
   82e70:	f1c2 0220 	rsb	r2, r2, #32
   82e74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   82e78:	fa21 f202 	lsr.w	r2, r1, r2
   82e7c:	eb43 0002 	adc.w	r0, r3, r2
   82e80:	bf08      	it	eq
   82e82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   82e86:	4770      	bx	lr

00082e88 <__aeabi_f2uiz>:
   82e88:	0042      	lsls	r2, r0, #1
   82e8a:	d20e      	bcs.n	82eaa <__aeabi_f2uiz+0x22>
   82e8c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   82e90:	d30b      	bcc.n	82eaa <__aeabi_f2uiz+0x22>
   82e92:	f04f 039e 	mov.w	r3, #158	; 0x9e
   82e96:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   82e9a:	d409      	bmi.n	82eb0 <__aeabi_f2uiz+0x28>
   82e9c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   82ea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   82ea4:	fa23 f002 	lsr.w	r0, r3, r2
   82ea8:	4770      	bx	lr
   82eaa:	f04f 0000 	mov.w	r0, #0
   82eae:	4770      	bx	lr
   82eb0:	f112 0f61 	cmn.w	r2, #97	; 0x61
   82eb4:	d101      	bne.n	82eba <__aeabi_f2uiz+0x32>
   82eb6:	0242      	lsls	r2, r0, #9
   82eb8:	d102      	bne.n	82ec0 <__aeabi_f2uiz+0x38>
   82eba:	f04f 30ff 	mov.w	r0, #4294967295
   82ebe:	4770      	bx	lr
   82ec0:	f04f 0000 	mov.w	r0, #0
   82ec4:	4770      	bx	lr
   82ec6:	bf00      	nop

00082ec8 <__libc_init_array>:
   82ec8:	b570      	push	{r4, r5, r6, lr}
   82eca:	4e0f      	ldr	r6, [pc, #60]	; (82f08 <__libc_init_array+0x40>)
   82ecc:	4d0f      	ldr	r5, [pc, #60]	; (82f0c <__libc_init_array+0x44>)
   82ece:	1b76      	subs	r6, r6, r5
   82ed0:	10b6      	asrs	r6, r6, #2
   82ed2:	bf18      	it	ne
   82ed4:	2400      	movne	r4, #0
   82ed6:	d005      	beq.n	82ee4 <__libc_init_array+0x1c>
   82ed8:	3401      	adds	r4, #1
   82eda:	f855 3b04 	ldr.w	r3, [r5], #4
   82ede:	4798      	blx	r3
   82ee0:	42a6      	cmp	r6, r4
   82ee2:	d1f9      	bne.n	82ed8 <__libc_init_array+0x10>
   82ee4:	4e0a      	ldr	r6, [pc, #40]	; (82f10 <__libc_init_array+0x48>)
   82ee6:	4d0b      	ldr	r5, [pc, #44]	; (82f14 <__libc_init_array+0x4c>)
   82ee8:	f000 f9bc 	bl	83264 <_init>
   82eec:	1b76      	subs	r6, r6, r5
   82eee:	10b6      	asrs	r6, r6, #2
   82ef0:	bf18      	it	ne
   82ef2:	2400      	movne	r4, #0
   82ef4:	d006      	beq.n	82f04 <__libc_init_array+0x3c>
   82ef6:	3401      	adds	r4, #1
   82ef8:	f855 3b04 	ldr.w	r3, [r5], #4
   82efc:	4798      	blx	r3
   82efe:	42a6      	cmp	r6, r4
   82f00:	d1f9      	bne.n	82ef6 <__libc_init_array+0x2e>
   82f02:	bd70      	pop	{r4, r5, r6, pc}
   82f04:	bd70      	pop	{r4, r5, r6, pc}
   82f06:	bf00      	nop
   82f08:	00083270 	.word	0x00083270
   82f0c:	00083270 	.word	0x00083270
   82f10:	00083278 	.word	0x00083278
   82f14:	00083270 	.word	0x00083270

00082f18 <memcpy>:
   82f18:	4684      	mov	ip, r0
   82f1a:	ea41 0300 	orr.w	r3, r1, r0
   82f1e:	f013 0303 	ands.w	r3, r3, #3
   82f22:	d149      	bne.n	82fb8 <memcpy+0xa0>
   82f24:	3a40      	subs	r2, #64	; 0x40
   82f26:	d323      	bcc.n	82f70 <memcpy+0x58>
   82f28:	680b      	ldr	r3, [r1, #0]
   82f2a:	6003      	str	r3, [r0, #0]
   82f2c:	684b      	ldr	r3, [r1, #4]
   82f2e:	6043      	str	r3, [r0, #4]
   82f30:	688b      	ldr	r3, [r1, #8]
   82f32:	6083      	str	r3, [r0, #8]
   82f34:	68cb      	ldr	r3, [r1, #12]
   82f36:	60c3      	str	r3, [r0, #12]
   82f38:	690b      	ldr	r3, [r1, #16]
   82f3a:	6103      	str	r3, [r0, #16]
   82f3c:	694b      	ldr	r3, [r1, #20]
   82f3e:	6143      	str	r3, [r0, #20]
   82f40:	698b      	ldr	r3, [r1, #24]
   82f42:	6183      	str	r3, [r0, #24]
   82f44:	69cb      	ldr	r3, [r1, #28]
   82f46:	61c3      	str	r3, [r0, #28]
   82f48:	6a0b      	ldr	r3, [r1, #32]
   82f4a:	6203      	str	r3, [r0, #32]
   82f4c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82f4e:	6243      	str	r3, [r0, #36]	; 0x24
   82f50:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82f52:	6283      	str	r3, [r0, #40]	; 0x28
   82f54:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82f56:	62c3      	str	r3, [r0, #44]	; 0x2c
   82f58:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82f5a:	6303      	str	r3, [r0, #48]	; 0x30
   82f5c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82f5e:	6343      	str	r3, [r0, #52]	; 0x34
   82f60:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82f62:	6383      	str	r3, [r0, #56]	; 0x38
   82f64:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82f66:	63c3      	str	r3, [r0, #60]	; 0x3c
   82f68:	3040      	adds	r0, #64	; 0x40
   82f6a:	3140      	adds	r1, #64	; 0x40
   82f6c:	3a40      	subs	r2, #64	; 0x40
   82f6e:	d2db      	bcs.n	82f28 <memcpy+0x10>
   82f70:	3230      	adds	r2, #48	; 0x30
   82f72:	d30b      	bcc.n	82f8c <memcpy+0x74>
   82f74:	680b      	ldr	r3, [r1, #0]
   82f76:	6003      	str	r3, [r0, #0]
   82f78:	684b      	ldr	r3, [r1, #4]
   82f7a:	6043      	str	r3, [r0, #4]
   82f7c:	688b      	ldr	r3, [r1, #8]
   82f7e:	6083      	str	r3, [r0, #8]
   82f80:	68cb      	ldr	r3, [r1, #12]
   82f82:	60c3      	str	r3, [r0, #12]
   82f84:	3010      	adds	r0, #16
   82f86:	3110      	adds	r1, #16
   82f88:	3a10      	subs	r2, #16
   82f8a:	d2f3      	bcs.n	82f74 <memcpy+0x5c>
   82f8c:	320c      	adds	r2, #12
   82f8e:	d305      	bcc.n	82f9c <memcpy+0x84>
   82f90:	f851 3b04 	ldr.w	r3, [r1], #4
   82f94:	f840 3b04 	str.w	r3, [r0], #4
   82f98:	3a04      	subs	r2, #4
   82f9a:	d2f9      	bcs.n	82f90 <memcpy+0x78>
   82f9c:	3204      	adds	r2, #4
   82f9e:	d008      	beq.n	82fb2 <memcpy+0x9a>
   82fa0:	07d2      	lsls	r2, r2, #31
   82fa2:	bf1c      	itt	ne
   82fa4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82fa8:	f800 3b01 	strbne.w	r3, [r0], #1
   82fac:	d301      	bcc.n	82fb2 <memcpy+0x9a>
   82fae:	880b      	ldrh	r3, [r1, #0]
   82fb0:	8003      	strh	r3, [r0, #0]
   82fb2:	4660      	mov	r0, ip
   82fb4:	4770      	bx	lr
   82fb6:	bf00      	nop
   82fb8:	2a08      	cmp	r2, #8
   82fba:	d313      	bcc.n	82fe4 <memcpy+0xcc>
   82fbc:	078b      	lsls	r3, r1, #30
   82fbe:	d0b1      	beq.n	82f24 <memcpy+0xc>
   82fc0:	f010 0303 	ands.w	r3, r0, #3
   82fc4:	d0ae      	beq.n	82f24 <memcpy+0xc>
   82fc6:	f1c3 0304 	rsb	r3, r3, #4
   82fca:	1ad2      	subs	r2, r2, r3
   82fcc:	07db      	lsls	r3, r3, #31
   82fce:	bf1c      	itt	ne
   82fd0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82fd4:	f800 3b01 	strbne.w	r3, [r0], #1
   82fd8:	d3a4      	bcc.n	82f24 <memcpy+0xc>
   82fda:	f831 3b02 	ldrh.w	r3, [r1], #2
   82fde:	f820 3b02 	strh.w	r3, [r0], #2
   82fe2:	e79f      	b.n	82f24 <memcpy+0xc>
   82fe4:	3a04      	subs	r2, #4
   82fe6:	d3d9      	bcc.n	82f9c <memcpy+0x84>
   82fe8:	3a01      	subs	r2, #1
   82fea:	f811 3b01 	ldrb.w	r3, [r1], #1
   82fee:	f800 3b01 	strb.w	r3, [r0], #1
   82ff2:	d2f9      	bcs.n	82fe8 <memcpy+0xd0>
   82ff4:	780b      	ldrb	r3, [r1, #0]
   82ff6:	7003      	strb	r3, [r0, #0]
   82ff8:	784b      	ldrb	r3, [r1, #1]
   82ffa:	7043      	strb	r3, [r0, #1]
   82ffc:	788b      	ldrb	r3, [r1, #2]
   82ffe:	7083      	strb	r3, [r0, #2]
   83000:	4660      	mov	r0, ip
   83002:	4770      	bx	lr

00083004 <memset>:
   83004:	b470      	push	{r4, r5, r6}
   83006:	0784      	lsls	r4, r0, #30
   83008:	d046      	beq.n	83098 <memset+0x94>
   8300a:	1e54      	subs	r4, r2, #1
   8300c:	2a00      	cmp	r2, #0
   8300e:	d041      	beq.n	83094 <memset+0x90>
   83010:	b2cd      	uxtb	r5, r1
   83012:	4603      	mov	r3, r0
   83014:	e002      	b.n	8301c <memset+0x18>
   83016:	1e62      	subs	r2, r4, #1
   83018:	b3e4      	cbz	r4, 83094 <memset+0x90>
   8301a:	4614      	mov	r4, r2
   8301c:	f803 5b01 	strb.w	r5, [r3], #1
   83020:	079a      	lsls	r2, r3, #30
   83022:	d1f8      	bne.n	83016 <memset+0x12>
   83024:	2c03      	cmp	r4, #3
   83026:	d92e      	bls.n	83086 <memset+0x82>
   83028:	b2cd      	uxtb	r5, r1
   8302a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8302e:	2c0f      	cmp	r4, #15
   83030:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83034:	d919      	bls.n	8306a <memset+0x66>
   83036:	4626      	mov	r6, r4
   83038:	f103 0210 	add.w	r2, r3, #16
   8303c:	3e10      	subs	r6, #16
   8303e:	2e0f      	cmp	r6, #15
   83040:	f842 5c10 	str.w	r5, [r2, #-16]
   83044:	f842 5c0c 	str.w	r5, [r2, #-12]
   83048:	f842 5c08 	str.w	r5, [r2, #-8]
   8304c:	f842 5c04 	str.w	r5, [r2, #-4]
   83050:	f102 0210 	add.w	r2, r2, #16
   83054:	d8f2      	bhi.n	8303c <memset+0x38>
   83056:	f1a4 0210 	sub.w	r2, r4, #16
   8305a:	f022 020f 	bic.w	r2, r2, #15
   8305e:	f004 040f 	and.w	r4, r4, #15
   83062:	3210      	adds	r2, #16
   83064:	2c03      	cmp	r4, #3
   83066:	4413      	add	r3, r2
   83068:	d90d      	bls.n	83086 <memset+0x82>
   8306a:	461e      	mov	r6, r3
   8306c:	4622      	mov	r2, r4
   8306e:	3a04      	subs	r2, #4
   83070:	2a03      	cmp	r2, #3
   83072:	f846 5b04 	str.w	r5, [r6], #4
   83076:	d8fa      	bhi.n	8306e <memset+0x6a>
   83078:	1f22      	subs	r2, r4, #4
   8307a:	f022 0203 	bic.w	r2, r2, #3
   8307e:	3204      	adds	r2, #4
   83080:	4413      	add	r3, r2
   83082:	f004 0403 	and.w	r4, r4, #3
   83086:	b12c      	cbz	r4, 83094 <memset+0x90>
   83088:	b2c9      	uxtb	r1, r1
   8308a:	441c      	add	r4, r3
   8308c:	f803 1b01 	strb.w	r1, [r3], #1
   83090:	42a3      	cmp	r3, r4
   83092:	d1fb      	bne.n	8308c <memset+0x88>
   83094:	bc70      	pop	{r4, r5, r6}
   83096:	4770      	bx	lr
   83098:	4614      	mov	r4, r2
   8309a:	4603      	mov	r3, r0
   8309c:	e7c2      	b.n	83024 <memset+0x20>
   8309e:	bf00      	nop

000830a0 <strncpy>:
   830a0:	ea40 0301 	orr.w	r3, r0, r1
   830a4:	079b      	lsls	r3, r3, #30
   830a6:	b470      	push	{r4, r5, r6}
   830a8:	d12b      	bne.n	83102 <strncpy+0x62>
   830aa:	2a03      	cmp	r2, #3
   830ac:	d929      	bls.n	83102 <strncpy+0x62>
   830ae:	460c      	mov	r4, r1
   830b0:	4603      	mov	r3, r0
   830b2:	4621      	mov	r1, r4
   830b4:	f854 6b04 	ldr.w	r6, [r4], #4
   830b8:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   830bc:	ea25 0506 	bic.w	r5, r5, r6
   830c0:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   830c4:	d105      	bne.n	830d2 <strncpy+0x32>
   830c6:	3a04      	subs	r2, #4
   830c8:	2a03      	cmp	r2, #3
   830ca:	f843 6b04 	str.w	r6, [r3], #4
   830ce:	4621      	mov	r1, r4
   830d0:	d8ef      	bhi.n	830b2 <strncpy+0x12>
   830d2:	b1a2      	cbz	r2, 830fe <strncpy+0x5e>
   830d4:	780c      	ldrb	r4, [r1, #0]
   830d6:	3a01      	subs	r2, #1
   830d8:	701c      	strb	r4, [r3, #0]
   830da:	3101      	adds	r1, #1
   830dc:	3301      	adds	r3, #1
   830de:	b13c      	cbz	r4, 830f0 <strncpy+0x50>
   830e0:	b16a      	cbz	r2, 830fe <strncpy+0x5e>
   830e2:	f811 4b01 	ldrb.w	r4, [r1], #1
   830e6:	3a01      	subs	r2, #1
   830e8:	f803 4b01 	strb.w	r4, [r3], #1
   830ec:	2c00      	cmp	r4, #0
   830ee:	d1f7      	bne.n	830e0 <strncpy+0x40>
   830f0:	b12a      	cbz	r2, 830fe <strncpy+0x5e>
   830f2:	441a      	add	r2, r3
   830f4:	2100      	movs	r1, #0
   830f6:	f803 1b01 	strb.w	r1, [r3], #1
   830fa:	4293      	cmp	r3, r2
   830fc:	d1fb      	bne.n	830f6 <strncpy+0x56>
   830fe:	bc70      	pop	{r4, r5, r6}
   83100:	4770      	bx	lr
   83102:	4603      	mov	r3, r0
   83104:	e7e5      	b.n	830d2 <strncpy+0x32>
   83106:	bf00      	nop

00083108 <register_fini>:
   83108:	4b02      	ldr	r3, [pc, #8]	; (83114 <register_fini+0xc>)
   8310a:	b113      	cbz	r3, 83112 <register_fini+0xa>
   8310c:	4802      	ldr	r0, [pc, #8]	; (83118 <register_fini+0x10>)
   8310e:	f000 b805 	b.w	8311c <atexit>
   83112:	4770      	bx	lr
   83114:	00000000 	.word	0x00000000
   83118:	00083129 	.word	0x00083129

0008311c <atexit>:
   8311c:	4601      	mov	r1, r0
   8311e:	2000      	movs	r0, #0
   83120:	4602      	mov	r2, r0
   83122:	4603      	mov	r3, r0
   83124:	f000 b816 	b.w	83154 <__register_exitproc>

00083128 <__libc_fini_array>:
   83128:	b538      	push	{r3, r4, r5, lr}
   8312a:	4b08      	ldr	r3, [pc, #32]	; (8314c <__libc_fini_array+0x24>)
   8312c:	4d08      	ldr	r5, [pc, #32]	; (83150 <__libc_fini_array+0x28>)
   8312e:	1aed      	subs	r5, r5, r3
   83130:	10ac      	asrs	r4, r5, #2
   83132:	bf18      	it	ne
   83134:	18ed      	addne	r5, r5, r3
   83136:	d005      	beq.n	83144 <__libc_fini_array+0x1c>
   83138:	3c01      	subs	r4, #1
   8313a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8313e:	4798      	blx	r3
   83140:	2c00      	cmp	r4, #0
   83142:	d1f9      	bne.n	83138 <__libc_fini_array+0x10>
   83144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83148:	f000 b896 	b.w	83278 <_fini>
   8314c:	00083284 	.word	0x00083284
   83150:	00083288 	.word	0x00083288

00083154 <__register_exitproc>:
   83154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83158:	4c25      	ldr	r4, [pc, #148]	; (831f0 <__register_exitproc+0x9c>)
   8315a:	4606      	mov	r6, r0
   8315c:	6825      	ldr	r5, [r4, #0]
   8315e:	4688      	mov	r8, r1
   83160:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   83164:	4692      	mov	sl, r2
   83166:	4699      	mov	r9, r3
   83168:	b3c4      	cbz	r4, 831dc <__register_exitproc+0x88>
   8316a:	6860      	ldr	r0, [r4, #4]
   8316c:	281f      	cmp	r0, #31
   8316e:	dc17      	bgt.n	831a0 <__register_exitproc+0x4c>
   83170:	1c41      	adds	r1, r0, #1
   83172:	b176      	cbz	r6, 83192 <__register_exitproc+0x3e>
   83174:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   83178:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   8317c:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   83180:	2201      	movs	r2, #1
   83182:	4082      	lsls	r2, r0
   83184:	4315      	orrs	r5, r2
   83186:	2e02      	cmp	r6, #2
   83188:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   8318c:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   83190:	d01e      	beq.n	831d0 <__register_exitproc+0x7c>
   83192:	1c83      	adds	r3, r0, #2
   83194:	6061      	str	r1, [r4, #4]
   83196:	2000      	movs	r0, #0
   83198:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   8319c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   831a0:	4b14      	ldr	r3, [pc, #80]	; (831f4 <__register_exitproc+0xa0>)
   831a2:	b303      	cbz	r3, 831e6 <__register_exitproc+0x92>
   831a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   831a8:	f3af 8000 	nop.w
   831ac:	4604      	mov	r4, r0
   831ae:	b1d0      	cbz	r0, 831e6 <__register_exitproc+0x92>
   831b0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   831b4:	2700      	movs	r7, #0
   831b6:	e884 0088 	stmia.w	r4, {r3, r7}
   831ba:	4638      	mov	r0, r7
   831bc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   831c0:	2101      	movs	r1, #1
   831c2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   831c6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   831ca:	2e00      	cmp	r6, #0
   831cc:	d0e1      	beq.n	83192 <__register_exitproc+0x3e>
   831ce:	e7d1      	b.n	83174 <__register_exitproc+0x20>
   831d0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   831d4:	431a      	orrs	r2, r3
   831d6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   831da:	e7da      	b.n	83192 <__register_exitproc+0x3e>
   831dc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   831e0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   831e4:	e7c1      	b.n	8316a <__register_exitproc+0x16>
   831e6:	f04f 30ff 	mov.w	r0, #4294967295
   831ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   831ee:	bf00      	nop
   831f0:	00083260 	.word	0x00083260
   831f4:	00000000 	.word	0x00000000
   831f8:	00000001 	.word	0x00000001
   831fc:	00000002 	.word	0x00000002
   83200:	00000004 	.word	0x00000004
   83204:	00000008 	.word	0x00000008
   83208:	00000010 	.word	0x00000010
   8320c:	00000020 	.word	0x00000020
   83210:	00000040 	.word	0x00000040
   83214:	00000080 	.word	0x00000080
   83218:	00000100 	.word	0x00000100
   8321c:	00000200 	.word	0x00000200
   83220:	00000400 	.word	0x00000400
   83224:	006d6f43 	.word	0x006d6f43
   83228:	75676552 	.word	0x75676552
   8322c:	6574616c 	.word	0x6574616c
   83230:	00000000 	.word	0x00000000
   83234:	09097325 	.word	0x09097325
   83238:	25096325 	.word	0x25096325
   8323c:	75250975 	.word	0x75250975
   83240:	0d752509 	.word	0x0d752509
   83244:	0000000a 	.word	0x0000000a
   83248:	454c4449 	.word	0x454c4449
   8324c:	00000000 	.word	0x00000000
   83250:	00000a0d 	.word	0x00000a0d
   83254:	20726d54 	.word	0x20726d54
   83258:	00637653 	.word	0x00637653
   8325c:	00000043 	.word	0x00000043

00083260 <_global_impure_ptr>:
   83260:	20070140                                @.. 

00083264 <_init>:
   83264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83266:	bf00      	nop
   83268:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8326a:	bc08      	pop	{r3}
   8326c:	469e      	mov	lr, r3
   8326e:	4770      	bx	lr

00083270 <__init_array_start>:
   83270:	00083109 	.word	0x00083109

00083274 <__frame_dummy_init_array_entry>:
   83274:	00080119                                ....

00083278 <_fini>:
   83278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8327a:	bf00      	nop
   8327c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8327e:	bc08      	pop	{r3}
   83280:	469e      	mov	lr, r3
   83282:	4770      	bx	lr

00083284 <__fini_array_start>:
   83284:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007013c 	.word	0x2007013c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <p_str.8973>:
2007012c:	200705ac                                ... 

20070130 <uxCriticalNesting>:
20070130:	aaaaaaaa                                ....

20070134 <xFreeBytesRemaining>:
20070134:	00008000                                ....

20070138 <xNextTaskUnblockTime>:
20070138:	0000ffff                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	0008325c 00000000 00000000 00000000     \2..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...
