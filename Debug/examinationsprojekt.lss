
examinationsprojekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000373c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000578  20070000  0008373c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00008340  20070578  00083cb8  00010578  2**3
                  ALLOC
  3 .stack        00002000  200788b8  0008bff8  00010578  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010578  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000105a1  2**0
                  CONTENTS, READONLY
  6 .debug_info   00014454  00000000  00000000  000105fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035d2  00000000  00000000  00024a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006e11  00000000  00000000  00028022  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bf8  00000000  00000000  0002ee33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b80  00000000  00000000  0002fa2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b14c  00000000  00000000  000305ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000141e9  00000000  00000000  0004b6f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00068d82  00000000  00000000  0005f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d60  00000000  00000000  000c8664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007a8b8 	.word	0x2007a8b8
   80004:	000823fd 	.word	0x000823fd
   80008:	000823f9 	.word	0x000823f9
   8000c:	000823f9 	.word	0x000823f9
   80010:	000823f9 	.word	0x000823f9
   80014:	000823f9 	.word	0x000823f9
   80018:	000823f9 	.word	0x000823f9
	...
   8002c:	000809e9 	.word	0x000809e9
   80030:	000823f9 	.word	0x000823f9
   80034:	00000000 	.word	0x00000000
   80038:	00080a65 	.word	0x00080a65
   8003c:	00080aa1 	.word	0x00080aa1
   80040:	000823f9 	.word	0x000823f9
   80044:	000823f9 	.word	0x000823f9
   80048:	000823f9 	.word	0x000823f9
   8004c:	000823f9 	.word	0x000823f9
   80050:	000823f9 	.word	0x000823f9
   80054:	000823f9 	.word	0x000823f9
   80058:	000823f9 	.word	0x000823f9
   8005c:	000823f9 	.word	0x000823f9
   80060:	000823f9 	.word	0x000823f9
   80064:	000823f9 	.word	0x000823f9
   80068:	00000000 	.word	0x00000000
   8006c:	00082269 	.word	0x00082269
   80070:	0008227d 	.word	0x0008227d
   80074:	00082291 	.word	0x00082291
   80078:	000822a5 	.word	0x000822a5
	...
   80084:	000823f9 	.word	0x000823f9
   80088:	000823f9 	.word	0x000823f9
   8008c:	000823f9 	.word	0x000823f9
   80090:	000823f9 	.word	0x000823f9
   80094:	000823f9 	.word	0x000823f9
   80098:	000823f9 	.word	0x000823f9
   8009c:	000823f9 	.word	0x000823f9
   800a0:	000823f9 	.word	0x000823f9
   800a4:	00000000 	.word	0x00000000
   800a8:	000823f9 	.word	0x000823f9
   800ac:	000823f9 	.word	0x000823f9
   800b0:	000823f9 	.word	0x000823f9
   800b4:	000823f9 	.word	0x000823f9
   800b8:	000823f9 	.word	0x000823f9
   800bc:	000823f9 	.word	0x000823f9
   800c0:	000823f9 	.word	0x000823f9
   800c4:	000823f9 	.word	0x000823f9
   800c8:	000823f9 	.word	0x000823f9
   800cc:	000823f9 	.word	0x000823f9
   800d0:	000823f9 	.word	0x000823f9
   800d4:	000823f9 	.word	0x000823f9
   800d8:	000823f9 	.word	0x000823f9
   800dc:	000823f9 	.word	0x000823f9
   800e0:	000823f9 	.word	0x000823f9
   800e4:	000823f9 	.word	0x000823f9
   800e8:	000823f9 	.word	0x000823f9
   800ec:	000823f9 	.word	0x000823f9
   800f0:	000823f9 	.word	0x000823f9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070578 	.word	0x20070578
   80110:	00000000 	.word	0x00000000
   80114:	0008373c 	.word	0x0008373c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	0008373c 	.word	0x0008373c
   80144:	2007057c 	.word	0x2007057c
   80148:	0008373c 	.word	0x0008373c
   8014c:	00000000 	.word	0x00000000

00080150 <adc_config>:

#include <asf.h>
#include "adc_func.h"

void adc_config(void)
{
   80150:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80152:	2025      	movs	r0, #37	; 0x25
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <adc_config+0x40>)
   80156:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);
   80158:	4c0e      	ldr	r4, [pc, #56]	; (80194 <adc_config+0x44>)
   8015a:	4620      	mov	r0, r4
   8015c:	490e      	ldr	r1, [pc, #56]	; (80198 <adc_config+0x48>)
   8015e:	4a0f      	ldr	r2, [pc, #60]	; (8019c <adc_config+0x4c>)
   80160:	2300      	movs	r3, #0
   80162:	4d0f      	ldr	r5, [pc, #60]	; (801a0 <adc_config+0x50>)
   80164:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   80166:	4620      	mov	r0, r4
   80168:	2100      	movs	r1, #0
   8016a:	460a      	mov	r2, r1
   8016c:	460b      	mov	r3, r1
   8016e:	4d0d      	ldr	r5, [pc, #52]	; (801a4 <adc_config+0x54>)
   80170:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES);
   80172:	4620      	mov	r0, r4
   80174:	2110      	movs	r1, #16
   80176:	4b0c      	ldr	r3, [pc, #48]	; (801a8 <adc_config+0x58>)
   80178:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);
   8017a:	4620      	mov	r0, r4
   8017c:	210a      	movs	r1, #10
   8017e:	4b0b      	ldr	r3, [pc, #44]	; (801ac <adc_config+0x5c>)
   80180:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   80182:	4620      	mov	r0, r4
   80184:	2100      	movs	r1, #0
   80186:	460a      	mov	r2, r1
   80188:	4b09      	ldr	r3, [pc, #36]	; (801b0 <adc_config+0x60>)
   8018a:	4798      	blx	r3
   8018c:	bd38      	pop	{r3, r4, r5, pc}
   8018e:	bf00      	nop
   80190:	000823a5 	.word	0x000823a5
   80194:	400c0000 	.word	0x400c0000
   80198:	0a037a00 	.word	0x0a037a00
   8019c:	01312d00 	.word	0x01312d00
   801a0:	00080245 	.word	0x00080245
   801a4:	00080299 	.word	0x00080299
   801a8:	00080279 	.word	0x00080279
   801ac:	000802c1 	.word	0x000802c1
   801b0:	00080289 	.word	0x00080289

000801b4 <task_idle>:
 */ 
#include <asf.h>
#include "task_idle.h"

void task_idle(void *pvParameters)
{
   801b4:	b570      	push	{r4, r5, r6, lr}
   801b6:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 50;
	
	xLastWakeTime = xTaskGetTickCount();
   801b8:	4b05      	ldr	r3, [pc, #20]	; (801d0 <task_idle+0x1c>)
   801ba:	4798      	blx	r3
   801bc:	ac02      	add	r4, sp, #8
   801be:	f824 0d02 	strh.w	r0, [r4, #-2]!
	while(1){
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   801c2:	2632      	movs	r6, #50	; 0x32
   801c4:	4d03      	ldr	r5, [pc, #12]	; (801d4 <task_idle+0x20>)
   801c6:	4620      	mov	r0, r4
   801c8:	4631      	mov	r1, r6
   801ca:	47a8      	blx	r5
	}
   801cc:	e7fb      	b.n	801c6 <task_idle+0x12>
   801ce:	bf00      	nop
   801d0:	000814a9 	.word	0x000814a9
   801d4:	000816f9 	.word	0x000816f9

000801d8 <matlab_recieve_values>:
#include "uart_recieve_values.h"
#include "io_uart.h"
#define BUF_LEN 16

void matlab_recieve_values(void)
{
   801d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801dc:	b084      	sub	sp, #16
	char buffer[BUF_LEN] = {0};
   801de:	2400      	movs	r4, #0
   801e0:	9400      	str	r4, [sp, #0]
   801e2:	9401      	str	r4, [sp, #4]
   801e4:	9402      	str	r4, [sp, #8]
   801e6:	9403      	str	r4, [sp, #12]
	
	for (int i = 0; i < CONV_ARR_LENGTH; i++)
	{
		uart_receive_string(buffer, BUF_LEN);
   801e8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80240 <matlab_recieve_values+0x68>
		*(p_adc_distance + i) = atoi(buffer);
   801ec:	4f0f      	ldr	r7, [pc, #60]	; (8022c <matlab_recieve_values+0x54>)
   801ee:	4e10      	ldr	r6, [pc, #64]	; (80230 <matlab_recieve_values+0x58>)
{
	char buffer[BUF_LEN] = {0};
	
	for (int i = 0; i < CONV_ARR_LENGTH; i++)
	{
		uart_receive_string(buffer, BUF_LEN);
   801f0:	4668      	mov	r0, sp
   801f2:	2110      	movs	r1, #16
   801f4:	47c0      	blx	r8
		*(p_adc_distance + i) = atoi(buffer);
   801f6:	683d      	ldr	r5, [r7, #0]
   801f8:	4668      	mov	r0, sp
   801fa:	47b0      	blx	r6
   801fc:	5328      	strh	r0, [r5, r4]
   801fe:	3402      	adds	r4, #2

void matlab_recieve_values(void)
{
	char buffer[BUF_LEN] = {0};
	
	for (int i = 0; i < CONV_ARR_LENGTH; i++)
   80200:	2cc8      	cmp	r4, #200	; 0xc8
   80202:	d1f5      	bne.n	801f0 <matlab_recieve_values+0x18>
   80204:	2400      	movs	r4, #0
	}
	
	/* send back the array to make sure its alright */
	for (int i = 0; i < CONV_ARR_LENGTH; i++)
	{
		itoa(*(p_adc_distance + i), buffer, 10);
   80206:	4f09      	ldr	r7, [pc, #36]	; (8022c <matlab_recieve_values+0x54>)
   80208:	4e0a      	ldr	r6, [pc, #40]	; (80234 <matlab_recieve_values+0x5c>)
		uart_send_string(buffer);
   8020a:	4d0b      	ldr	r5, [pc, #44]	; (80238 <matlab_recieve_values+0x60>)
	}
	
	/* send back the array to make sure its alright */
	for (int i = 0; i < CONV_ARR_LENGTH; i++)
	{
		itoa(*(p_adc_distance + i), buffer, 10);
   8020c:	683b      	ldr	r3, [r7, #0]
   8020e:	5b18      	ldrh	r0, [r3, r4]
   80210:	4669      	mov	r1, sp
   80212:	220a      	movs	r2, #10
   80214:	47b0      	blx	r6
		uart_send_string(buffer);
   80216:	4668      	mov	r0, sp
   80218:	47a8      	blx	r5
		uart_send_newline();
   8021a:	4b08      	ldr	r3, [pc, #32]	; (8023c <matlab_recieve_values+0x64>)
   8021c:	4798      	blx	r3
   8021e:	3402      	adds	r4, #2
		uart_receive_string(buffer, BUF_LEN);
		*(p_adc_distance + i) = atoi(buffer);
	}
	
	/* send back the array to make sure its alright */
	for (int i = 0; i < CONV_ARR_LENGTH; i++)
   80220:	2cc8      	cmp	r4, #200	; 0xc8
   80222:	d1f3      	bne.n	8020c <matlab_recieve_values+0x34>
	{
		itoa(*(p_adc_distance + i), buffer, 10);
		uart_send_string(buffer);
		uart_send_newline();
	}
}
   80224:	b004      	add	sp, #16
   80226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8022a:	bf00      	nop
   8022c:	2007012c 	.word	0x2007012c
   80230:	00083059 	.word	0x00083059
   80234:	000830e1 	.word	0x000830e1
   80238:	000804e1 	.word	0x000804e1
   8023c:	0008050d 	.word	0x0008050d
   80240:	00080529 	.word	0x00080529

00080244 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80244:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80246:	2401      	movs	r4, #1
   80248:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   8024a:	2400      	movs	r4, #0
   8024c:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8024e:	f240 2502 	movw	r5, #514	; 0x202
   80252:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80256:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8025a:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8025e:	6845      	ldr	r5, [r0, #4]
   80260:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80262:	0052      	lsls	r2, r2, #1
   80264:	fbb1 f1f2 	udiv	r1, r1, r2
   80268:	1e4a      	subs	r2, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8026a:	0212      	lsls	r2, r2, #8
   8026c:	b292      	uxth	r2, r2
   8026e:	4313      	orrs	r3, r2
   80270:	6043      	str	r3, [r0, #4]
	return 0;
}
   80272:	4620      	mov	r0, r4
   80274:	bc30      	pop	{r4, r5}
   80276:	4770      	bx	lr

00080278 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80278:	6843      	ldr	r3, [r0, #4]
   8027a:	f023 0310 	bic.w	r3, r3, #16
   8027e:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   80280:	6843      	ldr	r3, [r0, #4]
   80282:	4319      	orrs	r1, r3
   80284:	6041      	str	r1, [r0, #4]
   80286:	4770      	bx	lr

00080288 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80288:	6843      	ldr	r3, [r0, #4]
   8028a:	4319      	orrs	r1, r3
   8028c:	01d2      	lsls	r2, r2, #7
   8028e:	b2d2      	uxtb	r2, r2
   80290:	4311      	orrs	r1, r2
   80292:	6041      	str	r1, [r0, #4]
   80294:	4770      	bx	lr
   80296:	bf00      	nop

00080298 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80298:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8029a:	6844      	ldr	r4, [r0, #4]
   8029c:	4322      	orrs	r2, r4
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   8029e:	0609      	lsls	r1, r1, #24
   802a0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
   802a4:	430a      	orrs	r2, r1
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   802a6:	071b      	lsls	r3, r3, #28
   802a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   802ac:	4313      	orrs	r3, r2
   802ae:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   802b0:	f85d 4b04 	ldr.w	r4, [sp], #4
   802b4:	4770      	bx	lr
   802b6:	bf00      	nop

000802b8 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   802b8:	2302      	movs	r3, #2
   802ba:	6003      	str	r3, [r0, #0]
   802bc:	4770      	bx	lr
   802be:	bf00      	nop

000802c0 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   802c0:	2301      	movs	r3, #1
   802c2:	408b      	lsls	r3, r1
   802c4:	6103      	str	r3, [r0, #16]
   802c6:	4770      	bx	lr

000802c8 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   802c8:	6a00      	ldr	r0, [r0, #32]
}
   802ca:	4770      	bx	lr

000802cc <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   802cc:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   802ce:	4770      	bx	lr

000802d0 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   802d0:	b4f0      	push	{r4, r5, r6, r7}
   802d2:	b08c      	sub	sp, #48	; 0x30
   802d4:	4607      	mov	r7, r0
   802d6:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   802d8:	ac01      	add	r4, sp, #4
   802da:	4d11      	ldr	r5, [pc, #68]	; (80320 <pwm_clocks_generate+0x50>)
   802dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   802de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   802e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   802e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   802e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   802e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   802ec:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   802ee:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   802f0:	f852 3b04 	ldr.w	r3, [r2], #4
   802f4:	fbb6 f3f3 	udiv	r3, r6, r3
   802f8:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80300:	d905      	bls.n	8030e <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
   80302:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80304:	280b      	cmp	r0, #11
   80306:	d1f3      	bne.n	802f0 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   80308:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8030c:	e005      	b.n	8031a <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   8030e:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
   80310:	bf94      	ite	ls
   80312:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
   80316:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
   8031a:	b00c      	add	sp, #48	; 0x30
   8031c:	bcf0      	pop	{r4, r5, r6, r7}
   8031e:	4770      	bx	lr
   80320:	00083578 	.word	0x00083578

00080324 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80324:	b570      	push	{r4, r5, r6, lr}
   80326:	4606      	mov	r6, r0
   80328:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8032a:	6808      	ldr	r0, [r1, #0]
   8032c:	b140      	cbz	r0, 80340 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8032e:	6889      	ldr	r1, [r1, #8]
   80330:	4b0e      	ldr	r3, [pc, #56]	; (8036c <pwm_init+0x48>)
   80332:	4798      	blx	r3
   80334:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80336:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8033a:	4298      	cmp	r0, r3
   8033c:	d101      	bne.n	80342 <pwm_init+0x1e>
   8033e:	e00e      	b.n	8035e <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80340:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80342:	6860      	ldr	r0, [r4, #4]
   80344:	b140      	cbz	r0, 80358 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80346:	68a1      	ldr	r1, [r4, #8]
   80348:	4b08      	ldr	r3, [pc, #32]	; (8036c <pwm_init+0x48>)
   8034a:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   8034c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80350:	4298      	cmp	r0, r3
   80352:	d007      	beq.n	80364 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
   80354:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80358:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   8035a:	2000      	movs	r0, #0
   8035c:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   8035e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80362:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   80364:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
   80368:	bd70      	pop	{r4, r5, r6, pc}
   8036a:	bf00      	nop
   8036c:	000802d1 	.word	0x000802d1

00080370 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80370:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80372:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80374:	8a8a      	ldrh	r2, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80376:	684c      	ldr	r4, [r1, #4]
   80378:	f004 040f 	and.w	r4, r4, #15
   8037c:	4322      	orrs	r2, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   8037e:	890c      	ldrh	r4, [r1, #8]
   80380:	4322      	orrs	r2, r4
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80382:	7a8c      	ldrb	r4, [r1, #10]
   80384:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
   80388:	7d8c      	ldrb	r4, [r1, #22]
   8038a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   8038e:	7dcc      	ldrb	r4, [r1, #23]
   80390:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80394:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80396:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
   8039a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   8039e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   803a2:	68ca      	ldr	r2, [r1, #12]
   803a4:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   803a8:	690a      	ldr	r2, [r1, #16]
   803aa:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   803ae:	7d8a      	ldrb	r2, [r1, #22]
   803b0:	b13a      	cbz	r2, 803c2 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   803b2:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   803b4:	8b4a      	ldrh	r2, [r1, #26]
   803b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   803ba:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   803be:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   803c2:	6c84      	ldr	r4, [r0, #72]	; 0x48
   803c4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   803c8:	409a      	lsls	r2, r3
   803ca:	43d2      	mvns	r2, r2
   803cc:	ea02 0504 	and.w	r5, r2, r4
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   803d0:	7fcc      	ldrb	r4, [r1, #31]
   803d2:	fa04 f603 	lsl.w	r6, r4, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   803d6:	7f8c      	ldrb	r4, [r1, #30]
   803d8:	409c      	lsls	r4, r3
   803da:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   803de:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   803e0:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   803e2:	6c44      	ldr	r4, [r0, #68]	; 0x44
   803e4:	4014      	ands	r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   803e6:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
   803ea:	fa02 f503 	lsl.w	r5, r2, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   803ee:	f891 2020 	ldrb.w	r2, [r1, #32]
   803f2:	409a      	lsls	r2, r3
   803f4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   803f8:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   803fa:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   803fc:	2201      	movs	r2, #1
   803fe:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   80400:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80404:	b11c      	cbz	r4, 8040e <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
   80406:	6a04      	ldr	r4, [r0, #32]
   80408:	4314      	orrs	r4, r2
   8040a:	6204      	str	r4, [r0, #32]
   8040c:	e003      	b.n	80416 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   8040e:	6a04      	ldr	r4, [r0, #32]
   80410:	ea24 0402 	bic.w	r4, r4, r2
   80414:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80416:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8041a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8041c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8041e:	bf0c      	ite	eq
   80420:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80422:	4394      	bicne	r4, r2
   80424:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80426:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8042a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8042c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8042e:	bf0c      	ite	eq
   80430:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80434:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80438:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   8043a:	2b03      	cmp	r3, #3
   8043c:	d80b      	bhi.n	80456 <pwm_channel_init+0xe6>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8043e:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80440:	00dd      	lsls	r5, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80442:	22ff      	movs	r2, #255	; 0xff
   80444:	40aa      	lsls	r2, r5
   80446:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8044a:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   8044e:	40ab      	lsls	r3, r5
   80450:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80452:	66c3      	str	r3, [r0, #108]	; 0x6c
   80454:	e00c      	b.n	80470 <pwm_channel_init+0x100>
	} else {
		ch_num -= 4;
   80456:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80458:	6f02      	ldr	r2, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8045a:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   8045c:	24ff      	movs	r4, #255	; 0xff
   8045e:	409c      	lsls	r4, r3
   80460:	ea22 0404 	bic.w	r4, r2, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80464:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   80468:	fa02 f303 	lsl.w	r3, r2, r3
   8046c:	4323      	orrs	r3, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8046e:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   80470:	2000      	movs	r0, #0
   80472:	bc70      	pop	{r4, r5, r6}
   80474:	4770      	bx	lr
   80476:	bf00      	nop

00080478 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80478:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   8047a:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   8047c:	690b      	ldr	r3, [r1, #16]
   8047e:	4293      	cmp	r3, r2
   80480:	d306      	bcc.n	80490 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80482:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80484:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80488:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   8048c:	2000      	movs	r0, #0
   8048e:	e001      	b.n	80494 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80490:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80494:	f85d 4b04 	ldr.w	r4, [sp], #4
   80498:	4770      	bx	lr
   8049a:	bf00      	nop

0008049c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   8049c:	2301      	movs	r3, #1
   8049e:	408b      	lsls	r3, r1
   804a0:	6043      	str	r3, [r0, #4]
   804a2:	4770      	bx	lr

000804a4 <uart_config>:
void uart_config(uint32_t baud)
{
	/* reset and disable receiver & transmitter */
	UART_CR = UART_CR_RSTRX | UART_CR_RSTTX	| UART_CR_RXDIS | UART_CR_TXDIS;
	/* configure baud rate */
	UART_BRGR = (MCK >> 4) / baud;
   804a4:	4b0c      	ldr	r3, [pc, #48]	; (804d8 <uart_config+0x34>)
   804a6:	fbb3 f0f0 	udiv	r0, r3, r0
   804aa:	4b0c      	ldr	r3, [pc, #48]	; (804dc <uart_config+0x38>)
   804ac:	6018      	str	r0, [r3, #0]
	/* configure mode */
	UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;
   804ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
   804b2:	3b1c      	subs	r3, #28
   804b4:	601a      	str	r2, [r3, #0]
	/* enable receiver and transmitter */
	UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   804b6:	2250      	movs	r2, #80	; 0x50
   804b8:	3b04      	subs	r3, #4
   804ba:	601a      	str	r2, [r3, #0]
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   804bc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   804c0:	f44f 7280 	mov.w	r2, #256	; 0x100
   804c4:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   804c6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   804c8:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   804ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   804ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   804d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   804d4:	671a      	str	r2, [r3, #112]	; 0x70
   804d6:	4770      	bx	lr
   804d8:	00501bd0 	.word	0x00501bd0
   804dc:	400e0820 	.word	0x400e0820

000804e0 <uart_send_string>:
/*
 * Send null-terminated string 
 */
void uart_send_string(uint8_t *str) 
{
	while(*str != NULL){
   804e0:	7802      	ldrb	r2, [r0, #0]
   804e2:	b172      	cbz	r2, 80502 <uart_send_string+0x22>

/*
 * Send null-terminated string 
 */
void uart_send_string(uint8_t *str) 
{
   804e4:	b410      	push	{r4}
 * Transmitter Ready?
 * Return 1 if "Transmitter Ready" flag is set, otherwise 0.
 */
int uart_transmitter_ready(void)
{
	return (UART_SR & UART_SR_TXRDY);
   804e6:	4c07      	ldr	r4, [pc, #28]	; (80504 <uart_send_string+0x24>)
 * Send character
 * Write character to Transmit Holding Register.
 */
void uart_send_char(uint8_t chr)
{
	UART_THR = chr;
   804e8:	4907      	ldr	r1, [pc, #28]	; (80508 <uart_send_string+0x28>)
 * Transmitter Ready?
 * Return 1 if "Transmitter Ready" flag is set, otherwise 0.
 */
int uart_transmitter_ready(void)
{
	return (UART_SR & UART_SR_TXRDY);
   804ea:	6823      	ldr	r3, [r4, #0]
   804ec:	f003 0302 	and.w	r3, r3, #2
 * Send null-terminated string 
 */
void uart_send_string(uint8_t *str) 
{
	while(*str != NULL){
		while(!uart_transmitter_ready());
   804f0:	2b00      	cmp	r3, #0
   804f2:	d0fd      	beq.n	804f0 <uart_send_string+0x10>
 * Send character
 * Write character to Transmit Holding Register.
 */
void uart_send_char(uint8_t chr)
{
	UART_THR = chr;
   804f4:	600a      	str	r2, [r1, #0]
/*
 * Send null-terminated string 
 */
void uart_send_string(uint8_t *str) 
{
	while(*str != NULL){
   804f6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   804fa:	2a00      	cmp	r2, #0
   804fc:	d1f5      	bne.n	804ea <uart_send_string+0xa>
		while(!uart_transmitter_ready());
		uart_send_char(*str);
		str++;
	}
}
   804fe:	f85d 4b04 	ldr.w	r4, [sp], #4
   80502:	4770      	bx	lr
   80504:	400e0814 	.word	0x400e0814
   80508:	400e081c 	.word	0x400e081c

0008050c <uart_send_newline>:
 * Transmitter Ready?
 * Return 1 if "Transmitter Ready" flag is set, otherwise 0.
 */
int uart_transmitter_ready(void)
{
	return (UART_SR & UART_SR_TXRDY);
   8050c:	4b04      	ldr	r3, [pc, #16]	; (80520 <uart_send_newline+0x14>)
   8050e:	681b      	ldr	r3, [r3, #0]
   80510:	f003 0302 	and.w	r3, r3, #2

/*
 * Send newline: ASCII value 10
 */
void uart_send_newline(void){
	while(!uart_transmitter_ready());
   80514:	2b00      	cmp	r3, #0
   80516:	d0fd      	beq.n	80514 <uart_send_newline+0x8>
 * Send character
 * Write character to Transmit Holding Register.
 */
void uart_send_char(uint8_t chr)
{
	UART_THR = chr;
   80518:	220a      	movs	r2, #10
   8051a:	4b02      	ldr	r3, [pc, #8]	; (80524 <uart_send_newline+0x18>)
   8051c:	601a      	str	r2, [r3, #0]
   8051e:	4770      	bx	lr
   80520:	400e0814 	.word	0x400e0814
   80524:	400e081c 	.word	0x400e081c

00080528 <uart_receive_string>:
 * String length will not exceed max value.
 * Stored string is null-terminated
 */
void uart_receive_string(char *buffer, int max){
	int counter = 0;
	while(*buffer != 10 && counter < max){
   80528:	7803      	ldrb	r3, [r0, #0]
   8052a:	2b0a      	cmp	r3, #10
   8052c:	d01a      	beq.n	80564 <uart_receive_string+0x3c>
   8052e:	2900      	cmp	r1, #0
   80530:	dd18      	ble.n	80564 <uart_receive_string+0x3c>
 * Receive a string and store in buffer. 
 * The sender must finish the string with a newline
 * String length will not exceed max value.
 * Stored string is null-terminated
 */
void uart_receive_string(char *buffer, int max){
   80532:	b410      	push	{r4}
   80534:	1842      	adds	r2, r0, r1
 * Receiver Ready?
 * Return 1 if "Receiver Ready" flag is set, otherwise 0.
 */
int uart_receiver_ready(void)
{
	return (UART_SR & UART_SR_RXRDY);
   80536:	4c0d      	ldr	r4, [pc, #52]	; (8056c <uart_receive_string+0x44>)
 * Receive character
 * Read character from Receiver Holding Register.
 */
char uart_receive_char(void)
{
	char chr = UART_RHR;
   80538:	490d      	ldr	r1, [pc, #52]	; (80570 <uart_receive_string+0x48>)
 * Receiver Ready?
 * Return 1 if "Receiver Ready" flag is set, otherwise 0.
 */
int uart_receiver_ready(void)
{
	return (UART_SR & UART_SR_RXRDY);
   8053a:	6823      	ldr	r3, [r4, #0]
   8053c:	f003 0301 	and.w	r3, r3, #1
 * Stored string is null-terminated
 */
void uart_receive_string(char *buffer, int max){
	int counter = 0;
	while(*buffer != 10 && counter < max){
		while(!uart_receiver_ready());
   80540:	2b00      	cmp	r3, #0
   80542:	d0fd      	beq.n	80540 <uart_receive_string+0x18>
 * Receive character
 * Read character from Receiver Holding Register.
 */
char uart_receive_char(void)
{
	char chr = UART_RHR;
   80544:	780b      	ldrb	r3, [r1, #0]
 */
void uart_receive_string(char *buffer, int max){
	int counter = 0;
	while(*buffer != 10 && counter < max){
		while(!uart_receiver_ready());
		*buffer = uart_receive_char();
   80546:	7003      	strb	r3, [r0, #0]
		
		if (*buffer != 10)
   80548:	2b0a      	cmp	r3, #10
   8054a:	d006      	beq.n	8055a <uart_receive_string+0x32>
 * String length will not exceed max value.
 * Stored string is null-terminated
 */
void uart_receive_string(char *buffer, int max){
	int counter = 0;
	while(*buffer != 10 && counter < max){
   8054c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   80550:	2b0a      	cmp	r3, #10
   80552:	d002      	beq.n	8055a <uart_receive_string+0x32>
   80554:	4290      	cmp	r0, r2
   80556:	d1f0      	bne.n	8053a <uart_receive_string+0x12>
		while(!uart_receiver_ready());
		*buffer = uart_receive_char();
		
		if (*buffer != 10)
		{
			buffer++;
   80558:	4610      	mov	r0, r2
		}
		counter++;
	}
	*buffer = 0;
   8055a:	2300      	movs	r3, #0
   8055c:	7003      	strb	r3, [r0, #0]
   8055e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80562:	4770      	bx	lr
		{
			buffer++;
		}
		counter++;
	}
	*buffer = 0;
   80564:	2300      	movs	r3, #0
   80566:	7003      	strb	r3, [r0, #0]
   80568:	4770      	bx	lr
   8056a:	bf00      	nop
   8056c:	400e0814 	.word	0x400e0814
   80570:	400e0818 	.word	0x400e0818

00080574 <main>:
uint16_t dac_value = 0;
uint16_t adc_distance[CONV_ARR_LENGTH] = {0};
uint16_t *p_adc_distance = adc_distance;

int main (void)
{
   80574:	b570      	push	{r4, r5, r6, lr}
   80576:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   80578:	4b2b      	ldr	r3, [pc, #172]	; (80628 <main+0xb4>)
   8057a:	4798      	blx	r3
	board_init();
   8057c:	4b2b      	ldr	r3, [pc, #172]	; (8062c <main+0xb8>)
   8057e:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80580:	200b      	movs	r0, #11
   80582:	4c2b      	ldr	r4, [pc, #172]	; (80630 <main+0xbc>)
   80584:	47a0      	blx	r4
   80586:	200c      	movs	r0, #12
   80588:	47a0      	blx	r4
   8058a:	200d      	movs	r0, #13
   8058c:	47a0      	blx	r4
   8058e:	200e      	movs	r0, #14
   80590:	47a0      	blx	r4
	ioport_init();
	
	motorshield_init();	
   80592:	4b28      	ldr	r3, [pc, #160]	; (80634 <main+0xc0>)
   80594:	4798      	blx	r3
	adc_config();
   80596:	4b28      	ldr	r3, [pc, #160]	; (80638 <main+0xc4>)
   80598:	4798      	blx	r3
	uart_config(115200);
   8059a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
   8059e:	4b27      	ldr	r3, [pc, #156]	; (8063c <main+0xc8>)
   805a0:	4798      	blx	r3
	pwm_config();
   805a2:	4b27      	ldr	r3, [pc, #156]	; (80640 <main+0xcc>)
   805a4:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   805a6:	4b27      	ldr	r3, [pc, #156]	; (80644 <main+0xd0>)
   805a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   805ac:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   805b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   805b6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	
	ioport_set_pin_dir(PIO_PB26_IDX, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(PIO_PB14_IDX, IOPORT_DIR_OUTPUT);
	
	matlab_recieve_values();
   805bc:	4b22      	ldr	r3, [pc, #136]	; (80648 <main+0xd4>)
   805be:	4798      	blx	r3
	
	vSemaphoreCreateBinary(sync);
   805c0:	2001      	movs	r0, #1
   805c2:	2100      	movs	r1, #0
   805c4:	2203      	movs	r2, #3
   805c6:	4b21      	ldr	r3, [pc, #132]	; (8064c <main+0xd8>)
   805c8:	4798      	blx	r3
   805ca:	4b21      	ldr	r3, [pc, #132]	; (80650 <main+0xdc>)
   805cc:	6018      	str	r0, [r3, #0]
   805ce:	b120      	cbz	r0, 805da <main+0x66>
   805d0:	2100      	movs	r1, #0
   805d2:	460a      	mov	r2, r1
   805d4:	460b      	mov	r3, r1
   805d6:	4c1f      	ldr	r4, [pc, #124]	; (80654 <main+0xe0>)
   805d8:	47a0      	blx	r4
	xTaskCreate(task_idle, (const signed char * const) "Idle", TASK_COM_STACKSIZE, NULL, 1, NULL);	
   805da:	2301      	movs	r3, #1
   805dc:	9300      	str	r3, [sp, #0]
   805de:	2400      	movs	r4, #0
   805e0:	9401      	str	r4, [sp, #4]
   805e2:	9402      	str	r4, [sp, #8]
   805e4:	9403      	str	r4, [sp, #12]
   805e6:	481c      	ldr	r0, [pc, #112]	; (80658 <main+0xe4>)
   805e8:	491c      	ldr	r1, [pc, #112]	; (8065c <main+0xe8>)
   805ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   805ee:	4623      	mov	r3, r4
   805f0:	4d1b      	ldr	r5, [pc, #108]	; (80660 <main+0xec>)
   805f2:	47a8      	blx	r5
	xTaskCreate(task_com, (const signed char * const) "Com", TASK_COM_STACKSIZE, NULL, 2, NULL);	
   805f4:	2602      	movs	r6, #2
   805f6:	9600      	str	r6, [sp, #0]
   805f8:	9401      	str	r4, [sp, #4]
   805fa:	9402      	str	r4, [sp, #8]
   805fc:	9403      	str	r4, [sp, #12]
   805fe:	4819      	ldr	r0, [pc, #100]	; (80664 <main+0xf0>)
   80600:	4919      	ldr	r1, [pc, #100]	; (80668 <main+0xf4>)
   80602:	f44f 7200 	mov.w	r2, #512	; 0x200
   80606:	4623      	mov	r3, r4
   80608:	47a8      	blx	r5
	xTaskCreate(task_regulate, (const signed char * const) "Regulate", TASK_COM_STACKSIZE,NULL,2,NULL);
   8060a:	9600      	str	r6, [sp, #0]
   8060c:	9401      	str	r4, [sp, #4]
   8060e:	9402      	str	r4, [sp, #8]
   80610:	9403      	str	r4, [sp, #12]
   80612:	4816      	ldr	r0, [pc, #88]	; (8066c <main+0xf8>)
   80614:	4916      	ldr	r1, [pc, #88]	; (80670 <main+0xfc>)
   80616:	f44f 7200 	mov.w	r2, #512	; 0x200
   8061a:	4623      	mov	r3, r4
   8061c:	47a8      	blx	r5
	
	vTaskStartScheduler();	
   8061e:	4b15      	ldr	r3, [pc, #84]	; (80674 <main+0x100>)
   80620:	4798      	blx	r3
}
   80622:	4620      	mov	r0, r4
   80624:	b004      	add	sp, #16
   80626:	bd70      	pop	{r4, r5, r6, pc}
   80628:	00081f2d 	.word	0x00081f2d
   8062c:	00081f91 	.word	0x00081f91
   80630:	000823a5 	.word	0x000823a5
   80634:	00080679 	.word	0x00080679
   80638:	00080151 	.word	0x00080151
   8063c:	000804a5 	.word	0x000804a5
   80640:	000806c5 	.word	0x000806c5
   80644:	400e1000 	.word	0x400e1000
   80648:	000801d9 	.word	0x000801d9
   8064c:	00080e0d 	.word	0x00080e0d
   80650:	20070130 	.word	0x20070130
   80654:	00080e65 	.word	0x00080e65
   80658:	000801b5 	.word	0x000801b5
   8065c:	000835a4 	.word	0x000835a4
   80660:	00081229 	.word	0x00081229
   80664:	0008074d 	.word	0x0008074d
   80668:	000835ac 	.word	0x000835ac
   8066c:	000807e5 	.word	0x000807e5
   80670:	000835b0 	.word	0x000835b0
   80674:	0008142d 	.word	0x0008142d

00080678 <motorshield_init>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80678:	4b09      	ldr	r3, [pc, #36]	; (806a0 <motorshield_init+0x28>)
   8067a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8067e:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80680:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80684:	4a07      	ldr	r2, [pc, #28]	; (806a4 <motorshield_init+0x2c>)
   80686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   8068a:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8068c:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80690:	6351      	str	r1, [r2, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80692:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80696:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80698:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8069c:	631a      	str	r2, [r3, #48]	; 0x30
   8069e:	4770      	bx	lr
   806a0:	400e1000 	.word	0x400e1000
   806a4:	400e1200 	.word	0x400e1200

000806a8 <pwm_set_duty_cycle>:
		pwm_set_duty_cycle(0);		
	}
}

void pwm_set_duty_cycle(uint32_t dutycycle)
{
   806a8:	b508      	push	{r3, lr}
   806aa:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_instance, dutycycle);
   806ac:	4802      	ldr	r0, [pc, #8]	; (806b8 <pwm_set_duty_cycle+0x10>)
   806ae:	4903      	ldr	r1, [pc, #12]	; (806bc <pwm_set_duty_cycle+0x14>)
   806b0:	4b03      	ldr	r3, [pc, #12]	; (806c0 <pwm_set_duty_cycle+0x18>)
   806b2:	4798      	blx	r3
   806b4:	bd08      	pop	{r3, pc}
   806b6:	bf00      	nop
   806b8:	40094000 	.word	0x40094000
   806bc:	20070660 	.word	0x20070660
   806c0:	00080479 	.word	0x00080479

000806c4 <pwm_config>:
#include "io_uart.h"

static pwm_channel_t pwm_instance;

void pwm_config(void)
{
   806c4:	b530      	push	{r4, r5, lr}
   806c6:	b085      	sub	sp, #20
	if(pmc_enable_periph_clk(ID_PWM) == 0) {		
   806c8:	2024      	movs	r0, #36	; 0x24
   806ca:	4b15      	ldr	r3, [pc, #84]	; (80720 <pwm_config+0x5c>)
   806cc:	4798      	blx	r3
   806ce:	bb28      	cbnz	r0, 8071c <pwm_config+0x58>
		pwm_clock_t pwmclock = {
   806d0:	4b14      	ldr	r3, [pc, #80]	; (80724 <pwm_config+0x60>)
   806d2:	9301      	str	r3, [sp, #4]
   806d4:	2400      	movs	r4, #0
   806d6:	9402      	str	r4, [sp, #8]
   806d8:	4b13      	ldr	r3, [pc, #76]	; (80728 <pwm_config+0x64>)
   806da:	9303      	str	r3, [sp, #12]
			.ul_clka = PWM_FREQUENCY * PWM_RESOLUTION,
			.ul_clkb = 0,
			.ul_mck = sysclk_get_cpu_hz()
		};
		pwm_init(PWM, &pwmclock);
   806dc:	4d13      	ldr	r5, [pc, #76]	; (8072c <pwm_config+0x68>)
   806de:	4628      	mov	r0, r5
   806e0:	a901      	add	r1, sp, #4
   806e2:	4b13      	ldr	r3, [pc, #76]	; (80730 <pwm_config+0x6c>)
   806e4:	4798      	blx	r3
		pwm_instance.alignment = PWM_ALIGN_LEFT;
   806e6:	4913      	ldr	r1, [pc, #76]	; (80734 <pwm_config+0x70>)
   806e8:	810c      	strh	r4, [r1, #8]
		pwm_instance.polarity = PWM_LOW;
   806ea:	728c      	strb	r4, [r1, #10]
		pwm_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
   806ec:	230b      	movs	r3, #11
   806ee:	604b      	str	r3, [r1, #4]
		pwm_instance.ul_period = PWM_RESOLUTION;
   806f0:	f240 33e7 	movw	r3, #999	; 0x3e7
   806f4:	610b      	str	r3, [r1, #16]
		pwm_instance.ul_duty = 0;
   806f6:	60cc      	str	r4, [r1, #12]
		pwm_instance.channel = PWM_CHANNEL_0;
   806f8:	600c      	str	r4, [r1, #0]
		pwm_channel_init(PWM, &pwm_instance);
   806fa:	4628      	mov	r0, r5
   806fc:	4b0e      	ldr	r3, [pc, #56]	; (80738 <pwm_config+0x74>)
   806fe:	4798      	blx	r3
		
		pio_set_peripheral(PWM_PIO, PWM_PIO_PERIPHERAL, PWM_PIO_PIN);
   80700:	480e      	ldr	r0, [pc, #56]	; (8073c <pwm_config+0x78>)
   80702:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   8070a:	4b0d      	ldr	r3, [pc, #52]	; (80740 <pwm_config+0x7c>)
   8070c:	4798      	blx	r3
		pwm_channel_enable(PWM, PWM_CHANNEL_0);
   8070e:	4628      	mov	r0, r5
   80710:	4621      	mov	r1, r4
   80712:	4b0c      	ldr	r3, [pc, #48]	; (80744 <pwm_config+0x80>)
   80714:	4798      	blx	r3
		pwm_set_duty_cycle(0);		
   80716:	4620      	mov	r0, r4
   80718:	4b0b      	ldr	r3, [pc, #44]	; (80748 <pwm_config+0x84>)
   8071a:	4798      	blx	r3
	}
}
   8071c:	b005      	add	sp, #20
   8071e:	bd30      	pop	{r4, r5, pc}
   80720:	000823a5 	.word	0x000823a5
   80724:	000f3e58 	.word	0x000f3e58
   80728:	0501bd00 	.word	0x0501bd00
   8072c:	40094000 	.word	0x40094000
   80730:	00080325 	.word	0x00080325
   80734:	20070660 	.word	0x20070660
   80738:	00080371 	.word	0x00080371
   8073c:	400e1000 	.word	0x400e1000
   80740:	00082001 	.word	0x00082001
   80744:	0008049d 	.word	0x0008049d
   80748:	000806a9 	.word	0x000806a9

0008074c <task_com>:
#include <asf.h>
#include "io_uart.h"
#include "sync.h"

void task_com(void *pvParameters)
{	
   8074c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80750:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = timer;
   80752:	4b18      	ldr	r3, [pc, #96]	; (807b4 <task_com+0x68>)
   80754:	f8b3 9000 	ldrh.w	r9, [r3]
	
	xLastWakeTime = xTaskGetTickCount();
   80758:	4b17      	ldr	r3, [pc, #92]	; (807b8 <task_com+0x6c>)
   8075a:	4798      	blx	r3
   8075c:	f8ad 0006 	strh.w	r0, [sp, #6]
   80760:	4c16      	ldr	r4, [pc, #88]	; (807bc <task_com+0x70>)
   80762:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
   80766:	46b0      	mov	r8, r6
	while(1)
	{	
		/*	Set pin high for performance measurement	 */
		ioport_set_pin_level(PIO_PB26_IDX,HIGH);
		
		if(xSemaphoreTake(sync, portMAX_DELAY)){
   80768:	4d15      	ldr	r5, [pc, #84]	; (807c0 <task_com+0x74>)
   8076a:	4f16      	ldr	r7, [pc, #88]	; (807c4 <task_com+0x78>)
   8076c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
   80770:	6828      	ldr	r0, [r5, #0]
   80772:	2100      	movs	r1, #0
   80774:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80778:	460b      	mov	r3, r1
   8077a:	47b8      	blx	r7
   8077c:	b198      	cbz	r0, 807a6 <task_com+0x5a>
			itoa(dac_value, str, 10);
   8077e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 807dc <task_com+0x90>
   80782:	4b11      	ldr	r3, [pc, #68]	; (807c8 <task_com+0x7c>)
   80784:	8818      	ldrh	r0, [r3, #0]
   80786:	4651      	mov	r1, sl
   80788:	220a      	movs	r2, #10
   8078a:	4b10      	ldr	r3, [pc, #64]	; (807cc <task_com+0x80>)
   8078c:	4798      	blx	r3
				while(!uart_transmitter_ready());
				uart_send_char(*p_str);
				p_str++;
			}
			*/
			uart_send_string(str);			
   8078e:	4650      	mov	r0, sl
   80790:	4b0f      	ldr	r3, [pc, #60]	; (807d0 <task_com+0x84>)
   80792:	4798      	blx	r3
			uart_send_newline();
   80794:	4b0f      	ldr	r3, [pc, #60]	; (807d4 <task_com+0x88>)
   80796:	4798      	blx	r3
			xSemaphoreGive(sync);
   80798:	6828      	ldr	r0, [r5, #0]
   8079a:	2100      	movs	r1, #0
   8079c:	460a      	mov	r2, r1
   8079e:	460b      	mov	r3, r1
   807a0:	f8df c03c 	ldr.w	ip, [pc, #60]	; 807e0 <task_com+0x94>
   807a4:	47e0      	blx	ip
		}
		
		/* Sleep for some time */
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   807a6:	f10d 0006 	add.w	r0, sp, #6
   807aa:	4649      	mov	r1, r9
   807ac:	4b0a      	ldr	r3, [pc, #40]	; (807d8 <task_com+0x8c>)
   807ae:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   807b0:	6366      	str	r6, [r4, #52]	; 0x34
   807b2:	e7db      	b.n	8076c <task_com+0x20>
   807b4:	20070134 	.word	0x20070134
   807b8:	000814a9 	.word	0x000814a9
   807bc:	400e1000 	.word	0x400e1000
   807c0:	20070130 	.word	0x20070130
   807c4:	0008101d 	.word	0x0008101d
   807c8:	2007065c 	.word	0x2007065c
   807cc:	000830e1 	.word	0x000830e1
   807d0:	000804e1 	.word	0x000804e1
   807d4:	0008050d 	.word	0x0008050d
   807d8:	000816f9 	.word	0x000816f9
   807dc:	20070688 	.word	0x20070688
   807e0:	00080e65 	.word	0x00080e65

000807e4 <task_regulate>:
#include "pwm_func.h"
#include "io_uart.h"
#include "sync.h"

void task_regulate(void *pvParameters)
{
   807e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   807e8:	b087      	sub	sp, #28
	uint16_t invalue;
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = timer;
   807ea:	4b34      	ldr	r3, [pc, #208]	; (808bc <task_regulate+0xd8>)
   807ec:	881b      	ldrh	r3, [r3, #0]
   807ee:	9303      	str	r3, [sp, #12]
	xLastWakeTime = xTaskGetTickCount();
   807f0:	4b33      	ldr	r3, [pc, #204]	; (808c0 <task_regulate+0xdc>)
   807f2:	4798      	blx	r3
   807f4:	f8ad 0016 	strh.w	r0, [sp, #22]
	
	static float xbuff[4] = {0};
	int k;
	float temp = 0;
   807f8:	2300      	movs	r3, #0
   807fa:	469a      	mov	sl, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   807fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   80800:	9302      	str	r3, [sp, #8]
	
	while(1){
		ioport_set_pin_level(PIO_PB14_IDX,HIGH);
		adc_start(ADC);
		while ((adc_get_status(ADC) & 0x1<<24)==0);
   80802:	4f30      	ldr	r7, [pc, #192]	; (808c4 <task_regulate+0xe0>)
   80804:	4b30      	ldr	r3, [pc, #192]	; (808c8 <task_regulate+0xe4>)
   80806:	9a02      	ldr	r2, [sp, #8]
   80808:	631a      	str	r2, [r3, #48]	; 0x30
	int k;
	float temp = 0;
	
	while(1){
		ioport_set_pin_level(PIO_PB14_IDX,HIGH);
		adc_start(ADC);
   8080a:	4830      	ldr	r0, [pc, #192]	; (808cc <task_regulate+0xe8>)
   8080c:	4b30      	ldr	r3, [pc, #192]	; (808d0 <task_regulate+0xec>)
   8080e:	4798      	blx	r3
		while ((adc_get_status(ADC) & 0x1<<24)==0);
   80810:	482e      	ldr	r0, [pc, #184]	; (808cc <task_regulate+0xe8>)
   80812:	47b8      	blx	r7
   80814:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80818:	d0fa      	beq.n	80810 <task_regulate+0x2c>
		invalue = adc_get_latest_value(ADC);
   8081a:	482c      	ldr	r0, [pc, #176]	; (808cc <task_regulate+0xe8>)
   8081c:	4b2d      	ldr	r3, [pc, #180]	; (808d4 <task_regulate+0xf0>)
   8081e:	4798      	blx	r3
   80820:	b285      	uxth	r5, r0
		
		if(xSemaphoreTake(sync, portMAX_DELAY)){
   80822:	4b2d      	ldr	r3, [pc, #180]	; (808d8 <task_regulate+0xf4>)
   80824:	6818      	ldr	r0, [r3, #0]
   80826:	2100      	movs	r1, #0
   80828:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8082c:	460b      	mov	r3, r1
   8082e:	4c2b      	ldr	r4, [pc, #172]	; (808dc <task_regulate+0xf8>)
   80830:	47a0      	blx	r4
   80832:	2800      	cmp	r0, #0
   80834:	d02b      	beq.n	8088e <task_regulate+0xaa>
			dac_value = invalue;
   80836:	4b2a      	ldr	r3, [pc, #168]	; (808e0 <task_regulate+0xfc>)
   80838:	801d      	strh	r5, [r3, #0]
			xSemaphoreGive(sync);
   8083a:	4b27      	ldr	r3, [pc, #156]	; (808d8 <task_regulate+0xf4>)
   8083c:	6818      	ldr	r0, [r3, #0]
   8083e:	2100      	movs	r1, #0
   80840:	460a      	mov	r2, r1
   80842:	460b      	mov	r3, r1
   80844:	4c27      	ldr	r4, [pc, #156]	; (808e4 <task_regulate+0x100>)
   80846:	47a0      	blx	r4
   80848:	e021      	b.n	8088e <task_regulate+0xaa>
			xbuff[k] = xbuff[k-1];
		}
		xbuff[0] = invalue;
		
		for(k = 0; k <= 3; k++){
			temp += 0.25*xbuff[k];
   8084a:	f855 ab04 	ldr.w	sl, [r5], #4
   8084e:	47b0      	blx	r6
   80850:	e9cd 0100 	strd	r0, r1, [sp]
   80854:	4650      	mov	r0, sl
   80856:	47b0      	blx	r6
   80858:	2200      	movs	r2, #0
   8085a:	4b23      	ldr	r3, [pc, #140]	; (808e8 <task_regulate+0x104>)
   8085c:	47c0      	blx	r8
   8085e:	4602      	mov	r2, r0
   80860:	460b      	mov	r3, r1
   80862:	e9dd 0100 	ldrd	r0, r1, [sp]
   80866:	47c8      	blx	r9
   80868:	47d8      	blx	fp
		for(k = 3; k > 0; k--){
			xbuff[k] = xbuff[k-1];
		}
		xbuff[0] = invalue;
		
		for(k = 0; k <= 3; k++){
   8086a:	42a5      	cmp	r5, r4
   8086c:	d1ed      	bne.n	8084a <task_regulate+0x66>
   8086e:	4682      	mov	sl, r0
			temp += 0.25*xbuff[k];
		}
		invalue = (uint16_t)temp;
   80870:	4b1e      	ldr	r3, [pc, #120]	; (808ec <task_regulate+0x108>)
   80872:	4798      	blx	r3
		
		pwm_set_duty_cycle(invalue);
   80874:	b280      	uxth	r0, r0
   80876:	4b1e      	ldr	r3, [pc, #120]	; (808f0 <task_regulate+0x10c>)
   80878:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8087a:	4b13      	ldr	r3, [pc, #76]	; (808c8 <task_regulate+0xe4>)
   8087c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80880:	635a      	str	r2, [r3, #52]	; 0x34
		ioport_set_pin_level(PIO_PB14_IDX,LOW);
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   80882:	f10d 0016 	add.w	r0, sp, #22
   80886:	9903      	ldr	r1, [sp, #12]
   80888:	4b1a      	ldr	r3, [pc, #104]	; (808f4 <task_regulate+0x110>)
   8088a:	4798      	blx	r3
	}
   8088c:	e7ba      	b.n	80804 <task_regulate+0x20>
			dac_value = invalue;
			xSemaphoreGive(sync);
		}
		
		for(k = 3; k > 0; k--){
			xbuff[k] = xbuff[k-1];
   8088e:	4c1a      	ldr	r4, [pc, #104]	; (808f8 <task_regulate+0x114>)
   80890:	68a3      	ldr	r3, [r4, #8]
   80892:	60e3      	str	r3, [r4, #12]
   80894:	6863      	ldr	r3, [r4, #4]
   80896:	60a3      	str	r3, [r4, #8]
   80898:	6823      	ldr	r3, [r4, #0]
   8089a:	6063      	str	r3, [r4, #4]
		}
		xbuff[0] = invalue;
   8089c:	4628      	mov	r0, r5
   8089e:	4b17      	ldr	r3, [pc, #92]	; (808fc <task_regulate+0x118>)
   808a0:	4798      	blx	r3
   808a2:	6020      	str	r0, [r4, #0]
   808a4:	4625      	mov	r5, r4
   808a6:	3410      	adds	r4, #16
		
		for(k = 0; k <= 3; k++){
			temp += 0.25*xbuff[k];
   808a8:	4e15      	ldr	r6, [pc, #84]	; (80900 <task_regulate+0x11c>)
   808aa:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80904 <task_regulate+0x120>
   808ae:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80908 <task_regulate+0x124>
   808b2:	f8df b058 	ldr.w	fp, [pc, #88]	; 8090c <task_regulate+0x128>
   808b6:	4650      	mov	r0, sl
   808b8:	e7c7      	b.n	8084a <task_regulate+0x66>
   808ba:	bf00      	nop
   808bc:	20070134 	.word	0x20070134
   808c0:	000814a9 	.word	0x000814a9
   808c4:	000802cd 	.word	0x000802cd
   808c8:	400e1000 	.word	0x400e1000
   808cc:	400c0000 	.word	0x400c0000
   808d0:	000802b9 	.word	0x000802b9
   808d4:	000802c9 	.word	0x000802c9
   808d8:	20070130 	.word	0x20070130
   808dc:	0008101d 	.word	0x0008101d
   808e0:	2007065c 	.word	0x2007065c
   808e4:	00080e65 	.word	0x00080e65
   808e8:	3fd00000 	.word	0x3fd00000
   808ec:	00083019 	.word	0x00083019
   808f0:	000806a9 	.word	0x000806a9
   808f4:	000816f9 	.word	0x000816f9
   808f8:	20070690 	.word	0x20070690
   808fc:	00082f69 	.word	0x00082f69
   80900:	00082891 	.word	0x00082891
   80904:	00082939 	.word	0x00082939
   80908:	000825d5 	.word	0x000825d5
   8090c:	00082d5d 	.word	0x00082d5d

00080910 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80910:	f100 0308 	add.w	r3, r0, #8
   80914:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80916:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8091a:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   8091c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8091e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80920:	2300      	movs	r3, #0
   80922:	6003      	str	r3, [r0, #0]
   80924:	4770      	bx	lr
   80926:	bf00      	nop

00080928 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80928:	2300      	movs	r3, #0
   8092a:	6103      	str	r3, [r0, #16]
   8092c:	4770      	bx	lr
   8092e:	bf00      	nop

00080930 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80930:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80932:	685a      	ldr	r2, [r3, #4]
   80934:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80936:	6842      	ldr	r2, [r0, #4]
   80938:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8093a:	685a      	ldr	r2, [r3, #4]
   8093c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8093e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80940:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80942:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80944:	6803      	ldr	r3, [r0, #0]
   80946:	3301      	adds	r3, #1
   80948:	6003      	str	r3, [r0, #0]
   8094a:	4770      	bx	lr

0008094c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   8094c:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8094e:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80950:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80954:	429c      	cmp	r4, r3
   80956:	d101      	bne.n	8095c <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80958:	6902      	ldr	r2, [r0, #16]
   8095a:	e00c      	b.n	80976 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8095c:	f100 0208 	add.w	r2, r0, #8
   80960:	68c3      	ldr	r3, [r0, #12]
   80962:	881b      	ldrh	r3, [r3, #0]
   80964:	b29b      	uxth	r3, r3
   80966:	429c      	cmp	r4, r3
   80968:	d305      	bcc.n	80976 <vListInsert+0x2a>
   8096a:	6852      	ldr	r2, [r2, #4]
   8096c:	6853      	ldr	r3, [r2, #4]
   8096e:	881b      	ldrh	r3, [r3, #0]
   80970:	b29b      	uxth	r3, r3
   80972:	429c      	cmp	r4, r3
   80974:	d2f9      	bcs.n	8096a <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80976:	6853      	ldr	r3, [r2, #4]
   80978:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8097a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8097c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   8097e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80980:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80982:	6803      	ldr	r3, [r0, #0]
   80984:	3301      	adds	r3, #1
   80986:	6003      	str	r3, [r0, #0]
}
   80988:	f85d 4b04 	ldr.w	r4, [sp], #4
   8098c:	4770      	bx	lr
   8098e:	bf00      	nop

00080990 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80990:	6843      	ldr	r3, [r0, #4]
   80992:	6882      	ldr	r2, [r0, #8]
   80994:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80996:	6883      	ldr	r3, [r0, #8]
   80998:	6842      	ldr	r2, [r0, #4]
   8099a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8099c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8099e:	685a      	ldr	r2, [r3, #4]
   809a0:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   809a2:	bf04      	itt	eq
   809a4:	6882      	ldreq	r2, [r0, #8]
   809a6:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   809a8:	2200      	movs	r2, #0
   809aa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   809ac:	681a      	ldr	r2, [r3, #0]
   809ae:	3a01      	subs	r2, #1
   809b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   809b2:	6818      	ldr	r0, [r3, #0]
}
   809b4:	4770      	bx	lr
   809b6:	bf00      	nop

000809b8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   809b8:	4803      	ldr	r0, [pc, #12]	; (809c8 <prvPortStartFirstTask+0x10>)
   809ba:	6800      	ldr	r0, [r0, #0]
   809bc:	6800      	ldr	r0, [r0, #0]
   809be:	f380 8808 	msr	MSP, r0
   809c2:	b662      	cpsie	i
   809c4:	df00      	svc	0
   809c6:	bf00      	nop
   809c8:	e000ed08 	.word	0xe000ed08

000809cc <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   809cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   809d0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   809d4:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   809d8:	2300      	movs	r3, #0
   809da:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   809de:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   809e2:	3840      	subs	r0, #64	; 0x40
   809e4:	4770      	bx	lr
   809e6:	bf00      	nop

000809e8 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   809e8:	4b06      	ldr	r3, [pc, #24]	; (80a04 <pxCurrentTCBConst2>)
   809ea:	6819      	ldr	r1, [r3, #0]
   809ec:	6808      	ldr	r0, [r1, #0]
   809ee:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   809f2:	f380 8809 	msr	PSP, r0
   809f6:	f04f 0000 	mov.w	r0, #0
   809fa:	f380 8811 	msr	BASEPRI, r0
   809fe:	f04e 0e0d 	orr.w	lr, lr, #13
   80a02:	4770      	bx	lr

00080a04 <pxCurrentTCBConst2>:
   80a04:	200787dc 	.word	0x200787dc

00080a08 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80a0c:	4b01      	ldr	r3, [pc, #4]	; (80a14 <vPortYieldFromISR+0xc>)
   80a0e:	601a      	str	r2, [r3, #0]
   80a10:	4770      	bx	lr
   80a12:	bf00      	nop
   80a14:	e000ed04 	.word	0xe000ed04

00080a18 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80a18:	f3ef 8011 	mrs	r0, BASEPRI
   80a1c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80a20:	f381 8811 	msr	BASEPRI, r1
   80a24:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80a26:	2000      	movs	r0, #0

00080a28 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80a28:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80a2a:	4b03      	ldr	r3, [pc, #12]	; (80a38 <vPortEnterCritical+0x10>)
   80a2c:	4798      	blx	r3
	uxCriticalNesting++;
   80a2e:	4a03      	ldr	r2, [pc, #12]	; (80a3c <vPortEnterCritical+0x14>)
   80a30:	6813      	ldr	r3, [r2, #0]
   80a32:	3301      	adds	r3, #1
   80a34:	6013      	str	r3, [r2, #0]
   80a36:	bd08      	pop	{r3, pc}
   80a38:	00080a19 	.word	0x00080a19
   80a3c:	20070138 	.word	0x20070138

00080a40 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80a40:	f380 8811 	msr	BASEPRI, r0
   80a44:	4770      	bx	lr
   80a46:	bf00      	nop

00080a48 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80a48:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80a4a:	4a04      	ldr	r2, [pc, #16]	; (80a5c <vPortExitCritical+0x14>)
   80a4c:	6813      	ldr	r3, [r2, #0]
   80a4e:	3b01      	subs	r3, #1
   80a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80a52:	b913      	cbnz	r3, 80a5a <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80a54:	2000      	movs	r0, #0
   80a56:	4b02      	ldr	r3, [pc, #8]	; (80a60 <vPortExitCritical+0x18>)
   80a58:	4798      	blx	r3
   80a5a:	bd08      	pop	{r3, pc}
   80a5c:	20070138 	.word	0x20070138
   80a60:	00080a41 	.word	0x00080a41

00080a64 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80a64:	f3ef 8009 	mrs	r0, PSP
   80a68:	4b0c      	ldr	r3, [pc, #48]	; (80a9c <pxCurrentTCBConst>)
   80a6a:	681a      	ldr	r2, [r3, #0]
   80a6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80a70:	6010      	str	r0, [r2, #0]
   80a72:	e92d 4008 	stmdb	sp!, {r3, lr}
   80a76:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80a7a:	f380 8811 	msr	BASEPRI, r0
   80a7e:	f000 fec9 	bl	81814 <vTaskSwitchContext>
   80a82:	f04f 0000 	mov.w	r0, #0
   80a86:	f380 8811 	msr	BASEPRI, r0
   80a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80a8e:	6819      	ldr	r1, [r3, #0]
   80a90:	6808      	ldr	r0, [r1, #0]
   80a92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80a96:	f380 8809 	msr	PSP, r0
   80a9a:	4770      	bx	lr

00080a9c <pxCurrentTCBConst>:
   80a9c:	200787dc 	.word	0x200787dc

00080aa0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80aa0:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80aa6:	4b05      	ldr	r3, [pc, #20]	; (80abc <SysTick_Handler+0x1c>)
   80aa8:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80aaa:	4b05      	ldr	r3, [pc, #20]	; (80ac0 <SysTick_Handler+0x20>)
   80aac:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80aae:	4b05      	ldr	r3, [pc, #20]	; (80ac4 <SysTick_Handler+0x24>)
   80ab0:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80ab2:	2000      	movs	r0, #0
   80ab4:	4b04      	ldr	r3, [pc, #16]	; (80ac8 <SysTick_Handler+0x28>)
   80ab6:	4798      	blx	r3
   80ab8:	bd08      	pop	{r3, pc}
   80aba:	bf00      	nop
   80abc:	e000ed04 	.word	0xe000ed04
   80ac0:	00080a19 	.word	0x00080a19
   80ac4:	000814c9 	.word	0x000814c9
   80ac8:	00080a41 	.word	0x00080a41

00080acc <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80acc:	4a03      	ldr	r2, [pc, #12]	; (80adc <vPortSetupTimerInterrupt+0x10>)
   80ace:	4b04      	ldr	r3, [pc, #16]	; (80ae0 <vPortSetupTimerInterrupt+0x14>)
   80ad0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80ad2:	2207      	movs	r2, #7
   80ad4:	3b04      	subs	r3, #4
   80ad6:	601a      	str	r2, [r3, #0]
   80ad8:	4770      	bx	lr
   80ada:	bf00      	nop
   80adc:	0001481f 	.word	0x0001481f
   80ae0:	e000e014 	.word	0xe000e014

00080ae4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80ae4:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80ae6:	4b09      	ldr	r3, [pc, #36]	; (80b0c <xPortStartScheduler+0x28>)
   80ae8:	681a      	ldr	r2, [r3, #0]
   80aea:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80aee:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80af0:	681a      	ldr	r2, [r3, #0]
   80af2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80af6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80af8:	4b05      	ldr	r3, [pc, #20]	; (80b10 <xPortStartScheduler+0x2c>)
   80afa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80afc:	2400      	movs	r4, #0
   80afe:	4b05      	ldr	r3, [pc, #20]	; (80b14 <xPortStartScheduler+0x30>)
   80b00:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   80b02:	4b05      	ldr	r3, [pc, #20]	; (80b18 <xPortStartScheduler+0x34>)
   80b04:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   80b06:	4620      	mov	r0, r4
   80b08:	bd10      	pop	{r4, pc}
   80b0a:	bf00      	nop
   80b0c:	e000ed20 	.word	0xe000ed20
   80b10:	00080acd 	.word	0x00080acd
   80b14:	20070138 	.word	0x20070138
   80b18:	000809b9 	.word	0x000809b9

00080b1c <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80b1c:	4a13      	ldr	r2, [pc, #76]	; (80b6c <prvInsertBlockIntoFreeList+0x50>)
   80b1e:	e000      	b.n	80b22 <prvInsertBlockIntoFreeList+0x6>
   80b20:	461a      	mov	r2, r3
   80b22:	6813      	ldr	r3, [r2, #0]
   80b24:	4283      	cmp	r3, r0
   80b26:	d3fb      	bcc.n	80b20 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80b28:	b430      	push	{r4, r5}
   80b2a:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80b2c:	6854      	ldr	r4, [r2, #4]
   80b2e:	1915      	adds	r5, r2, r4
   80b30:	4285      	cmp	r5, r0
   80b32:	d103      	bne.n	80b3c <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80b34:	6868      	ldr	r0, [r5, #4]
   80b36:	4404      	add	r4, r0
   80b38:	6054      	str	r4, [r2, #4]
   80b3a:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80b3c:	6842      	ldr	r2, [r0, #4]
   80b3e:	1884      	adds	r4, r0, r2
   80b40:	429c      	cmp	r4, r3
   80b42:	d10c      	bne.n	80b5e <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80b44:	4b0a      	ldr	r3, [pc, #40]	; (80b70 <prvInsertBlockIntoFreeList+0x54>)
   80b46:	681b      	ldr	r3, [r3, #0]
   80b48:	429c      	cmp	r4, r3
   80b4a:	d006      	beq.n	80b5a <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80b4c:	6863      	ldr	r3, [r4, #4]
   80b4e:	441a      	add	r2, r3
   80b50:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80b52:	680b      	ldr	r3, [r1, #0]
   80b54:	681b      	ldr	r3, [r3, #0]
   80b56:	6003      	str	r3, [r0, #0]
   80b58:	e002      	b.n	80b60 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80b5a:	6004      	str	r4, [r0, #0]
   80b5c:	e000      	b.n	80b60 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80b5e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80b60:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80b62:	bf18      	it	ne
   80b64:	6008      	strne	r0, [r1, #0]
	}
}
   80b66:	bc30      	pop	{r4, r5}
   80b68:	4770      	bx	lr
   80b6a:	bf00      	nop
   80b6c:	200786a4 	.word	0x200786a4
   80b70:	200786a0 	.word	0x200786a0

00080b74 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80b74:	b538      	push	{r3, r4, r5, lr}
   80b76:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80b78:	4b29      	ldr	r3, [pc, #164]	; (80c20 <pvPortMalloc+0xac>)
   80b7a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80b7c:	4b29      	ldr	r3, [pc, #164]	; (80c24 <pvPortMalloc+0xb0>)
   80b7e:	681b      	ldr	r3, [r3, #0]
   80b80:	b99b      	cbnz	r3, 80baa <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80b82:	4a29      	ldr	r2, [pc, #164]	; (80c28 <pvPortMalloc+0xb4>)
   80b84:	4b29      	ldr	r3, [pc, #164]	; (80c2c <pvPortMalloc+0xb8>)
   80b86:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80b88:	2100      	movs	r1, #0
   80b8a:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80b8c:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   80b90:	1898      	adds	r0, r3, r2
   80b92:	4d24      	ldr	r5, [pc, #144]	; (80c24 <pvPortMalloc+0xb0>)
   80b94:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80b96:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   80b9a:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80b9c:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80b9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80ba0:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80ba2:	4a23      	ldr	r2, [pc, #140]	; (80c30 <pvPortMalloc+0xbc>)
   80ba4:	6813      	ldr	r3, [r2, #0]
   80ba6:	3b10      	subs	r3, #16
   80ba8:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80baa:	2c00      	cmp	r4, #0
   80bac:	d02e      	beq.n	80c0c <pvPortMalloc+0x98>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80bae:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80bb2:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80bb6:	bf1c      	itt	ne
   80bb8:	f022 0207 	bicne.w	r2, r2, #7
   80bbc:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80bbe:	1e51      	subs	r1, r2, #1
   80bc0:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   80bc4:	4299      	cmp	r1, r3
   80bc6:	d823      	bhi.n	80c10 <pvPortMalloc+0x9c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80bc8:	4917      	ldr	r1, [pc, #92]	; (80c28 <pvPortMalloc+0xb4>)
   80bca:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80bcc:	e001      	b.n	80bd2 <pvPortMalloc+0x5e>
   80bce:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80bd0:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80bd2:	6863      	ldr	r3, [r4, #4]
   80bd4:	429a      	cmp	r2, r3
   80bd6:	d902      	bls.n	80bde <pvPortMalloc+0x6a>
   80bd8:	6823      	ldr	r3, [r4, #0]
   80bda:	2b00      	cmp	r3, #0
   80bdc:	d1f7      	bne.n	80bce <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80bde:	4b11      	ldr	r3, [pc, #68]	; (80c24 <pvPortMalloc+0xb0>)
   80be0:	681b      	ldr	r3, [r3, #0]
   80be2:	429c      	cmp	r4, r3
   80be4:	d016      	beq.n	80c14 <pvPortMalloc+0xa0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80be6:	680d      	ldr	r5, [r1, #0]
   80be8:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80bea:	6823      	ldr	r3, [r4, #0]
   80bec:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80bee:	6863      	ldr	r3, [r4, #4]
   80bf0:	1a9b      	subs	r3, r3, r2
   80bf2:	2b20      	cmp	r3, #32
   80bf4:	d904      	bls.n	80c00 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80bf6:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80bf8:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80bfa:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80bfc:	4b0d      	ldr	r3, [pc, #52]	; (80c34 <pvPortMalloc+0xc0>)
   80bfe:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80c00:	4a0b      	ldr	r2, [pc, #44]	; (80c30 <pvPortMalloc+0xbc>)
   80c02:	6813      	ldr	r3, [r2, #0]
   80c04:	6861      	ldr	r1, [r4, #4]
   80c06:	1a5b      	subs	r3, r3, r1
   80c08:	6013      	str	r3, [r2, #0]
   80c0a:	e004      	b.n	80c16 <pvPortMalloc+0xa2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80c0c:	2500      	movs	r5, #0
   80c0e:	e002      	b.n	80c16 <pvPortMalloc+0xa2>
   80c10:	2500      	movs	r5, #0
   80c12:	e000      	b.n	80c16 <pvPortMalloc+0xa2>
   80c14:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80c16:	4b08      	ldr	r3, [pc, #32]	; (80c38 <pvPortMalloc+0xc4>)
   80c18:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80c1a:	4628      	mov	r0, r5
   80c1c:	bd38      	pop	{r3, r4, r5, pc}
   80c1e:	bf00      	nop
   80c20:	00081499 	.word	0x00081499
   80c24:	200786a0 	.word	0x200786a0
   80c28:	200786a4 	.word	0x200786a4
   80c2c:	200706a0 	.word	0x200706a0
   80c30:	2007013c 	.word	0x2007013c
   80c34:	00080b1d 	.word	0x00080b1d
   80c38:	000815f5 	.word	0x000815f5

00080c3c <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80c3c:	b180      	cbz	r0, 80c60 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80c3e:	b510      	push	{r4, lr}
   80c40:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80c42:	4b08      	ldr	r3, [pc, #32]	; (80c64 <vPortFree+0x28>)
   80c44:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80c46:	4a08      	ldr	r2, [pc, #32]	; (80c68 <vPortFree+0x2c>)
   80c48:	6811      	ldr	r1, [r2, #0]
   80c4a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80c4e:	440b      	add	r3, r1
   80c50:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80c52:	f1a4 0010 	sub.w	r0, r4, #16
   80c56:	4b05      	ldr	r3, [pc, #20]	; (80c6c <vPortFree+0x30>)
   80c58:	4798      	blx	r3
		}
		xTaskResumeAll();
   80c5a:	4b05      	ldr	r3, [pc, #20]	; (80c70 <vPortFree+0x34>)
   80c5c:	4798      	blx	r3
   80c5e:	bd10      	pop	{r4, pc}
   80c60:	4770      	bx	lr
   80c62:	bf00      	nop
   80c64:	00081499 	.word	0x00081499
   80c68:	2007013c 	.word	0x2007013c
   80c6c:	00080b1d 	.word	0x00080b1d
   80c70:	000815f5 	.word	0x000815f5

00080c74 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80c74:	b510      	push	{r4, lr}
   80c76:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80c78:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80c7a:	b93b      	cbnz	r3, 80c8c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80c7c:	6803      	ldr	r3, [r0, #0]
   80c7e:	bb1b      	cbnz	r3, 80cc8 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80c80:	6840      	ldr	r0, [r0, #4]
   80c82:	4b13      	ldr	r3, [pc, #76]	; (80cd0 <prvCopyDataToQueue+0x5c>)
   80c84:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80c86:	2300      	movs	r3, #0
   80c88:	6063      	str	r3, [r4, #4]
   80c8a:	e01d      	b.n	80cc8 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80c8c:	b96a      	cbnz	r2, 80caa <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80c8e:	6880      	ldr	r0, [r0, #8]
   80c90:	461a      	mov	r2, r3
   80c92:	4b10      	ldr	r3, [pc, #64]	; (80cd4 <prvCopyDataToQueue+0x60>)
   80c94:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80c96:	68a2      	ldr	r2, [r4, #8]
   80c98:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80c9a:	4413      	add	r3, r2
   80c9c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80c9e:	6862      	ldr	r2, [r4, #4]
   80ca0:	4293      	cmp	r3, r2
   80ca2:	d311      	bcc.n	80cc8 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80ca4:	6823      	ldr	r3, [r4, #0]
   80ca6:	60a3      	str	r3, [r4, #8]
   80ca8:	e00e      	b.n	80cc8 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80caa:	68c0      	ldr	r0, [r0, #12]
   80cac:	461a      	mov	r2, r3
   80cae:	4b09      	ldr	r3, [pc, #36]	; (80cd4 <prvCopyDataToQueue+0x60>)
   80cb0:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80cb4:	425b      	negs	r3, r3
   80cb6:	68e2      	ldr	r2, [r4, #12]
   80cb8:	441a      	add	r2, r3
   80cba:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80cbc:	6821      	ldr	r1, [r4, #0]
   80cbe:	428a      	cmp	r2, r1
   80cc0:	d202      	bcs.n	80cc8 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80cc2:	6862      	ldr	r2, [r4, #4]
   80cc4:	4413      	add	r3, r2
   80cc6:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80cc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80cca:	3301      	adds	r3, #1
   80ccc:	63a3      	str	r3, [r4, #56]	; 0x38
   80cce:	bd10      	pop	{r4, pc}
   80cd0:	00081b55 	.word	0x00081b55
   80cd4:	000830e5 	.word	0x000830e5

00080cd8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80cd8:	b538      	push	{r3, r4, r5, lr}
   80cda:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80cdc:	6800      	ldr	r0, [r0, #0]
   80cde:	b158      	cbz	r0, 80cf8 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80ce2:	68dc      	ldr	r4, [r3, #12]
   80ce4:	4414      	add	r4, r2
   80ce6:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80ce8:	685d      	ldr	r5, [r3, #4]
   80cea:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80cec:	bf28      	it	cs
   80cee:	60d8      	strcs	r0, [r3, #12]
   80cf0:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80cf2:	68d9      	ldr	r1, [r3, #12]
   80cf4:	4b01      	ldr	r3, [pc, #4]	; (80cfc <prvCopyDataFromQueue+0x24>)
   80cf6:	4798      	blx	r3
   80cf8:	bd38      	pop	{r3, r4, r5, pc}
   80cfa:	bf00      	nop
   80cfc:	000830e5 	.word	0x000830e5

00080d00 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d02:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80d04:	4b1e      	ldr	r3, [pc, #120]	; (80d80 <prvUnlockQueue+0x80>)
   80d06:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80d08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80d0a:	2b00      	cmp	r3, #0
   80d0c:	dd13      	ble.n	80d36 <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80d10:	b91b      	cbnz	r3, 80d1a <prvUnlockQueue+0x1a>
   80d12:	e010      	b.n	80d36 <prvUnlockQueue+0x36>
   80d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80d16:	b923      	cbnz	r3, 80d22 <prvUnlockQueue+0x22>
   80d18:	e00d      	b.n	80d36 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80d1a:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80d1e:	4d19      	ldr	r5, [pc, #100]	; (80d84 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80d20:	4f19      	ldr	r7, [pc, #100]	; (80d88 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80d22:	4630      	mov	r0, r6
   80d24:	47a8      	blx	r5
   80d26:	b100      	cbz	r0, 80d2a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80d28:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80d2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80d2c:	3b01      	subs	r3, #1
   80d2e:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80d30:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80d32:	2b00      	cmp	r3, #0
   80d34:	dcee      	bgt.n	80d14 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80d36:	f04f 33ff 	mov.w	r3, #4294967295
   80d3a:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80d3c:	4b13      	ldr	r3, [pc, #76]	; (80d8c <prvUnlockQueue+0x8c>)
   80d3e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80d40:	4b0f      	ldr	r3, [pc, #60]	; (80d80 <prvUnlockQueue+0x80>)
   80d42:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80d44:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80d46:	2b00      	cmp	r3, #0
   80d48:	dd13      	ble.n	80d72 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80d4a:	6923      	ldr	r3, [r4, #16]
   80d4c:	b91b      	cbnz	r3, 80d56 <prvUnlockQueue+0x56>
   80d4e:	e010      	b.n	80d72 <prvUnlockQueue+0x72>
   80d50:	6923      	ldr	r3, [r4, #16]
   80d52:	b923      	cbnz	r3, 80d5e <prvUnlockQueue+0x5e>
   80d54:	e00d      	b.n	80d72 <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80d56:	f104 0610 	add.w	r6, r4, #16
   80d5a:	4d0a      	ldr	r5, [pc, #40]	; (80d84 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   80d5c:	4f0a      	ldr	r7, [pc, #40]	; (80d88 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80d5e:	4630      	mov	r0, r6
   80d60:	47a8      	blx	r5
   80d62:	b100      	cbz	r0, 80d66 <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   80d64:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80d66:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80d68:	3b01      	subs	r3, #1
   80d6a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80d6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80d6e:	2b00      	cmp	r3, #0
   80d70:	dcee      	bgt.n	80d50 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80d72:	f04f 33ff 	mov.w	r3, #4294967295
   80d76:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80d78:	4b04      	ldr	r3, [pc, #16]	; (80d8c <prvUnlockQueue+0x8c>)
   80d7a:	4798      	blx	r3
   80d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80d7e:	bf00      	nop
   80d80:	00080a29 	.word	0x00080a29
   80d84:	00081965 	.word	0x00081965
   80d88:	00081a9d 	.word	0x00081a9d
   80d8c:	00080a49 	.word	0x00080a49

00080d90 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80d90:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80d92:	b918      	cbnz	r0, 80d9c <xQueueGenericReset+0xc>
   80d94:	4b17      	ldr	r3, [pc, #92]	; (80df4 <xQueueGenericReset+0x64>)
   80d96:	4798      	blx	r3
   80d98:	bf00      	nop
   80d9a:	e7fd      	b.n	80d98 <xQueueGenericReset+0x8>
   80d9c:	460d      	mov	r5, r1
   80d9e:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   80da0:	4b15      	ldr	r3, [pc, #84]	; (80df8 <xQueueGenericReset+0x68>)
   80da2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80da4:	6822      	ldr	r2, [r4, #0]
   80da6:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80da8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80daa:	fb03 f301 	mul.w	r3, r3, r1
   80dae:	18d0      	adds	r0, r2, r3
   80db0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80db2:	2000      	movs	r0, #0
   80db4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80db6:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80db8:	1a5b      	subs	r3, r3, r1
   80dba:	4413      	add	r3, r2
   80dbc:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80dbe:	f04f 33ff 	mov.w	r3, #4294967295
   80dc2:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80dc4:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80dc6:	b955      	cbnz	r5, 80dde <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80dc8:	6923      	ldr	r3, [r4, #16]
   80dca:	b17b      	cbz	r3, 80dec <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80dcc:	f104 0010 	add.w	r0, r4, #16
   80dd0:	4b0a      	ldr	r3, [pc, #40]	; (80dfc <xQueueGenericReset+0x6c>)
   80dd2:	4798      	blx	r3
   80dd4:	2801      	cmp	r0, #1
   80dd6:	d109      	bne.n	80dec <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80dd8:	4b09      	ldr	r3, [pc, #36]	; (80e00 <xQueueGenericReset+0x70>)
   80dda:	4798      	blx	r3
   80ddc:	e006      	b.n	80dec <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80dde:	f104 0010 	add.w	r0, r4, #16
   80de2:	4d08      	ldr	r5, [pc, #32]	; (80e04 <xQueueGenericReset+0x74>)
   80de4:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80de6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80dea:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80dec:	4b06      	ldr	r3, [pc, #24]	; (80e08 <xQueueGenericReset+0x78>)
   80dee:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80df0:	2001      	movs	r0, #1
   80df2:	bd38      	pop	{r3, r4, r5, pc}
   80df4:	00080a19 	.word	0x00080a19
   80df8:	00080a29 	.word	0x00080a29
   80dfc:	00081965 	.word	0x00081965
   80e00:	00080a09 	.word	0x00080a09
   80e04:	00080911 	.word	0x00080911
   80e08:	00080a49 	.word	0x00080a49

00080e0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   80e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80e0e:	b1a0      	cbz	r0, 80e3a <xQueueGenericCreate+0x2e>
   80e10:	460d      	mov	r5, r1
   80e12:	4617      	mov	r7, r2
   80e14:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80e16:	2050      	movs	r0, #80	; 0x50
   80e18:	4b0e      	ldr	r3, [pc, #56]	; (80e54 <xQueueGenericCreate+0x48>)
   80e1a:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80e1c:	4604      	mov	r4, r0
   80e1e:	b160      	cbz	r0, 80e3a <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80e20:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80e24:	3001      	adds	r0, #1
   80e26:	4b0b      	ldr	r3, [pc, #44]	; (80e54 <xQueueGenericCreate+0x48>)
   80e28:	4798      	blx	r3
   80e2a:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80e2c:	b940      	cbnz	r0, 80e40 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   80e2e:	4620      	mov	r0, r4
   80e30:	4b09      	ldr	r3, [pc, #36]	; (80e58 <xQueueGenericCreate+0x4c>)
   80e32:	4798      	blx	r3
   80e34:	e001      	b.n	80e3a <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   80e36:	bf00      	nop
   80e38:	e7fd      	b.n	80e36 <xQueueGenericCreate+0x2a>
   80e3a:	4b08      	ldr	r3, [pc, #32]	; (80e5c <xQueueGenericCreate+0x50>)
   80e3c:	4798      	blx	r3
   80e3e:	e7fa      	b.n	80e36 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   80e40:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80e42:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80e44:	4620      	mov	r0, r4
   80e46:	2101      	movs	r1, #1
   80e48:	4b05      	ldr	r3, [pc, #20]	; (80e60 <xQueueGenericCreate+0x54>)
   80e4a:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   80e4c:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   80e50:	4620      	mov	r0, r4
   80e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80e54:	00080b75 	.word	0x00080b75
   80e58:	00080c3d 	.word	0x00080c3d
   80e5c:	00080a19 	.word	0x00080a19
   80e60:	00080d91 	.word	0x00080d91

00080e64 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e68:	b085      	sub	sp, #20
   80e6a:	9300      	str	r3, [sp, #0]
   80e6c:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80e70:	b918      	cbnz	r0, 80e7a <xQueueGenericSend+0x16>
   80e72:	4b3a      	ldr	r3, [pc, #232]	; (80f5c <xQueueGenericSend+0xf8>)
   80e74:	4798      	blx	r3
   80e76:	bf00      	nop
   80e78:	e7fd      	b.n	80e76 <xQueueGenericSend+0x12>
   80e7a:	468a      	mov	sl, r1
   80e7c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80e7e:	b929      	cbnz	r1, 80e8c <xQueueGenericSend+0x28>
   80e80:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80e82:	b12b      	cbz	r3, 80e90 <xQueueGenericSend+0x2c>
   80e84:	4b35      	ldr	r3, [pc, #212]	; (80f5c <xQueueGenericSend+0xf8>)
   80e86:	4798      	blx	r3
   80e88:	bf00      	nop
   80e8a:	e7fd      	b.n	80e88 <xQueueGenericSend+0x24>
   80e8c:	2700      	movs	r7, #0
   80e8e:	e000      	b.n	80e92 <xQueueGenericSend+0x2e>
   80e90:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80e92:	4e33      	ldr	r6, [pc, #204]	; (80f60 <xQueueGenericSend+0xfc>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80e94:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 80f88 <xQueueGenericSend+0x124>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80e98:	4d32      	ldr	r5, [pc, #200]	; (80f64 <xQueueGenericSend+0x100>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80e9a:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80e9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80e9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80ea0:	429a      	cmp	r2, r3
   80ea2:	d212      	bcs.n	80eca <xQueueGenericSend+0x66>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80ea4:	4620      	mov	r0, r4
   80ea6:	4651      	mov	r1, sl
   80ea8:	9a00      	ldr	r2, [sp, #0]
   80eaa:	4b2f      	ldr	r3, [pc, #188]	; (80f68 <xQueueGenericSend+0x104>)
   80eac:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80eb0:	b13b      	cbz	r3, 80ec2 <xQueueGenericSend+0x5e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80eb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80eb6:	4b2d      	ldr	r3, [pc, #180]	; (80f6c <xQueueGenericSend+0x108>)
   80eb8:	4798      	blx	r3
   80eba:	2801      	cmp	r0, #1
   80ebc:	d101      	bne.n	80ec2 <xQueueGenericSend+0x5e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80ebe:	4b2c      	ldr	r3, [pc, #176]	; (80f70 <xQueueGenericSend+0x10c>)
   80ec0:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80ec2:	4b28      	ldr	r3, [pc, #160]	; (80f64 <xQueueGenericSend+0x100>)
   80ec4:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   80ec6:	2001      	movs	r0, #1
   80ec8:	e045      	b.n	80f56 <xQueueGenericSend+0xf2>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80eca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   80ece:	b91b      	cbnz	r3, 80ed8 <xQueueGenericSend+0x74>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80ed0:	4b24      	ldr	r3, [pc, #144]	; (80f64 <xQueueGenericSend+0x100>)
   80ed2:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80ed4:	2000      	movs	r0, #0
   80ed6:	e03e      	b.n	80f56 <xQueueGenericSend+0xf2>
				}
				else if( xEntryTimeSet == pdFALSE )
   80ed8:	b917      	cbnz	r7, 80ee0 <xQueueGenericSend+0x7c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80eda:	a802      	add	r0, sp, #8
   80edc:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80ede:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80ee0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80ee2:	4b24      	ldr	r3, [pc, #144]	; (80f74 <xQueueGenericSend+0x110>)
   80ee4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80ee6:	47b0      	blx	r6
   80ee8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80eea:	f1b3 3fff 	cmp.w	r3, #4294967295
   80eee:	bf04      	itt	eq
   80ef0:	2300      	moveq	r3, #0
   80ef2:	6463      	streq	r3, [r4, #68]	; 0x44
   80ef4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
   80efa:	bf04      	itt	eq
   80efc:	2300      	moveq	r3, #0
   80efe:	64a3      	streq	r3, [r4, #72]	; 0x48
   80f00:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80f02:	a802      	add	r0, sp, #8
   80f04:	f10d 0106 	add.w	r1, sp, #6
   80f08:	4b1b      	ldr	r3, [pc, #108]	; (80f78 <xQueueGenericSend+0x114>)
   80f0a:	4798      	blx	r3
   80f0c:	b9e8      	cbnz	r0, 80f4a <xQueueGenericSend+0xe6>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80f0e:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80f10:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   80f14:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80f18:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80f1a:	45c1      	cmp	r9, r8
   80f1c:	d10f      	bne.n	80f3e <xQueueGenericSend+0xda>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80f1e:	f104 0010 	add.w	r0, r4, #16
   80f22:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   80f26:	4b15      	ldr	r3, [pc, #84]	; (80f7c <xQueueGenericSend+0x118>)
   80f28:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   80f2a:	4620      	mov	r0, r4
   80f2c:	4b14      	ldr	r3, [pc, #80]	; (80f80 <xQueueGenericSend+0x11c>)
   80f2e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   80f30:	4b14      	ldr	r3, [pc, #80]	; (80f84 <xQueueGenericSend+0x120>)
   80f32:	4798      	blx	r3
   80f34:	2800      	cmp	r0, #0
   80f36:	d1b0      	bne.n	80e9a <xQueueGenericSend+0x36>
				{
					portYIELD_WITHIN_API();
   80f38:	4b0d      	ldr	r3, [pc, #52]	; (80f70 <xQueueGenericSend+0x10c>)
   80f3a:	4798      	blx	r3
   80f3c:	e7ad      	b.n	80e9a <xQueueGenericSend+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80f3e:	4620      	mov	r0, r4
   80f40:	4b0f      	ldr	r3, [pc, #60]	; (80f80 <xQueueGenericSend+0x11c>)
   80f42:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80f44:	4b0f      	ldr	r3, [pc, #60]	; (80f84 <xQueueGenericSend+0x120>)
   80f46:	4798      	blx	r3
   80f48:	e7a7      	b.n	80e9a <xQueueGenericSend+0x36>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   80f4a:	4620      	mov	r0, r4
   80f4c:	4b0c      	ldr	r3, [pc, #48]	; (80f80 <xQueueGenericSend+0x11c>)
   80f4e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80f50:	4b0c      	ldr	r3, [pc, #48]	; (80f84 <xQueueGenericSend+0x120>)
   80f52:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   80f54:	2000      	movs	r0, #0
		}
	}
}
   80f56:	b005      	add	sp, #20
   80f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f5c:	00080a19 	.word	0x00080a19
   80f60:	00080a29 	.word	0x00080a29
   80f64:	00080a49 	.word	0x00080a49
   80f68:	00080c75 	.word	0x00080c75
   80f6c:	00081965 	.word	0x00081965
   80f70:	00080a09 	.word	0x00080a09
   80f74:	00081499 	.word	0x00081499
   80f78:	00081a11 	.word	0x00081a11
   80f7c:	000818b9 	.word	0x000818b9
   80f80:	00080d01 	.word	0x00080d01
   80f84:	000815f5 	.word	0x000815f5
   80f88:	000819e9 	.word	0x000819e9

00080f8c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80f90:	b918      	cbnz	r0, 80f9a <xQueueGenericSendFromISR+0xe>
   80f92:	4b1e      	ldr	r3, [pc, #120]	; (8100c <xQueueGenericSendFromISR+0x80>)
   80f94:	4798      	blx	r3
   80f96:	bf00      	nop
   80f98:	e7fd      	b.n	80f96 <xQueueGenericSendFromISR+0xa>
   80f9a:	460e      	mov	r6, r1
   80f9c:	4615      	mov	r5, r2
   80f9e:	4698      	mov	r8, r3
   80fa0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80fa2:	b929      	cbnz	r1, 80fb0 <xQueueGenericSendFromISR+0x24>
   80fa4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80fa6:	b11b      	cbz	r3, 80fb0 <xQueueGenericSendFromISR+0x24>
   80fa8:	4b18      	ldr	r3, [pc, #96]	; (8100c <xQueueGenericSendFromISR+0x80>)
   80faa:	4798      	blx	r3
   80fac:	bf00      	nop
   80fae:	e7fd      	b.n	80fac <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80fb0:	4b16      	ldr	r3, [pc, #88]	; (8100c <xQueueGenericSendFromISR+0x80>)
   80fb2:	4798      	blx	r3
   80fb4:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80fb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80fb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80fba:	429a      	cmp	r2, r3
   80fbc:	d218      	bcs.n	80ff0 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80fbe:	4620      	mov	r0, r4
   80fc0:	4631      	mov	r1, r6
   80fc2:	4642      	mov	r2, r8
   80fc4:	4b12      	ldr	r3, [pc, #72]	; (81010 <xQueueGenericSendFromISR+0x84>)
   80fc6:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80fc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80fca:	f1b3 3fff 	cmp.w	r3, #4294967295
   80fce:	d10a      	bne.n	80fe6 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80fd2:	b17b      	cbz	r3, 80ff4 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80fd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80fd8:	4b0e      	ldr	r3, [pc, #56]	; (81014 <xQueueGenericSendFromISR+0x88>)
   80fda:	4798      	blx	r3
   80fdc:	b160      	cbz	r0, 80ff8 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80fde:	b16d      	cbz	r5, 80ffc <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80fe0:	2401      	movs	r4, #1
   80fe2:	602c      	str	r4, [r5, #0]
   80fe4:	e00b      	b.n	80ffe <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80fe6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80fe8:	3301      	adds	r3, #1
   80fea:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80fec:	2401      	movs	r4, #1
   80fee:	e006      	b.n	80ffe <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   80ff0:	2400      	movs	r4, #0
   80ff2:	e004      	b.n	80ffe <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80ff4:	2401      	movs	r4, #1
   80ff6:	e002      	b.n	80ffe <xQueueGenericSendFromISR+0x72>
   80ff8:	2401      	movs	r4, #1
   80ffa:	e000      	b.n	80ffe <xQueueGenericSendFromISR+0x72>
   80ffc:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80ffe:	4638      	mov	r0, r7
   81000:	4b05      	ldr	r3, [pc, #20]	; (81018 <xQueueGenericSendFromISR+0x8c>)
   81002:	4798      	blx	r3

	return xReturn;
}
   81004:	4620      	mov	r0, r4
   81006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8100a:	bf00      	nop
   8100c:	00080a19 	.word	0x00080a19
   81010:	00080c75 	.word	0x00080c75
   81014:	00081965 	.word	0x00081965
   81018:	00080a41 	.word	0x00080a41

0008101c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   8101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81020:	b085      	sub	sp, #20
   81022:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81026:	b918      	cbnz	r0, 81030 <xQueueGenericReceive+0x14>
   81028:	4b47      	ldr	r3, [pc, #284]	; (81148 <xQueueGenericReceive+0x12c>)
   8102a:	4798      	blx	r3
   8102c:	bf00      	nop
   8102e:	e7fd      	b.n	8102c <xQueueGenericReceive+0x10>
   81030:	4689      	mov	r9, r1
   81032:	469a      	mov	sl, r3
   81034:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81036:	b929      	cbnz	r1, 81044 <xQueueGenericReceive+0x28>
   81038:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8103a:	b12b      	cbz	r3, 81048 <xQueueGenericReceive+0x2c>
   8103c:	4b42      	ldr	r3, [pc, #264]	; (81148 <xQueueGenericReceive+0x12c>)
   8103e:	4798      	blx	r3
   81040:	bf00      	nop
   81042:	e7fd      	b.n	81040 <xQueueGenericReceive+0x24>
   81044:	2700      	movs	r7, #0
   81046:	e000      	b.n	8104a <xQueueGenericReceive+0x2e>
   81048:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8104a:	4e40      	ldr	r6, [pc, #256]	; (8114c <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8104c:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8117c <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81050:	4d3f      	ldr	r5, [pc, #252]	; (81150 <xQueueGenericReceive+0x134>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81052:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81054:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81056:	b343      	cbz	r3, 810aa <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81058:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   8105a:	4620      	mov	r0, r4
   8105c:	4649      	mov	r1, r9
   8105e:	4b3d      	ldr	r3, [pc, #244]	; (81154 <xQueueGenericReceive+0x138>)
   81060:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81062:	f1ba 0f00 	cmp.w	sl, #0
   81066:	d112      	bne.n	8108e <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81068:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8106a:	3b01      	subs	r3, #1
   8106c:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8106e:	6823      	ldr	r3, [r4, #0]
   81070:	b913      	cbnz	r3, 81078 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   81072:	4b39      	ldr	r3, [pc, #228]	; (81158 <xQueueGenericReceive+0x13c>)
   81074:	4798      	blx	r3
   81076:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81078:	6923      	ldr	r3, [r4, #16]
   8107a:	b193      	cbz	r3, 810a2 <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8107c:	f104 0010 	add.w	r0, r4, #16
   81080:	4b36      	ldr	r3, [pc, #216]	; (8115c <xQueueGenericReceive+0x140>)
   81082:	4798      	blx	r3
   81084:	2801      	cmp	r0, #1
   81086:	d10c      	bne.n	810a2 <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   81088:	4b35      	ldr	r3, [pc, #212]	; (81160 <xQueueGenericReceive+0x144>)
   8108a:	4798      	blx	r3
   8108c:	e009      	b.n	810a2 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   8108e:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81090:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81092:	b133      	cbz	r3, 810a2 <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81094:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81098:	4b30      	ldr	r3, [pc, #192]	; (8115c <xQueueGenericReceive+0x140>)
   8109a:	4798      	blx	r3
   8109c:	b108      	cbz	r0, 810a2 <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   8109e:	4b30      	ldr	r3, [pc, #192]	; (81160 <xQueueGenericReceive+0x144>)
   810a0:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   810a2:	4b2b      	ldr	r3, [pc, #172]	; (81150 <xQueueGenericReceive+0x134>)
   810a4:	4798      	blx	r3
				return pdPASS;
   810a6:	2001      	movs	r0, #1
   810a8:	e04b      	b.n	81142 <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   810aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   810ae:	b91b      	cbnz	r3, 810b8 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   810b0:	4b27      	ldr	r3, [pc, #156]	; (81150 <xQueueGenericReceive+0x134>)
   810b2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   810b4:	2000      	movs	r0, #0
   810b6:	e044      	b.n	81142 <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   810b8:	b917      	cbnz	r7, 810c0 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   810ba:	a802      	add	r0, sp, #8
   810bc:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   810be:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   810c0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   810c2:	4b28      	ldr	r3, [pc, #160]	; (81164 <xQueueGenericReceive+0x148>)
   810c4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   810c6:	47b0      	blx	r6
   810c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   810ca:	f1b3 3fff 	cmp.w	r3, #4294967295
   810ce:	bf04      	itt	eq
   810d0:	2300      	moveq	r3, #0
   810d2:	6463      	streq	r3, [r4, #68]	; 0x44
   810d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   810d6:	f1b3 3fff 	cmp.w	r3, #4294967295
   810da:	bf04      	itt	eq
   810dc:	2300      	moveq	r3, #0
   810de:	64a3      	streq	r3, [r4, #72]	; 0x48
   810e0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   810e2:	a802      	add	r0, sp, #8
   810e4:	f10d 0106 	add.w	r1, sp, #6
   810e8:	4b1f      	ldr	r3, [pc, #124]	; (81168 <xQueueGenericReceive+0x14c>)
   810ea:	4798      	blx	r3
   810ec:	bb18      	cbnz	r0, 81136 <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   810ee:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   810f0:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   810f4:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   810f6:	f1b8 0f00 	cmp.w	r8, #0
   810fa:	d116      	bne.n	8112a <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   810fc:	6823      	ldr	r3, [r4, #0]
   810fe:	b923      	cbnz	r3, 8110a <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   81100:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81102:	6860      	ldr	r0, [r4, #4]
   81104:	4b19      	ldr	r3, [pc, #100]	; (8116c <xQueueGenericReceive+0x150>)
   81106:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   81108:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8110a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8110e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81112:	4b17      	ldr	r3, [pc, #92]	; (81170 <xQueueGenericReceive+0x154>)
   81114:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81116:	4620      	mov	r0, r4
   81118:	4b16      	ldr	r3, [pc, #88]	; (81174 <xQueueGenericReceive+0x158>)
   8111a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8111c:	4b16      	ldr	r3, [pc, #88]	; (81178 <xQueueGenericReceive+0x15c>)
   8111e:	4798      	blx	r3
   81120:	2800      	cmp	r0, #0
   81122:	d196      	bne.n	81052 <xQueueGenericReceive+0x36>
				{
					portYIELD_WITHIN_API();
   81124:	4b0e      	ldr	r3, [pc, #56]	; (81160 <xQueueGenericReceive+0x144>)
   81126:	4798      	blx	r3
   81128:	e793      	b.n	81052 <xQueueGenericReceive+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8112a:	4620      	mov	r0, r4
   8112c:	4b11      	ldr	r3, [pc, #68]	; (81174 <xQueueGenericReceive+0x158>)
   8112e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81130:	4b11      	ldr	r3, [pc, #68]	; (81178 <xQueueGenericReceive+0x15c>)
   81132:	4798      	blx	r3
   81134:	e78d      	b.n	81052 <xQueueGenericReceive+0x36>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81136:	4620      	mov	r0, r4
   81138:	4b0e      	ldr	r3, [pc, #56]	; (81174 <xQueueGenericReceive+0x158>)
   8113a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8113c:	4b0e      	ldr	r3, [pc, #56]	; (81178 <xQueueGenericReceive+0x15c>)
   8113e:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81140:	2000      	movs	r0, #0
		}
	}
}
   81142:	b005      	add	sp, #20
   81144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81148:	00080a19 	.word	0x00080a19
   8114c:	00080a29 	.word	0x00080a29
   81150:	00080a49 	.word	0x00080a49
   81154:	00080cd9 	.word	0x00080cd9
   81158:	00081aa9 	.word	0x00081aa9
   8115c:	00081965 	.word	0x00081965
   81160:	00080a09 	.word	0x00080a09
   81164:	00081499 	.word	0x00081499
   81168:	00081a11 	.word	0x00081a11
   8116c:	00081ad5 	.word	0x00081ad5
   81170:	000818b9 	.word	0x000818b9
   81174:	00080d01 	.word	0x00080d01
   81178:	000815f5 	.word	0x000815f5
   8117c:	000819e9 	.word	0x000819e9

00081180 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81180:	b538      	push	{r3, r4, r5, lr}
   81182:	4604      	mov	r4, r0
   81184:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81186:	4b0d      	ldr	r3, [pc, #52]	; (811bc <vQueueWaitForMessageRestricted+0x3c>)
   81188:	4798      	blx	r3
   8118a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8118c:	f1b3 3fff 	cmp.w	r3, #4294967295
   81190:	bf04      	itt	eq
   81192:	2300      	moveq	r3, #0
   81194:	6463      	streq	r3, [r4, #68]	; 0x44
   81196:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81198:	f1b3 3fff 	cmp.w	r3, #4294967295
   8119c:	bf04      	itt	eq
   8119e:	2300      	moveq	r3, #0
   811a0:	64a3      	streq	r3, [r4, #72]	; 0x48
   811a2:	4b07      	ldr	r3, [pc, #28]	; (811c0 <vQueueWaitForMessageRestricted+0x40>)
   811a4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   811a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   811a8:	b923      	cbnz	r3, 811b4 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   811aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
   811ae:	4629      	mov	r1, r5
   811b0:	4b04      	ldr	r3, [pc, #16]	; (811c4 <vQueueWaitForMessageRestricted+0x44>)
   811b2:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   811b4:	4620      	mov	r0, r4
   811b6:	4b04      	ldr	r3, [pc, #16]	; (811c8 <vQueueWaitForMessageRestricted+0x48>)
   811b8:	4798      	blx	r3
   811ba:	bd38      	pop	{r3, r4, r5, pc}
   811bc:	00080a29 	.word	0x00080a29
   811c0:	00080a49 	.word	0x00080a49
   811c4:	0008191d 	.word	0x0008191d
   811c8:	00080d01 	.word	0x00080d01

000811cc <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   811cc:	b510      	push	{r4, lr}
   811ce:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   811d0:	4b0f      	ldr	r3, [pc, #60]	; (81210 <prvAddCurrentTaskToDelayedList+0x44>)
   811d2:	681b      	ldr	r3, [r3, #0]
   811d4:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   811d6:	4b0f      	ldr	r3, [pc, #60]	; (81214 <prvAddCurrentTaskToDelayedList+0x48>)
   811d8:	881b      	ldrh	r3, [r3, #0]
   811da:	b29b      	uxth	r3, r3
   811dc:	4298      	cmp	r0, r3
   811de:	d207      	bcs.n	811f0 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   811e0:	4b0d      	ldr	r3, [pc, #52]	; (81218 <prvAddCurrentTaskToDelayedList+0x4c>)
   811e2:	6818      	ldr	r0, [r3, #0]
   811e4:	4b0a      	ldr	r3, [pc, #40]	; (81210 <prvAddCurrentTaskToDelayedList+0x44>)
   811e6:	6819      	ldr	r1, [r3, #0]
   811e8:	3104      	adds	r1, #4
   811ea:	4b0c      	ldr	r3, [pc, #48]	; (8121c <prvAddCurrentTaskToDelayedList+0x50>)
   811ec:	4798      	blx	r3
   811ee:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   811f0:	4b0b      	ldr	r3, [pc, #44]	; (81220 <prvAddCurrentTaskToDelayedList+0x54>)
   811f2:	6818      	ldr	r0, [r3, #0]
   811f4:	4b06      	ldr	r3, [pc, #24]	; (81210 <prvAddCurrentTaskToDelayedList+0x44>)
   811f6:	6819      	ldr	r1, [r3, #0]
   811f8:	3104      	adds	r1, #4
   811fa:	4b08      	ldr	r3, [pc, #32]	; (8121c <prvAddCurrentTaskToDelayedList+0x50>)
   811fc:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   811fe:	4b09      	ldr	r3, [pc, #36]	; (81224 <prvAddCurrentTaskToDelayedList+0x58>)
   81200:	881b      	ldrh	r3, [r3, #0]
   81202:	b29b      	uxth	r3, r3
   81204:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   81206:	bf3c      	itt	cc
   81208:	4b06      	ldrcc	r3, [pc, #24]	; (81224 <prvAddCurrentTaskToDelayedList+0x58>)
   8120a:	801c      	strhcc	r4, [r3, #0]
   8120c:	bd10      	pop	{r4, pc}
   8120e:	bf00      	nop
   81210:	200787dc 	.word	0x200787dc
   81214:	200787f8 	.word	0x200787f8
   81218:	200787fc 	.word	0x200787fc
   8121c:	0008094d 	.word	0x0008094d
   81220:	200786c4 	.word	0x200786c4
   81224:	20070140 	.word	0x20070140

00081228 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8122c:	b083      	sub	sp, #12
   8122e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   81230:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   81234:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81236:	9001      	str	r0, [sp, #4]
   81238:	b918      	cbnz	r0, 81242 <xTaskGenericCreate+0x1a>
   8123a:	4b62      	ldr	r3, [pc, #392]	; (813c4 <xTaskGenericCreate+0x19c>)
   8123c:	4798      	blx	r3
   8123e:	bf00      	nop
   81240:	e7fd      	b.n	8123e <xTaskGenericCreate+0x16>
   81242:	4689      	mov	r9, r1
   81244:	4615      	mov	r5, r2
   81246:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81248:	2f09      	cmp	r7, #9
   8124a:	d903      	bls.n	81254 <xTaskGenericCreate+0x2c>
   8124c:	4b5d      	ldr	r3, [pc, #372]	; (813c4 <xTaskGenericCreate+0x19c>)
   8124e:	4798      	blx	r3
   81250:	bf00      	nop
   81252:	e7fd      	b.n	81250 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81254:	2050      	movs	r0, #80	; 0x50
   81256:	4b5c      	ldr	r3, [pc, #368]	; (813c8 <xTaskGenericCreate+0x1a0>)
   81258:	4798      	blx	r3

	if( pxNewTCB != NULL )
   8125a:	4604      	mov	r4, r0
   8125c:	2800      	cmp	r0, #0
   8125e:	f000 80ab 	beq.w	813b8 <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81262:	2e00      	cmp	r6, #0
   81264:	f040 80a5 	bne.w	813b2 <xTaskGenericCreate+0x18a>
   81268:	00a8      	lsls	r0, r5, #2
   8126a:	4b57      	ldr	r3, [pc, #348]	; (813c8 <xTaskGenericCreate+0x1a0>)
   8126c:	4798      	blx	r3
   8126e:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81270:	b918      	cbnz	r0, 8127a <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81272:	4620      	mov	r0, r4
   81274:	4b55      	ldr	r3, [pc, #340]	; (813cc <xTaskGenericCreate+0x1a4>)
   81276:	4798      	blx	r3
   81278:	e09e      	b.n	813b8 <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   8127a:	21a5      	movs	r1, #165	; 0xa5
   8127c:	00aa      	lsls	r2, r5, #2
   8127e:	4b54      	ldr	r3, [pc, #336]	; (813d0 <xTaskGenericCreate+0x1a8>)
   81280:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   81282:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   81286:	3d01      	subs	r5, #1
   81288:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8128a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   8128e:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81292:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81296:	4649      	mov	r1, r9
   81298:	2210      	movs	r2, #16
   8129a:	4b4e      	ldr	r3, [pc, #312]	; (813d4 <xTaskGenericCreate+0x1ac>)
   8129c:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   8129e:	2300      	movs	r3, #0
   812a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   812a4:	463e      	mov	r6, r7
   812a6:	2f09      	cmp	r7, #9
   812a8:	bf28      	it	cs
   812aa:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   812ac:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   812ae:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   812b0:	f104 0904 	add.w	r9, r4, #4
   812b4:	4648      	mov	r0, r9
   812b6:	f8df a16c 	ldr.w	sl, [pc, #364]	; 81424 <xTaskGenericCreate+0x1fc>
   812ba:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   812bc:	f104 0018 	add.w	r0, r4, #24
   812c0:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   812c2:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   812c4:	f1c6 060a 	rsb	r6, r6, #10
   812c8:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   812ca:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   812cc:	4628      	mov	r0, r5
   812ce:	9901      	ldr	r1, [sp, #4]
   812d0:	465a      	mov	r2, fp
   812d2:	4b41      	ldr	r3, [pc, #260]	; (813d8 <xTaskGenericCreate+0x1b0>)
   812d4:	4798      	blx	r3
   812d6:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   812d8:	f010 0f07 	tst.w	r0, #7
   812dc:	d003      	beq.n	812e6 <xTaskGenericCreate+0xbe>
   812de:	4b39      	ldr	r3, [pc, #228]	; (813c4 <xTaskGenericCreate+0x19c>)
   812e0:	4798      	blx	r3
   812e2:	bf00      	nop
   812e4:	e7fd      	b.n	812e2 <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
   812e6:	f1b8 0f00 	cmp.w	r8, #0
   812ea:	d001      	beq.n	812f0 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   812ec:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   812f0:	4b3a      	ldr	r3, [pc, #232]	; (813dc <xTaskGenericCreate+0x1b4>)
   812f2:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   812f4:	4a3a      	ldr	r2, [pc, #232]	; (813e0 <xTaskGenericCreate+0x1b8>)
   812f6:	6813      	ldr	r3, [r2, #0]
   812f8:	3301      	adds	r3, #1
   812fa:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   812fc:	4b39      	ldr	r3, [pc, #228]	; (813e4 <xTaskGenericCreate+0x1bc>)
   812fe:	681b      	ldr	r3, [r3, #0]
   81300:	bb0b      	cbnz	r3, 81346 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   81302:	4b38      	ldr	r3, [pc, #224]	; (813e4 <xTaskGenericCreate+0x1bc>)
   81304:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81306:	6813      	ldr	r3, [r2, #0]
   81308:	2b01      	cmp	r3, #1
   8130a:	d126      	bne.n	8135a <xTaskGenericCreate+0x132>
   8130c:	4d36      	ldr	r5, [pc, #216]	; (813e8 <xTaskGenericCreate+0x1c0>)
   8130e:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81312:	4e36      	ldr	r6, [pc, #216]	; (813ec <xTaskGenericCreate+0x1c4>)
   81314:	4628      	mov	r0, r5
   81316:	47b0      	blx	r6
   81318:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   8131a:	4545      	cmp	r5, r8
   8131c:	d1fa      	bne.n	81314 <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   8131e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 81428 <xTaskGenericCreate+0x200>
   81322:	4640      	mov	r0, r8
   81324:	4d31      	ldr	r5, [pc, #196]	; (813ec <xTaskGenericCreate+0x1c4>)
   81326:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81328:	4e31      	ldr	r6, [pc, #196]	; (813f0 <xTaskGenericCreate+0x1c8>)
   8132a:	4630      	mov	r0, r6
   8132c:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   8132e:	4831      	ldr	r0, [pc, #196]	; (813f4 <xTaskGenericCreate+0x1cc>)
   81330:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   81332:	4831      	ldr	r0, [pc, #196]	; (813f8 <xTaskGenericCreate+0x1d0>)
   81334:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81336:	4831      	ldr	r0, [pc, #196]	; (813fc <xTaskGenericCreate+0x1d4>)
   81338:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   8133a:	4b31      	ldr	r3, [pc, #196]	; (81400 <xTaskGenericCreate+0x1d8>)
   8133c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81340:	4b30      	ldr	r3, [pc, #192]	; (81404 <xTaskGenericCreate+0x1dc>)
   81342:	601e      	str	r6, [r3, #0]
   81344:	e009      	b.n	8135a <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   81346:	4b30      	ldr	r3, [pc, #192]	; (81408 <xTaskGenericCreate+0x1e0>)
   81348:	681b      	ldr	r3, [r3, #0]
   8134a:	b933      	cbnz	r3, 8135a <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   8134c:	4b25      	ldr	r3, [pc, #148]	; (813e4 <xTaskGenericCreate+0x1bc>)
   8134e:	681b      	ldr	r3, [r3, #0]
   81350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81352:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   81354:	bf24      	itt	cs
   81356:	4b23      	ldrcs	r3, [pc, #140]	; (813e4 <xTaskGenericCreate+0x1bc>)
   81358:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   8135a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8135c:	4b2b      	ldr	r3, [pc, #172]	; (8140c <xTaskGenericCreate+0x1e4>)
   8135e:	681b      	ldr	r3, [r3, #0]
   81360:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81362:	bf84      	itt	hi
   81364:	4b29      	ldrhi	r3, [pc, #164]	; (8140c <xTaskGenericCreate+0x1e4>)
   81366:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81368:	4a29      	ldr	r2, [pc, #164]	; (81410 <xTaskGenericCreate+0x1e8>)
   8136a:	6813      	ldr	r3, [r2, #0]
   8136c:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   8136e:	3301      	adds	r3, #1
   81370:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   81372:	4b28      	ldr	r3, [pc, #160]	; (81414 <xTaskGenericCreate+0x1ec>)
   81374:	681b      	ldr	r3, [r3, #0]
   81376:	4298      	cmp	r0, r3
   81378:	bf84      	itt	hi
   8137a:	4b26      	ldrhi	r3, [pc, #152]	; (81414 <xTaskGenericCreate+0x1ec>)
   8137c:	6018      	strhi	r0, [r3, #0]
   8137e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81382:	4b19      	ldr	r3, [pc, #100]	; (813e8 <xTaskGenericCreate+0x1c0>)
   81384:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81388:	4649      	mov	r1, r9
   8138a:	4b23      	ldr	r3, [pc, #140]	; (81418 <xTaskGenericCreate+0x1f0>)
   8138c:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   8138e:	4b23      	ldr	r3, [pc, #140]	; (8141c <xTaskGenericCreate+0x1f4>)
   81390:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81392:	4b1d      	ldr	r3, [pc, #116]	; (81408 <xTaskGenericCreate+0x1e0>)
   81394:	681b      	ldr	r3, [r3, #0]
   81396:	b143      	cbz	r3, 813aa <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81398:	4b12      	ldr	r3, [pc, #72]	; (813e4 <xTaskGenericCreate+0x1bc>)
   8139a:	681b      	ldr	r3, [r3, #0]
   8139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8139e:	429f      	cmp	r7, r3
   813a0:	d905      	bls.n	813ae <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
   813a2:	4b1f      	ldr	r3, [pc, #124]	; (81420 <xTaskGenericCreate+0x1f8>)
   813a4:	4798      	blx	r3
   813a6:	2001      	movs	r0, #1
   813a8:	e008      	b.n	813bc <xTaskGenericCreate+0x194>
   813aa:	2001      	movs	r0, #1
   813ac:	e006      	b.n	813bc <xTaskGenericCreate+0x194>
   813ae:	2001      	movs	r0, #1
   813b0:	e004      	b.n	813bc <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   813b2:	6306      	str	r6, [r0, #48]	; 0x30
   813b4:	4630      	mov	r0, r6
   813b6:	e760      	b.n	8127a <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   813b8:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   813bc:	b003      	add	sp, #12
   813be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813c2:	bf00      	nop
   813c4:	00080a19 	.word	0x00080a19
   813c8:	00080b75 	.word	0x00080b75
   813cc:	00080c3d 	.word	0x00080c3d
   813d0:	000831d1 	.word	0x000831d1
   813d4:	0008326d 	.word	0x0008326d
   813d8:	000809cd 	.word	0x000809cd
   813dc:	00080a29 	.word	0x00080a29
   813e0:	20078804 	.word	0x20078804
   813e4:	200787dc 	.word	0x200787dc
   813e8:	200786fc 	.word	0x200786fc
   813ec:	00080911 	.word	0x00080911
   813f0:	200786e4 	.word	0x200786e4
   813f4:	200787e0 	.word	0x200787e0
   813f8:	200787c4 	.word	0x200787c4
   813fc:	200786b0 	.word	0x200786b0
   81400:	200786c4 	.word	0x200786c4
   81404:	200787fc 	.word	0x200787fc
   81408:	200786c8 	.word	0x200786c8
   8140c:	2007880c 	.word	0x2007880c
   81410:	20078800 	.word	0x20078800
   81414:	200786f8 	.word	0x200786f8
   81418:	00080931 	.word	0x00080931
   8141c:	00080a49 	.word	0x00080a49
   81420:	00080a09 	.word	0x00080a09
   81424:	00080929 	.word	0x00080929
   81428:	200786d0 	.word	0x200786d0

0008142c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   8142c:	b510      	push	{r4, lr}
   8142e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81430:	2300      	movs	r3, #0
   81432:	9300      	str	r3, [sp, #0]
   81434:	9301      	str	r3, [sp, #4]
   81436:	9302      	str	r3, [sp, #8]
   81438:	9303      	str	r3, [sp, #12]
   8143a:	480f      	ldr	r0, [pc, #60]	; (81478 <vTaskStartScheduler+0x4c>)
   8143c:	490f      	ldr	r1, [pc, #60]	; (8147c <vTaskStartScheduler+0x50>)
   8143e:	f44f 7280 	mov.w	r2, #256	; 0x100
   81442:	4c0f      	ldr	r4, [pc, #60]	; (81480 <vTaskStartScheduler+0x54>)
   81444:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81446:	2801      	cmp	r0, #1
   81448:	d10e      	bne.n	81468 <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   8144a:	4b0e      	ldr	r3, [pc, #56]	; (81484 <vTaskStartScheduler+0x58>)
   8144c:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   8144e:	2801      	cmp	r0, #1
   81450:	d10a      	bne.n	81468 <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81452:	4b0d      	ldr	r3, [pc, #52]	; (81488 <vTaskStartScheduler+0x5c>)
   81454:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81456:	2201      	movs	r2, #1
   81458:	4b0c      	ldr	r3, [pc, #48]	; (8148c <vTaskStartScheduler+0x60>)
   8145a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   8145c:	2200      	movs	r2, #0
   8145e:	4b0c      	ldr	r3, [pc, #48]	; (81490 <vTaskStartScheduler+0x64>)
   81460:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81462:	4b0c      	ldr	r3, [pc, #48]	; (81494 <vTaskStartScheduler+0x68>)
   81464:	4798      	blx	r3
   81466:	e004      	b.n	81472 <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81468:	b918      	cbnz	r0, 81472 <vTaskStartScheduler+0x46>
   8146a:	4b07      	ldr	r3, [pc, #28]	; (81488 <vTaskStartScheduler+0x5c>)
   8146c:	4798      	blx	r3
   8146e:	bf00      	nop
   81470:	e7fd      	b.n	8146e <vTaskStartScheduler+0x42>
}
   81472:	b004      	add	sp, #16
   81474:	bd10      	pop	{r4, pc}
   81476:	bf00      	nop
   81478:	00081791 	.word	0x00081791
   8147c:	000835d0 	.word	0x000835d0
   81480:	00081229 	.word	0x00081229
   81484:	00081c51 	.word	0x00081c51
   81488:	00080a19 	.word	0x00080a19
   8148c:	200786c8 	.word	0x200786c8
   81490:	200787f8 	.word	0x200787f8
   81494:	00080ae5 	.word	0x00080ae5

00081498 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81498:	4a02      	ldr	r2, [pc, #8]	; (814a4 <vTaskSuspendAll+0xc>)
   8149a:	6813      	ldr	r3, [r2, #0]
   8149c:	3301      	adds	r3, #1
   8149e:	6013      	str	r3, [r2, #0]
   814a0:	4770      	bx	lr
   814a2:	bf00      	nop
   814a4:	200787f4 	.word	0x200787f4

000814a8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   814a8:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   814aa:	4b04      	ldr	r3, [pc, #16]	; (814bc <xTaskGetTickCount+0x14>)
   814ac:	4798      	blx	r3
	{
		xTicks = xTickCount;
   814ae:	4b04      	ldr	r3, [pc, #16]	; (814c0 <xTaskGetTickCount+0x18>)
   814b0:	881c      	ldrh	r4, [r3, #0]
   814b2:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   814b4:	4b03      	ldr	r3, [pc, #12]	; (814c4 <xTaskGetTickCount+0x1c>)
   814b6:	4798      	blx	r3

	return xTicks;
}
   814b8:	4620      	mov	r0, r4
   814ba:	bd10      	pop	{r4, pc}
   814bc:	00080a29 	.word	0x00080a29
   814c0:	200787f8 	.word	0x200787f8
   814c4:	00080a49 	.word	0x00080a49

000814c8 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   814c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   814cc:	4b3d      	ldr	r3, [pc, #244]	; (815c4 <vTaskIncrementTick+0xfc>)
   814ce:	681b      	ldr	r3, [r3, #0]
   814d0:	2b00      	cmp	r3, #0
   814d2:	d171      	bne.n	815b8 <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   814d4:	4a3c      	ldr	r2, [pc, #240]	; (815c8 <vTaskIncrementTick+0x100>)
   814d6:	8813      	ldrh	r3, [r2, #0]
   814d8:	3301      	adds	r3, #1
   814da:	b29b      	uxth	r3, r3
   814dc:	8013      	strh	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
   814de:	8813      	ldrh	r3, [r2, #0]
   814e0:	b29b      	uxth	r3, r3
   814e2:	bb03      	cbnz	r3, 81526 <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   814e4:	4b39      	ldr	r3, [pc, #228]	; (815cc <vTaskIncrementTick+0x104>)
   814e6:	681b      	ldr	r3, [r3, #0]
   814e8:	681b      	ldr	r3, [r3, #0]
   814ea:	b11b      	cbz	r3, 814f4 <vTaskIncrementTick+0x2c>
   814ec:	4b38      	ldr	r3, [pc, #224]	; (815d0 <vTaskIncrementTick+0x108>)
   814ee:	4798      	blx	r3
   814f0:	bf00      	nop
   814f2:	e7fd      	b.n	814f0 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   814f4:	4b35      	ldr	r3, [pc, #212]	; (815cc <vTaskIncrementTick+0x104>)
   814f6:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   814f8:	4a36      	ldr	r2, [pc, #216]	; (815d4 <vTaskIncrementTick+0x10c>)
   814fa:	6810      	ldr	r0, [r2, #0]
   814fc:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   814fe:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81500:	4935      	ldr	r1, [pc, #212]	; (815d8 <vTaskIncrementTick+0x110>)
   81502:	680a      	ldr	r2, [r1, #0]
   81504:	3201      	adds	r2, #1
   81506:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81508:	681b      	ldr	r3, [r3, #0]
   8150a:	681b      	ldr	r3, [r3, #0]
   8150c:	b923      	cbnz	r3, 81518 <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   8150e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81512:	4b32      	ldr	r3, [pc, #200]	; (815dc <vTaskIncrementTick+0x114>)
   81514:	801a      	strh	r2, [r3, #0]
   81516:	e006      	b.n	81526 <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81518:	4b2c      	ldr	r3, [pc, #176]	; (815cc <vTaskIncrementTick+0x104>)
   8151a:	681b      	ldr	r3, [r3, #0]
   8151c:	68db      	ldr	r3, [r3, #12]
   8151e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81520:	889a      	ldrh	r2, [r3, #4]
   81522:	4b2e      	ldr	r3, [pc, #184]	; (815dc <vTaskIncrementTick+0x114>)
   81524:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81526:	4b28      	ldr	r3, [pc, #160]	; (815c8 <vTaskIncrementTick+0x100>)
   81528:	881a      	ldrh	r2, [r3, #0]
   8152a:	b292      	uxth	r2, r2
   8152c:	4b2b      	ldr	r3, [pc, #172]	; (815dc <vTaskIncrementTick+0x114>)
   8152e:	881b      	ldrh	r3, [r3, #0]
   81530:	b29b      	uxth	r3, r3
   81532:	429a      	cmp	r2, r3
   81534:	d344      	bcc.n	815c0 <vTaskIncrementTick+0xf8>
   81536:	4b25      	ldr	r3, [pc, #148]	; (815cc <vTaskIncrementTick+0x104>)
   81538:	681b      	ldr	r3, [r3, #0]
   8153a:	681b      	ldr	r3, [r3, #0]
   8153c:	b16b      	cbz	r3, 8155a <vTaskIncrementTick+0x92>
   8153e:	4b23      	ldr	r3, [pc, #140]	; (815cc <vTaskIncrementTick+0x104>)
   81540:	681b      	ldr	r3, [r3, #0]
   81542:	68db      	ldr	r3, [r3, #12]
   81544:	68dc      	ldr	r4, [r3, #12]
   81546:	88a2      	ldrh	r2, [r4, #4]
   81548:	4b1f      	ldr	r3, [pc, #124]	; (815c8 <vTaskIncrementTick+0x100>)
   8154a:	881b      	ldrh	r3, [r3, #0]
   8154c:	b29b      	uxth	r3, r3
   8154e:	429a      	cmp	r2, r3
   81550:	d813      	bhi.n	8157a <vTaskIncrementTick+0xb2>
   81552:	4d23      	ldr	r5, [pc, #140]	; (815e0 <vTaskIncrementTick+0x118>)
   81554:	4e23      	ldr	r6, [pc, #140]	; (815e4 <vTaskIncrementTick+0x11c>)
   81556:	4f24      	ldr	r7, [pc, #144]	; (815e8 <vTaskIncrementTick+0x120>)
   81558:	e013      	b.n	81582 <vTaskIncrementTick+0xba>
   8155a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8155e:	4b1f      	ldr	r3, [pc, #124]	; (815dc <vTaskIncrementTick+0x114>)
   81560:	801a      	strh	r2, [r3, #0]
   81562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81566:	4b19      	ldr	r3, [pc, #100]	; (815cc <vTaskIncrementTick+0x104>)
   81568:	681b      	ldr	r3, [r3, #0]
   8156a:	68db      	ldr	r3, [r3, #12]
   8156c:	68dc      	ldr	r4, [r3, #12]
   8156e:	88a2      	ldrh	r2, [r4, #4]
   81570:	4b15      	ldr	r3, [pc, #84]	; (815c8 <vTaskIncrementTick+0x100>)
   81572:	881b      	ldrh	r3, [r3, #0]
   81574:	b29b      	uxth	r3, r3
   81576:	429a      	cmp	r2, r3
   81578:	d903      	bls.n	81582 <vTaskIncrementTick+0xba>
   8157a:	4b18      	ldr	r3, [pc, #96]	; (815dc <vTaskIncrementTick+0x114>)
   8157c:	801a      	strh	r2, [r3, #0]
   8157e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81582:	f104 0804 	add.w	r8, r4, #4
   81586:	4640      	mov	r0, r8
   81588:	47a8      	blx	r5
   8158a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8158c:	b113      	cbz	r3, 81594 <vTaskIncrementTick+0xcc>
   8158e:	f104 0018 	add.w	r0, r4, #24
   81592:	47a8      	blx	r5
   81594:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81596:	6833      	ldr	r3, [r6, #0]
   81598:	4298      	cmp	r0, r3
   8159a:	bf88      	it	hi
   8159c:	6030      	strhi	r0, [r6, #0]
   8159e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   815a2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   815a6:	4641      	mov	r1, r8
   815a8:	4b10      	ldr	r3, [pc, #64]	; (815ec <vTaskIncrementTick+0x124>)
   815aa:	4798      	blx	r3
   815ac:	4b07      	ldr	r3, [pc, #28]	; (815cc <vTaskIncrementTick+0x104>)
   815ae:	681b      	ldr	r3, [r3, #0]
   815b0:	681b      	ldr	r3, [r3, #0]
   815b2:	2b00      	cmp	r3, #0
   815b4:	d1d7      	bne.n	81566 <vTaskIncrementTick+0x9e>
   815b6:	e7d0      	b.n	8155a <vTaskIncrementTick+0x92>
	}
	else
	{
		++uxMissedTicks;
   815b8:	4a0d      	ldr	r2, [pc, #52]	; (815f0 <vTaskIncrementTick+0x128>)
   815ba:	6813      	ldr	r3, [r2, #0]
   815bc:	3301      	adds	r3, #1
   815be:	6013      	str	r3, [r2, #0]
   815c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   815c4:	200787f4 	.word	0x200787f4
   815c8:	200787f8 	.word	0x200787f8
   815cc:	200786c4 	.word	0x200786c4
   815d0:	00080a19 	.word	0x00080a19
   815d4:	200787fc 	.word	0x200787fc
   815d8:	200787d8 	.word	0x200787d8
   815dc:	20070140 	.word	0x20070140
   815e0:	00080991 	.word	0x00080991
   815e4:	200786f8 	.word	0x200786f8
   815e8:	200786fc 	.word	0x200786fc
   815ec:	00080931 	.word	0x00080931
   815f0:	200786ac 	.word	0x200786ac

000815f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   815f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   815f8:	4b30      	ldr	r3, [pc, #192]	; (816bc <xTaskResumeAll+0xc8>)
   815fa:	681b      	ldr	r3, [r3, #0]
   815fc:	b91b      	cbnz	r3, 81606 <xTaskResumeAll+0x12>
   815fe:	4b30      	ldr	r3, [pc, #192]	; (816c0 <xTaskResumeAll+0xcc>)
   81600:	4798      	blx	r3
   81602:	bf00      	nop
   81604:	e7fd      	b.n	81602 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81606:	4b2f      	ldr	r3, [pc, #188]	; (816c4 <xTaskResumeAll+0xd0>)
   81608:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   8160a:	4b2c      	ldr	r3, [pc, #176]	; (816bc <xTaskResumeAll+0xc8>)
   8160c:	681a      	ldr	r2, [r3, #0]
   8160e:	3a01      	subs	r2, #1
   81610:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81612:	681b      	ldr	r3, [r3, #0]
   81614:	2b00      	cmp	r3, #0
   81616:	d149      	bne.n	816ac <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81618:	4b2b      	ldr	r3, [pc, #172]	; (816c8 <xTaskResumeAll+0xd4>)
   8161a:	681b      	ldr	r3, [r3, #0]
   8161c:	bb03      	cbnz	r3, 81660 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8161e:	2400      	movs	r4, #0
   81620:	e047      	b.n	816b2 <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81622:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81626:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81628:	f104 0018 	add.w	r0, r4, #24
   8162c:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8162e:	f104 0904 	add.w	r9, r4, #4
   81632:	4648      	mov	r0, r9
   81634:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81636:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81638:	6833      	ldr	r3, [r6, #0]
   8163a:	4298      	cmp	r0, r3
   8163c:	bf88      	it	hi
   8163e:	6030      	strhi	r0, [r6, #0]
   81640:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81644:	4b21      	ldr	r3, [pc, #132]	; (816cc <xTaskResumeAll+0xd8>)
   81646:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8164a:	4649      	mov	r1, r9
   8164c:	4b20      	ldr	r3, [pc, #128]	; (816d0 <xTaskResumeAll+0xdc>)
   8164e:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81650:	4b20      	ldr	r3, [pc, #128]	; (816d4 <xTaskResumeAll+0xe0>)
   81652:	681b      	ldr	r3, [r3, #0]
   81654:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81658:	429a      	cmp	r2, r3
   8165a:	bf28      	it	cs
   8165c:	2501      	movcs	r5, #1
   8165e:	e004      	b.n	8166a <xTaskResumeAll+0x76>
   81660:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81662:	f8df 8090 	ldr.w	r8, [pc, #144]	; 816f4 <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81666:	4f1c      	ldr	r7, [pc, #112]	; (816d8 <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81668:	4e1c      	ldr	r6, [pc, #112]	; (816dc <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8166a:	f8d8 3000 	ldr.w	r3, [r8]
   8166e:	2b00      	cmp	r3, #0
   81670:	d1d7      	bne.n	81622 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81672:	4b1b      	ldr	r3, [pc, #108]	; (816e0 <xTaskResumeAll+0xec>)
   81674:	681b      	ldr	r3, [r3, #0]
   81676:	b163      	cbz	r3, 81692 <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81678:	4b19      	ldr	r3, [pc, #100]	; (816e0 <xTaskResumeAll+0xec>)
   8167a:	681b      	ldr	r3, [r3, #0]
   8167c:	b17b      	cbz	r3, 8169e <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
   8167e:	4d19      	ldr	r5, [pc, #100]	; (816e4 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   81680:	4c17      	ldr	r4, [pc, #92]	; (816e0 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81682:	47a8      	blx	r5
						--uxMissedTicks;
   81684:	6823      	ldr	r3, [r4, #0]
   81686:	3b01      	subs	r3, #1
   81688:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8168a:	6823      	ldr	r3, [r4, #0]
   8168c:	2b00      	cmp	r3, #0
   8168e:	d1f8      	bne.n	81682 <xTaskResumeAll+0x8e>
   81690:	e005      	b.n	8169e <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81692:	2d01      	cmp	r5, #1
   81694:	d003      	beq.n	8169e <xTaskResumeAll+0xaa>
   81696:	4b14      	ldr	r3, [pc, #80]	; (816e8 <xTaskResumeAll+0xf4>)
   81698:	681b      	ldr	r3, [r3, #0]
   8169a:	2b01      	cmp	r3, #1
   8169c:	d108      	bne.n	816b0 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   8169e:	2200      	movs	r2, #0
   816a0:	4b11      	ldr	r3, [pc, #68]	; (816e8 <xTaskResumeAll+0xf4>)
   816a2:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   816a4:	4b11      	ldr	r3, [pc, #68]	; (816ec <xTaskResumeAll+0xf8>)
   816a6:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   816a8:	2401      	movs	r4, #1
   816aa:	e002      	b.n	816b2 <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   816ac:	2400      	movs	r4, #0
   816ae:	e000      	b.n	816b2 <xTaskResumeAll+0xbe>
   816b0:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   816b2:	4b0f      	ldr	r3, [pc, #60]	; (816f0 <xTaskResumeAll+0xfc>)
   816b4:	4798      	blx	r3

	return xAlreadyYielded;
}
   816b6:	4620      	mov	r0, r4
   816b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   816bc:	200787f4 	.word	0x200787f4
   816c0:	00080a19 	.word	0x00080a19
   816c4:	00080a29 	.word	0x00080a29
   816c8:	20078804 	.word	0x20078804
   816cc:	200786fc 	.word	0x200786fc
   816d0:	00080931 	.word	0x00080931
   816d4:	200787dc 	.word	0x200787dc
   816d8:	00080991 	.word	0x00080991
   816dc:	200786f8 	.word	0x200786f8
   816e0:	200786ac 	.word	0x200786ac
   816e4:	000814c9 	.word	0x000814c9
   816e8:	20078808 	.word	0x20078808
   816ec:	00080a09 	.word	0x00080a09
   816f0:	00080a49 	.word	0x00080a49
   816f4:	200787e0 	.word	0x200787e0

000816f8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   816f8:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   816fa:	b918      	cbnz	r0, 81704 <vTaskDelayUntil+0xc>
   816fc:	4b1c      	ldr	r3, [pc, #112]	; (81770 <vTaskDelayUntil+0x78>)
   816fe:	4798      	blx	r3
   81700:	bf00      	nop
   81702:	e7fd      	b.n	81700 <vTaskDelayUntil+0x8>
   81704:	460c      	mov	r4, r1
   81706:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   81708:	b919      	cbnz	r1, 81712 <vTaskDelayUntil+0x1a>
   8170a:	4b19      	ldr	r3, [pc, #100]	; (81770 <vTaskDelayUntil+0x78>)
   8170c:	4798      	blx	r3
   8170e:	bf00      	nop
   81710:	e7fd      	b.n	8170e <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   81712:	4b18      	ldr	r3, [pc, #96]	; (81774 <vTaskDelayUntil+0x7c>)
   81714:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81716:	882b      	ldrh	r3, [r5, #0]
   81718:	441c      	add	r4, r3
   8171a:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   8171c:	4a16      	ldr	r2, [pc, #88]	; (81778 <vTaskDelayUntil+0x80>)
   8171e:	8812      	ldrh	r2, [r2, #0]
   81720:	b292      	uxth	r2, r2
   81722:	4293      	cmp	r3, r2
   81724:	d908      	bls.n	81738 <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81726:	42a3      	cmp	r3, r4
   81728:	d91e      	bls.n	81768 <vTaskDelayUntil+0x70>
   8172a:	4b13      	ldr	r3, [pc, #76]	; (81778 <vTaskDelayUntil+0x80>)
   8172c:	881b      	ldrh	r3, [r3, #0]
   8172e:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81730:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   81732:	429c      	cmp	r4, r3
   81734:	d910      	bls.n	81758 <vTaskDelayUntil+0x60>
   81736:	e007      	b.n	81748 <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81738:	42a3      	cmp	r3, r4
   8173a:	d813      	bhi.n	81764 <vTaskDelayUntil+0x6c>
   8173c:	4b0e      	ldr	r3, [pc, #56]	; (81778 <vTaskDelayUntil+0x80>)
   8173e:	881b      	ldrh	r3, [r3, #0]
   81740:	b29b      	uxth	r3, r3
   81742:	429c      	cmp	r4, r3
   81744:	d80e      	bhi.n	81764 <vTaskDelayUntil+0x6c>
   81746:	e00f      	b.n	81768 <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81748:	4b0c      	ldr	r3, [pc, #48]	; (8177c <vTaskDelayUntil+0x84>)
   8174a:	6818      	ldr	r0, [r3, #0]
   8174c:	3004      	adds	r0, #4
   8174e:	4b0c      	ldr	r3, [pc, #48]	; (81780 <vTaskDelayUntil+0x88>)
   81750:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81752:	4620      	mov	r0, r4
   81754:	4b0b      	ldr	r3, [pc, #44]	; (81784 <vTaskDelayUntil+0x8c>)
   81756:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   81758:	4b0b      	ldr	r3, [pc, #44]	; (81788 <vTaskDelayUntil+0x90>)
   8175a:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   8175c:	b930      	cbnz	r0, 8176c <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   8175e:	4b0b      	ldr	r3, [pc, #44]	; (8178c <vTaskDelayUntil+0x94>)
   81760:	4798      	blx	r3
   81762:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81764:	802c      	strh	r4, [r5, #0]
   81766:	e7ef      	b.n	81748 <vTaskDelayUntil+0x50>
   81768:	802c      	strh	r4, [r5, #0]
   8176a:	e7f5      	b.n	81758 <vTaskDelayUntil+0x60>
   8176c:	bd38      	pop	{r3, r4, r5, pc}
   8176e:	bf00      	nop
   81770:	00080a19 	.word	0x00080a19
   81774:	00081499 	.word	0x00081499
   81778:	200787f8 	.word	0x200787f8
   8177c:	200787dc 	.word	0x200787dc
   81780:	00080991 	.word	0x00080991
   81784:	000811cd 	.word	0x000811cd
   81788:	000815f5 	.word	0x000815f5
   8178c:	00080a09 	.word	0x00080a09

00081790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81790:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81792:	4d15      	ldr	r5, [pc, #84]	; (817e8 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81794:	4e15      	ldr	r6, [pc, #84]	; (817ec <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81796:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8180c <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   8179a:	4f15      	ldr	r7, [pc, #84]	; (817f0 <prvIdleTask+0x60>)
   8179c:	e019      	b.n	817d2 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   8179e:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   817a0:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   817a2:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
   817a4:	b1ac      	cbz	r4, 817d2 <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   817a6:	4b13      	ldr	r3, [pc, #76]	; (817f4 <prvIdleTask+0x64>)
   817a8:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   817aa:	68f3      	ldr	r3, [r6, #12]
   817ac:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   817ae:	1d20      	adds	r0, r4, #4
   817b0:	4b11      	ldr	r3, [pc, #68]	; (817f8 <prvIdleTask+0x68>)
   817b2:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   817b4:	4a11      	ldr	r2, [pc, #68]	; (817fc <prvIdleTask+0x6c>)
   817b6:	6813      	ldr	r3, [r2, #0]
   817b8:	3b01      	subs	r3, #1
   817ba:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   817bc:	682b      	ldr	r3, [r5, #0]
   817be:	3b01      	subs	r3, #1
   817c0:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   817c2:	4b0f      	ldr	r3, [pc, #60]	; (81800 <prvIdleTask+0x70>)
   817c4:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   817c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   817c8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 81810 <prvIdleTask+0x80>
   817cc:	47c8      	blx	r9
		vPortFree( pxTCB );
   817ce:	4620      	mov	r0, r4
   817d0:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   817d2:	682b      	ldr	r3, [r5, #0]
   817d4:	2b00      	cmp	r3, #0
   817d6:	d1e2      	bne.n	8179e <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   817d8:	4b0a      	ldr	r3, [pc, #40]	; (81804 <prvIdleTask+0x74>)
   817da:	681b      	ldr	r3, [r3, #0]
   817dc:	2b01      	cmp	r3, #1
   817de:	d9f8      	bls.n	817d2 <prvIdleTask+0x42>
			{
				taskYIELD();
   817e0:	4b09      	ldr	r3, [pc, #36]	; (81808 <prvIdleTask+0x78>)
   817e2:	4798      	blx	r3
   817e4:	e7d7      	b.n	81796 <prvIdleTask+0x6>
   817e6:	bf00      	nop
   817e8:	200786cc 	.word	0x200786cc
   817ec:	200787c4 	.word	0x200787c4
   817f0:	000815f5 	.word	0x000815f5
   817f4:	00080a29 	.word	0x00080a29
   817f8:	00080991 	.word	0x00080991
   817fc:	20078804 	.word	0x20078804
   81800:	00080a49 	.word	0x00080a49
   81804:	200786fc 	.word	0x200786fc
   81808:	00080a09 	.word	0x00080a09
   8180c:	00081499 	.word	0x00081499
   81810:	00080c3d 	.word	0x00080c3d

00081814 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81814:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81816:	4b22      	ldr	r3, [pc, #136]	; (818a0 <vTaskSwitchContext+0x8c>)
   81818:	681b      	ldr	r3, [r3, #0]
   8181a:	b96b      	cbnz	r3, 81838 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8181c:	4b21      	ldr	r3, [pc, #132]	; (818a4 <vTaskSwitchContext+0x90>)
   8181e:	681b      	ldr	r3, [r3, #0]
   81820:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81824:	009b      	lsls	r3, r3, #2
   81826:	4a20      	ldr	r2, [pc, #128]	; (818a8 <vTaskSwitchContext+0x94>)
   81828:	58d3      	ldr	r3, [r2, r3]
   8182a:	b9cb      	cbnz	r3, 81860 <vTaskSwitchContext+0x4c>
   8182c:	4b1d      	ldr	r3, [pc, #116]	; (818a4 <vTaskSwitchContext+0x90>)
   8182e:	681b      	ldr	r3, [r3, #0]
   81830:	b143      	cbz	r3, 81844 <vTaskSwitchContext+0x30>
   81832:	4a1c      	ldr	r2, [pc, #112]	; (818a4 <vTaskSwitchContext+0x90>)
   81834:	491c      	ldr	r1, [pc, #112]	; (818a8 <vTaskSwitchContext+0x94>)
   81836:	e009      	b.n	8184c <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81838:	2201      	movs	r2, #1
   8183a:	4b1c      	ldr	r3, [pc, #112]	; (818ac <vTaskSwitchContext+0x98>)
   8183c:	601a      	str	r2, [r3, #0]
   8183e:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81840:	6813      	ldr	r3, [r2, #0]
   81842:	b91b      	cbnz	r3, 8184c <vTaskSwitchContext+0x38>
   81844:	4b1a      	ldr	r3, [pc, #104]	; (818b0 <vTaskSwitchContext+0x9c>)
   81846:	4798      	blx	r3
   81848:	bf00      	nop
   8184a:	e7fd      	b.n	81848 <vTaskSwitchContext+0x34>
   8184c:	6813      	ldr	r3, [r2, #0]
   8184e:	3b01      	subs	r3, #1
   81850:	6013      	str	r3, [r2, #0]
   81852:	6813      	ldr	r3, [r2, #0]
   81854:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81858:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8185c:	2b00      	cmp	r3, #0
   8185e:	d0ef      	beq.n	81840 <vTaskSwitchContext+0x2c>
   81860:	4b10      	ldr	r3, [pc, #64]	; (818a4 <vTaskSwitchContext+0x90>)
   81862:	681b      	ldr	r3, [r3, #0]
   81864:	4a10      	ldr	r2, [pc, #64]	; (818a8 <vTaskSwitchContext+0x94>)
   81866:	0099      	lsls	r1, r3, #2
   81868:	18c8      	adds	r0, r1, r3
   8186a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   8186e:	6844      	ldr	r4, [r0, #4]
   81870:	6864      	ldr	r4, [r4, #4]
   81872:	6044      	str	r4, [r0, #4]
   81874:	4602      	mov	r2, r0
   81876:	3208      	adds	r2, #8
   81878:	4294      	cmp	r4, r2
   8187a:	d106      	bne.n	8188a <vTaskSwitchContext+0x76>
   8187c:	6860      	ldr	r0, [r4, #4]
   8187e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   81882:	4a09      	ldr	r2, [pc, #36]	; (818a8 <vTaskSwitchContext+0x94>)
   81884:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81888:	6050      	str	r0, [r2, #4]
   8188a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8188e:	4a06      	ldr	r2, [pc, #24]	; (818a8 <vTaskSwitchContext+0x94>)
   81890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81894:	685b      	ldr	r3, [r3, #4]
   81896:	68da      	ldr	r2, [r3, #12]
   81898:	4b06      	ldr	r3, [pc, #24]	; (818b4 <vTaskSwitchContext+0xa0>)
   8189a:	601a      	str	r2, [r3, #0]
   8189c:	bd10      	pop	{r4, pc}
   8189e:	bf00      	nop
   818a0:	200787f4 	.word	0x200787f4
   818a4:	200786f8 	.word	0x200786f8
   818a8:	200786fc 	.word	0x200786fc
   818ac:	20078808 	.word	0x20078808
   818b0:	00080a19 	.word	0x00080a19
   818b4:	200787dc 	.word	0x200787dc

000818b8 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   818b8:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   818ba:	b918      	cbnz	r0, 818c4 <vTaskPlaceOnEventList+0xc>
   818bc:	4b0f      	ldr	r3, [pc, #60]	; (818fc <vTaskPlaceOnEventList+0x44>)
   818be:	4798      	blx	r3
   818c0:	bf00      	nop
   818c2:	e7fd      	b.n	818c0 <vTaskPlaceOnEventList+0x8>
   818c4:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   818c6:	4d0e      	ldr	r5, [pc, #56]	; (81900 <vTaskPlaceOnEventList+0x48>)
   818c8:	6829      	ldr	r1, [r5, #0]
   818ca:	3118      	adds	r1, #24
   818cc:	4b0d      	ldr	r3, [pc, #52]	; (81904 <vTaskPlaceOnEventList+0x4c>)
   818ce:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   818d0:	6828      	ldr	r0, [r5, #0]
   818d2:	3004      	adds	r0, #4
   818d4:	4b0c      	ldr	r3, [pc, #48]	; (81908 <vTaskPlaceOnEventList+0x50>)
   818d6:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   818d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   818dc:	429c      	cmp	r4, r3
   818de:	d105      	bne.n	818ec <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   818e0:	6829      	ldr	r1, [r5, #0]
   818e2:	480a      	ldr	r0, [pc, #40]	; (8190c <vTaskPlaceOnEventList+0x54>)
   818e4:	3104      	adds	r1, #4
   818e6:	4b0a      	ldr	r3, [pc, #40]	; (81910 <vTaskPlaceOnEventList+0x58>)
   818e8:	4798      	blx	r3
   818ea:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   818ec:	4b09      	ldr	r3, [pc, #36]	; (81914 <vTaskPlaceOnEventList+0x5c>)
   818ee:	8818      	ldrh	r0, [r3, #0]
   818f0:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   818f2:	b280      	uxth	r0, r0
   818f4:	4b08      	ldr	r3, [pc, #32]	; (81918 <vTaskPlaceOnEventList+0x60>)
   818f6:	4798      	blx	r3
   818f8:	bd38      	pop	{r3, r4, r5, pc}
   818fa:	bf00      	nop
   818fc:	00080a19 	.word	0x00080a19
   81900:	200787dc 	.word	0x200787dc
   81904:	0008094d 	.word	0x0008094d
   81908:	00080991 	.word	0x00080991
   8190c:	200786b0 	.word	0x200786b0
   81910:	00080931 	.word	0x00080931
   81914:	200787f8 	.word	0x200787f8
   81918:	000811cd 	.word	0x000811cd

0008191c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   8191c:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   8191e:	b918      	cbnz	r0, 81928 <vTaskPlaceOnEventListRestricted+0xc>
   81920:	4b0a      	ldr	r3, [pc, #40]	; (8194c <vTaskPlaceOnEventListRestricted+0x30>)
   81922:	4798      	blx	r3
   81924:	bf00      	nop
   81926:	e7fd      	b.n	81924 <vTaskPlaceOnEventListRestricted+0x8>
   81928:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8192a:	4c09      	ldr	r4, [pc, #36]	; (81950 <vTaskPlaceOnEventListRestricted+0x34>)
   8192c:	6821      	ldr	r1, [r4, #0]
   8192e:	3118      	adds	r1, #24
   81930:	4b08      	ldr	r3, [pc, #32]	; (81954 <vTaskPlaceOnEventListRestricted+0x38>)
   81932:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81934:	6820      	ldr	r0, [r4, #0]
   81936:	3004      	adds	r0, #4
   81938:	4b07      	ldr	r3, [pc, #28]	; (81958 <vTaskPlaceOnEventListRestricted+0x3c>)
   8193a:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8193c:	4b07      	ldr	r3, [pc, #28]	; (8195c <vTaskPlaceOnEventListRestricted+0x40>)
   8193e:	8818      	ldrh	r0, [r3, #0]
   81940:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81942:	b280      	uxth	r0, r0
   81944:	4b06      	ldr	r3, [pc, #24]	; (81960 <vTaskPlaceOnEventListRestricted+0x44>)
   81946:	4798      	blx	r3
   81948:	bd38      	pop	{r3, r4, r5, pc}
   8194a:	bf00      	nop
   8194c:	00080a19 	.word	0x00080a19
   81950:	200787dc 	.word	0x200787dc
   81954:	00080931 	.word	0x00080931
   81958:	00080991 	.word	0x00080991
   8195c:	200787f8 	.word	0x200787f8
   81960:	000811cd 	.word	0x000811cd

00081964 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81964:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81966:	68c3      	ldr	r3, [r0, #12]
   81968:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8196a:	b91c      	cbnz	r4, 81974 <xTaskRemoveFromEventList+0x10>
   8196c:	4b16      	ldr	r3, [pc, #88]	; (819c8 <xTaskRemoveFromEventList+0x64>)
   8196e:	4798      	blx	r3
   81970:	bf00      	nop
   81972:	e7fd      	b.n	81970 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81974:	f104 0518 	add.w	r5, r4, #24
   81978:	4628      	mov	r0, r5
   8197a:	4b14      	ldr	r3, [pc, #80]	; (819cc <xTaskRemoveFromEventList+0x68>)
   8197c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8197e:	4b14      	ldr	r3, [pc, #80]	; (819d0 <xTaskRemoveFromEventList+0x6c>)
   81980:	681b      	ldr	r3, [r3, #0]
   81982:	b99b      	cbnz	r3, 819ac <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81984:	1d25      	adds	r5, r4, #4
   81986:	4628      	mov	r0, r5
   81988:	4b10      	ldr	r3, [pc, #64]	; (819cc <xTaskRemoveFromEventList+0x68>)
   8198a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   8198c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8198e:	4b11      	ldr	r3, [pc, #68]	; (819d4 <xTaskRemoveFromEventList+0x70>)
   81990:	681b      	ldr	r3, [r3, #0]
   81992:	4298      	cmp	r0, r3
   81994:	bf84      	itt	hi
   81996:	4b0f      	ldrhi	r3, [pc, #60]	; (819d4 <xTaskRemoveFromEventList+0x70>)
   81998:	6018      	strhi	r0, [r3, #0]
   8199a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8199e:	4b0e      	ldr	r3, [pc, #56]	; (819d8 <xTaskRemoveFromEventList+0x74>)
   819a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   819a4:	4629      	mov	r1, r5
   819a6:	4b0d      	ldr	r3, [pc, #52]	; (819dc <xTaskRemoveFromEventList+0x78>)
   819a8:	4798      	blx	r3
   819aa:	e003      	b.n	819b4 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   819ac:	480c      	ldr	r0, [pc, #48]	; (819e0 <xTaskRemoveFromEventList+0x7c>)
   819ae:	4629      	mov	r1, r5
   819b0:	4b0a      	ldr	r3, [pc, #40]	; (819dc <xTaskRemoveFromEventList+0x78>)
   819b2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   819b4:	4b0b      	ldr	r3, [pc, #44]	; (819e4 <xTaskRemoveFromEventList+0x80>)
   819b6:	681b      	ldr	r3, [r3, #0]
   819b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   819ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   819bc:	4298      	cmp	r0, r3
   819be:	bf34      	ite	cc
   819c0:	2000      	movcc	r0, #0
   819c2:	2001      	movcs	r0, #1
   819c4:	bd38      	pop	{r3, r4, r5, pc}
   819c6:	bf00      	nop
   819c8:	00080a19 	.word	0x00080a19
   819cc:	00080991 	.word	0x00080991
   819d0:	200787f4 	.word	0x200787f4
   819d4:	200786f8 	.word	0x200786f8
   819d8:	200786fc 	.word	0x200786fc
   819dc:	00080931 	.word	0x00080931
   819e0:	200787e0 	.word	0x200787e0
   819e4:	200787dc 	.word	0x200787dc

000819e8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   819e8:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   819ea:	b918      	cbnz	r0, 819f4 <vTaskSetTimeOutState+0xc>
   819ec:	4b05      	ldr	r3, [pc, #20]	; (81a04 <vTaskSetTimeOutState+0x1c>)
   819ee:	4798      	blx	r3
   819f0:	bf00      	nop
   819f2:	e7fd      	b.n	819f0 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   819f4:	4a04      	ldr	r2, [pc, #16]	; (81a08 <vTaskSetTimeOutState+0x20>)
   819f6:	6812      	ldr	r2, [r2, #0]
   819f8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   819fa:	4a04      	ldr	r2, [pc, #16]	; (81a0c <vTaskSetTimeOutState+0x24>)
   819fc:	8812      	ldrh	r2, [r2, #0]
   819fe:	8082      	strh	r2, [r0, #4]
   81a00:	bd08      	pop	{r3, pc}
   81a02:	bf00      	nop
   81a04:	00080a19 	.word	0x00080a19
   81a08:	200787d8 	.word	0x200787d8
   81a0c:	200787f8 	.word	0x200787f8

00081a10 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81a10:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81a12:	b918      	cbnz	r0, 81a1c <xTaskCheckForTimeOut+0xc>
   81a14:	4b1b      	ldr	r3, [pc, #108]	; (81a84 <xTaskCheckForTimeOut+0x74>)
   81a16:	4798      	blx	r3
   81a18:	bf00      	nop
   81a1a:	e7fd      	b.n	81a18 <xTaskCheckForTimeOut+0x8>
   81a1c:	460d      	mov	r5, r1
   81a1e:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   81a20:	b919      	cbnz	r1, 81a2a <xTaskCheckForTimeOut+0x1a>
   81a22:	4b18      	ldr	r3, [pc, #96]	; (81a84 <xTaskCheckForTimeOut+0x74>)
   81a24:	4798      	blx	r3
   81a26:	bf00      	nop
   81a28:	e7fd      	b.n	81a26 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   81a2a:	4b17      	ldr	r3, [pc, #92]	; (81a88 <xTaskCheckForTimeOut+0x78>)
   81a2c:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81a2e:	882b      	ldrh	r3, [r5, #0]
   81a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81a34:	4293      	cmp	r3, r2
   81a36:	d01b      	beq.n	81a70 <xTaskCheckForTimeOut+0x60>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81a38:	4a14      	ldr	r2, [pc, #80]	; (81a8c <xTaskCheckForTimeOut+0x7c>)
   81a3a:	6812      	ldr	r2, [r2, #0]
   81a3c:	6821      	ldr	r1, [r4, #0]
   81a3e:	4291      	cmp	r1, r2
   81a40:	d005      	beq.n	81a4e <xTaskCheckForTimeOut+0x3e>
   81a42:	4a13      	ldr	r2, [pc, #76]	; (81a90 <xTaskCheckForTimeOut+0x80>)
   81a44:	8812      	ldrh	r2, [r2, #0]
   81a46:	b292      	uxth	r2, r2
   81a48:	88a1      	ldrh	r1, [r4, #4]
   81a4a:	4291      	cmp	r1, r2
   81a4c:	d912      	bls.n	81a74 <xTaskCheckForTimeOut+0x64>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81a4e:	4a10      	ldr	r2, [pc, #64]	; (81a90 <xTaskCheckForTimeOut+0x80>)
   81a50:	8811      	ldrh	r1, [r2, #0]
   81a52:	88a0      	ldrh	r0, [r4, #4]
   81a54:	1a09      	subs	r1, r1, r0
   81a56:	b289      	uxth	r1, r1
   81a58:	428b      	cmp	r3, r1
   81a5a:	d90d      	bls.n	81a78 <xTaskCheckForTimeOut+0x68>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81a5c:	8812      	ldrh	r2, [r2, #0]
   81a5e:	b292      	uxth	r2, r2
   81a60:	1a12      	subs	r2, r2, r0
   81a62:	1a9b      	subs	r3, r3, r2
   81a64:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81a66:	4620      	mov	r0, r4
   81a68:	4b0a      	ldr	r3, [pc, #40]	; (81a94 <xTaskCheckForTimeOut+0x84>)
   81a6a:	4798      	blx	r3
			xReturn = pdFALSE;
   81a6c:	2400      	movs	r4, #0
   81a6e:	e004      	b.n	81a7a <xTaskCheckForTimeOut+0x6a>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81a70:	2400      	movs	r4, #0
   81a72:	e002      	b.n	81a7a <xTaskCheckForTimeOut+0x6a>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81a74:	2401      	movs	r4, #1
   81a76:	e000      	b.n	81a7a <xTaskCheckForTimeOut+0x6a>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81a78:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81a7a:	4b07      	ldr	r3, [pc, #28]	; (81a98 <xTaskCheckForTimeOut+0x88>)
   81a7c:	4798      	blx	r3

	return xReturn;
}
   81a7e:	4620      	mov	r0, r4
   81a80:	bd38      	pop	{r3, r4, r5, pc}
   81a82:	bf00      	nop
   81a84:	00080a19 	.word	0x00080a19
   81a88:	00080a29 	.word	0x00080a29
   81a8c:	200787d8 	.word	0x200787d8
   81a90:	200787f8 	.word	0x200787f8
   81a94:	000819e9 	.word	0x000819e9
   81a98:	00080a49 	.word	0x00080a49

00081a9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81a9c:	2201      	movs	r2, #1
   81a9e:	4b01      	ldr	r3, [pc, #4]	; (81aa4 <vTaskMissedYield+0x8>)
   81aa0:	601a      	str	r2, [r3, #0]
   81aa2:	4770      	bx	lr
   81aa4:	20078808 	.word	0x20078808

00081aa8 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81aa8:	4b01      	ldr	r3, [pc, #4]	; (81ab0 <xTaskGetCurrentTaskHandle+0x8>)
   81aaa:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81aac:	4770      	bx	lr
   81aae:	bf00      	nop
   81ab0:	200787dc 	.word	0x200787dc

00081ab4 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81ab4:	4b05      	ldr	r3, [pc, #20]	; (81acc <xTaskGetSchedulerState+0x18>)
   81ab6:	681b      	ldr	r3, [r3, #0]
   81ab8:	b133      	cbz	r3, 81ac8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81aba:	4b05      	ldr	r3, [pc, #20]	; (81ad0 <xTaskGetSchedulerState+0x1c>)
   81abc:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   81abe:	2b00      	cmp	r3, #0
   81ac0:	bf0c      	ite	eq
   81ac2:	2001      	moveq	r0, #1
   81ac4:	2002      	movne	r0, #2
   81ac6:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81ac8:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81aca:	4770      	bx	lr
   81acc:	200786c8 	.word	0x200786c8
   81ad0:	200787f4 	.word	0x200787f4

00081ad4 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81ad4:	2800      	cmp	r0, #0
   81ad6:	d031      	beq.n	81b3c <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81ad8:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81ada:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81adc:	4918      	ldr	r1, [pc, #96]	; (81b40 <vTaskPriorityInherit+0x6c>)
   81ade:	6809      	ldr	r1, [r1, #0]
   81ae0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81ae2:	428b      	cmp	r3, r1
   81ae4:	d229      	bcs.n	81b3a <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81ae6:	4916      	ldr	r1, [pc, #88]	; (81b40 <vTaskPriorityInherit+0x6c>)
   81ae8:	6809      	ldr	r1, [r1, #0]
   81aea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81aec:	f1c1 010a 	rsb	r1, r1, #10
   81af0:	8301      	strh	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81af2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81af6:	4913      	ldr	r1, [pc, #76]	; (81b44 <vTaskPriorityInherit+0x70>)
   81af8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81afc:	6941      	ldr	r1, [r0, #20]
   81afe:	4299      	cmp	r1, r3
   81b00:	d117      	bne.n	81b32 <vTaskPriorityInherit+0x5e>
   81b02:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81b04:	1d04      	adds	r4, r0, #4
   81b06:	4620      	mov	r0, r4
   81b08:	4b0f      	ldr	r3, [pc, #60]	; (81b48 <vTaskPriorityInherit+0x74>)
   81b0a:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81b0c:	4b0c      	ldr	r3, [pc, #48]	; (81b40 <vTaskPriorityInherit+0x6c>)
   81b0e:	681b      	ldr	r3, [r3, #0]
   81b10:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   81b12:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81b14:	4b0d      	ldr	r3, [pc, #52]	; (81b4c <vTaskPriorityInherit+0x78>)
   81b16:	681b      	ldr	r3, [r3, #0]
   81b18:	4298      	cmp	r0, r3
   81b1a:	bf84      	itt	hi
   81b1c:	4b0b      	ldrhi	r3, [pc, #44]	; (81b4c <vTaskPriorityInherit+0x78>)
   81b1e:	6018      	strhi	r0, [r3, #0]
   81b20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81b24:	4b07      	ldr	r3, [pc, #28]	; (81b44 <vTaskPriorityInherit+0x70>)
   81b26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81b2a:	4621      	mov	r1, r4
   81b2c:	4b08      	ldr	r3, [pc, #32]	; (81b50 <vTaskPriorityInherit+0x7c>)
   81b2e:	4798      	blx	r3
   81b30:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81b32:	4b03      	ldr	r3, [pc, #12]	; (81b40 <vTaskPriorityInherit+0x6c>)
   81b34:	681b      	ldr	r3, [r3, #0]
   81b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81b38:	62c3      	str	r3, [r0, #44]	; 0x2c
   81b3a:	bd38      	pop	{r3, r4, r5, pc}
   81b3c:	4770      	bx	lr
   81b3e:	bf00      	nop
   81b40:	200787dc 	.word	0x200787dc
   81b44:	200786fc 	.word	0x200786fc
   81b48:	00080991 	.word	0x00080991
   81b4c:	200786f8 	.word	0x200786f8
   81b50:	00080931 	.word	0x00080931

00081b54 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81b54:	b1e8      	cbz	r0, 81b92 <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81b56:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81b58:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81b5a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   81b5c:	4291      	cmp	r1, r2
   81b5e:	d017      	beq.n	81b90 <vTaskPriorityDisinherit+0x3c>
   81b60:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81b62:	1d05      	adds	r5, r0, #4
   81b64:	4628      	mov	r0, r5
   81b66:	4b0b      	ldr	r3, [pc, #44]	; (81b94 <vTaskPriorityDisinherit+0x40>)
   81b68:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81b6a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   81b6c:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81b6e:	f1c0 030a 	rsb	r3, r0, #10
   81b72:	8323      	strh	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81b74:	4b08      	ldr	r3, [pc, #32]	; (81b98 <vTaskPriorityDisinherit+0x44>)
   81b76:	681b      	ldr	r3, [r3, #0]
   81b78:	4298      	cmp	r0, r3
   81b7a:	bf84      	itt	hi
   81b7c:	4b06      	ldrhi	r3, [pc, #24]	; (81b98 <vTaskPriorityDisinherit+0x44>)
   81b7e:	6018      	strhi	r0, [r3, #0]
   81b80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81b84:	4b05      	ldr	r3, [pc, #20]	; (81b9c <vTaskPriorityDisinherit+0x48>)
   81b86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81b8a:	4629      	mov	r1, r5
   81b8c:	4b04      	ldr	r3, [pc, #16]	; (81ba0 <vTaskPriorityDisinherit+0x4c>)
   81b8e:	4798      	blx	r3
   81b90:	bd38      	pop	{r3, r4, r5, pc}
   81b92:	4770      	bx	lr
   81b94:	00080991 	.word	0x00080991
   81b98:	200786f8 	.word	0x200786f8
   81b9c:	200786fc 	.word	0x200786fc
   81ba0:	00080931 	.word	0x00080931

00081ba4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81ba4:	b510      	push	{r4, lr}
   81ba6:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81ba8:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81baa:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81bac:	4291      	cmp	r1, r2
   81bae:	d80b      	bhi.n	81bc8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81bb0:	1ad2      	subs	r2, r2, r3
   81bb2:	8b03      	ldrh	r3, [r0, #24]
   81bb4:	b292      	uxth	r2, r2
   81bb6:	4293      	cmp	r3, r2
   81bb8:	d911      	bls.n	81bde <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81bba:	4b0b      	ldr	r3, [pc, #44]	; (81be8 <prvInsertTimerInActiveList+0x44>)
   81bbc:	6818      	ldr	r0, [r3, #0]
   81bbe:	1d21      	adds	r1, r4, #4
   81bc0:	4b0a      	ldr	r3, [pc, #40]	; (81bec <prvInsertTimerInActiveList+0x48>)
   81bc2:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81bc4:	2000      	movs	r0, #0
   81bc6:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81bc8:	429a      	cmp	r2, r3
   81bca:	d201      	bcs.n	81bd0 <prvInsertTimerInActiveList+0x2c>
   81bcc:	4299      	cmp	r1, r3
   81bce:	d208      	bcs.n	81be2 <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81bd0:	4b07      	ldr	r3, [pc, #28]	; (81bf0 <prvInsertTimerInActiveList+0x4c>)
   81bd2:	6818      	ldr	r0, [r3, #0]
   81bd4:	1d21      	adds	r1, r4, #4
   81bd6:	4b05      	ldr	r3, [pc, #20]	; (81bec <prvInsertTimerInActiveList+0x48>)
   81bd8:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81bda:	2000      	movs	r0, #0
   81bdc:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81bde:	2001      	movs	r0, #1
   81be0:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81be2:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81be4:	bd10      	pop	{r4, pc}
   81be6:	bf00      	nop
   81be8:	20078844 	.word	0x20078844
   81bec:	0008094d 	.word	0x0008094d
   81bf0:	20078810 	.word	0x20078810

00081bf4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81bf4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81bf6:	4b0d      	ldr	r3, [pc, #52]	; (81c2c <prvCheckForValidListAndQueue+0x38>)
   81bf8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81bfa:	4b0d      	ldr	r3, [pc, #52]	; (81c30 <prvCheckForValidListAndQueue+0x3c>)
   81bfc:	681b      	ldr	r3, [r3, #0]
   81bfe:	b98b      	cbnz	r3, 81c24 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81c00:	4d0c      	ldr	r5, [pc, #48]	; (81c34 <prvCheckForValidListAndQueue+0x40>)
   81c02:	4628      	mov	r0, r5
   81c04:	4e0c      	ldr	r6, [pc, #48]	; (81c38 <prvCheckForValidListAndQueue+0x44>)
   81c06:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81c08:	4c0c      	ldr	r4, [pc, #48]	; (81c3c <prvCheckForValidListAndQueue+0x48>)
   81c0a:	4620      	mov	r0, r4
   81c0c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81c0e:	4b0c      	ldr	r3, [pc, #48]	; (81c40 <prvCheckForValidListAndQueue+0x4c>)
   81c10:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81c12:	4b0c      	ldr	r3, [pc, #48]	; (81c44 <prvCheckForValidListAndQueue+0x50>)
   81c14:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81c16:	2005      	movs	r0, #5
   81c18:	210c      	movs	r1, #12
   81c1a:	2200      	movs	r2, #0
   81c1c:	4b0a      	ldr	r3, [pc, #40]	; (81c48 <prvCheckForValidListAndQueue+0x54>)
   81c1e:	4798      	blx	r3
   81c20:	4b03      	ldr	r3, [pc, #12]	; (81c30 <prvCheckForValidListAndQueue+0x3c>)
   81c22:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81c24:	4b09      	ldr	r3, [pc, #36]	; (81c4c <prvCheckForValidListAndQueue+0x58>)
   81c26:	4798      	blx	r3
   81c28:	bd70      	pop	{r4, r5, r6, pc}
   81c2a:	bf00      	nop
   81c2c:	00080a29 	.word	0x00080a29
   81c30:	20078840 	.word	0x20078840
   81c34:	20078814 	.word	0x20078814
   81c38:	00080911 	.word	0x00080911
   81c3c:	20078828 	.word	0x20078828
   81c40:	20078810 	.word	0x20078810
   81c44:	20078844 	.word	0x20078844
   81c48:	00080e0d 	.word	0x00080e0d
   81c4c:	00080a49 	.word	0x00080a49

00081c50 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81c50:	b510      	push	{r4, lr}
   81c52:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81c54:	4b0b      	ldr	r3, [pc, #44]	; (81c84 <xTimerCreateTimerTask+0x34>)
   81c56:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81c58:	4b0b      	ldr	r3, [pc, #44]	; (81c88 <xTimerCreateTimerTask+0x38>)
   81c5a:	681b      	ldr	r3, [r3, #0]
   81c5c:	b163      	cbz	r3, 81c78 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81c5e:	2309      	movs	r3, #9
   81c60:	9300      	str	r3, [sp, #0]
   81c62:	2300      	movs	r3, #0
   81c64:	9301      	str	r3, [sp, #4]
   81c66:	9302      	str	r3, [sp, #8]
   81c68:	9303      	str	r3, [sp, #12]
   81c6a:	4808      	ldr	r0, [pc, #32]	; (81c8c <xTimerCreateTimerTask+0x3c>)
   81c6c:	4908      	ldr	r1, [pc, #32]	; (81c90 <xTimerCreateTimerTask+0x40>)
   81c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
   81c72:	4c08      	ldr	r4, [pc, #32]	; (81c94 <xTimerCreateTimerTask+0x44>)
   81c74:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81c76:	b918      	cbnz	r0, 81c80 <xTimerCreateTimerTask+0x30>
   81c78:	4b07      	ldr	r3, [pc, #28]	; (81c98 <xTimerCreateTimerTask+0x48>)
   81c7a:	4798      	blx	r3
   81c7c:	bf00      	nop
   81c7e:	e7fd      	b.n	81c7c <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81c80:	b004      	add	sp, #16
   81c82:	bd10      	pop	{r4, pc}
   81c84:	00081bf5 	.word	0x00081bf5
   81c88:	20078840 	.word	0x20078840
   81c8c:	00081dad 	.word	0x00081dad
   81c90:	000835dc 	.word	0x000835dc
   81c94:	00081229 	.word	0x00081229
   81c98:	00080a19 	.word	0x00080a19

00081c9c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81c9c:	b510      	push	{r4, lr}
   81c9e:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81ca0:	4c10      	ldr	r4, [pc, #64]	; (81ce4 <xTimerGenericCommand+0x48>)
   81ca2:	6824      	ldr	r4, [r4, #0]
   81ca4:	b1d4      	cbz	r4, 81cdc <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81ca6:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81ca8:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81cac:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81cae:	b973      	cbnz	r3, 81cce <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81cb0:	4b0d      	ldr	r3, [pc, #52]	; (81ce8 <xTimerGenericCommand+0x4c>)
   81cb2:	4798      	blx	r3
   81cb4:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81cb6:	4b0b      	ldr	r3, [pc, #44]	; (81ce4 <xTimerGenericCommand+0x48>)
   81cb8:	6818      	ldr	r0, [r3, #0]
   81cba:	a901      	add	r1, sp, #4
   81cbc:	bf07      	ittee	eq
   81cbe:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   81cc2:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81cc4:	2200      	movne	r2, #0
   81cc6:	4613      	movne	r3, r2
   81cc8:	4c08      	ldr	r4, [pc, #32]	; (81cec <xTimerGenericCommand+0x50>)
   81cca:	47a0      	blx	r4
   81ccc:	e007      	b.n	81cde <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81cce:	4620      	mov	r0, r4
   81cd0:	a901      	add	r1, sp, #4
   81cd2:	461a      	mov	r2, r3
   81cd4:	2300      	movs	r3, #0
   81cd6:	4c06      	ldr	r4, [pc, #24]	; (81cf0 <xTimerGenericCommand+0x54>)
   81cd8:	47a0      	blx	r4
   81cda:	e000      	b.n	81cde <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81cdc:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81cde:	b004      	add	sp, #16
   81ce0:	bd10      	pop	{r4, pc}
   81ce2:	bf00      	nop
   81ce4:	20078840 	.word	0x20078840
   81ce8:	00081ab5 	.word	0x00081ab5
   81cec:	00080e65 	.word	0x00080e65
   81cf0:	00080f8d 	.word	0x00080f8d

00081cf4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81cf8:	b082      	sub	sp, #8
   81cfa:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81cfc:	4b23      	ldr	r3, [pc, #140]	; (81d8c <prvSampleTimeNow+0x98>)
   81cfe:	4798      	blx	r3
   81d00:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81d02:	4b23      	ldr	r3, [pc, #140]	; (81d90 <prvSampleTimeNow+0x9c>)
   81d04:	881b      	ldrh	r3, [r3, #0]
   81d06:	4283      	cmp	r3, r0
   81d08:	d936      	bls.n	81d78 <prvSampleTimeNow+0x84>
   81d0a:	e026      	b.n	81d5a <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81d0c:	68da      	ldr	r2, [r3, #12]
   81d0e:	8815      	ldrh	r5, [r2, #0]
   81d10:	b2ad      	uxth	r5, r5

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81d12:	68db      	ldr	r3, [r3, #12]
   81d14:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81d16:	f104 0a04 	add.w	sl, r4, #4
   81d1a:	4650      	mov	r0, sl
   81d1c:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81d20:	4620      	mov	r0, r4
   81d22:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81d24:	69e3      	ldr	r3, [r4, #28]
   81d26:	2b01      	cmp	r3, #1
   81d28:	d119      	bne.n	81d5e <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81d2a:	8b23      	ldrh	r3, [r4, #24]
   81d2c:	442b      	add	r3, r5
   81d2e:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   81d30:	42ab      	cmp	r3, r5
   81d32:	d906      	bls.n	81d42 <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81d34:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81d36:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81d38:	6830      	ldr	r0, [r6, #0]
   81d3a:	4651      	mov	r1, sl
   81d3c:	4b15      	ldr	r3, [pc, #84]	; (81d94 <prvSampleTimeNow+0xa0>)
   81d3e:	4798      	blx	r3
   81d40:	e00d      	b.n	81d5e <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81d42:	2300      	movs	r3, #0
   81d44:	9300      	str	r3, [sp, #0]
   81d46:	4620      	mov	r0, r4
   81d48:	4619      	mov	r1, r3
   81d4a:	462a      	mov	r2, r5
   81d4c:	4c12      	ldr	r4, [pc, #72]	; (81d98 <prvSampleTimeNow+0xa4>)
   81d4e:	47a0      	blx	r4
				configASSERT( xResult );
   81d50:	b928      	cbnz	r0, 81d5e <prvSampleTimeNow+0x6a>
   81d52:	4b12      	ldr	r3, [pc, #72]	; (81d9c <prvSampleTimeNow+0xa8>)
   81d54:	4798      	blx	r3
   81d56:	bf00      	nop
   81d58:	e7fd      	b.n	81d56 <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81d5a:	4e11      	ldr	r6, [pc, #68]	; (81da0 <prvSampleTimeNow+0xac>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81d5c:	4f11      	ldr	r7, [pc, #68]	; (81da4 <prvSampleTimeNow+0xb0>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81d5e:	6833      	ldr	r3, [r6, #0]
   81d60:	681a      	ldr	r2, [r3, #0]
   81d62:	2a00      	cmp	r2, #0
   81d64:	d1d2      	bne.n	81d0c <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81d66:	4a10      	ldr	r2, [pc, #64]	; (81da8 <prvSampleTimeNow+0xb4>)
   81d68:	6810      	ldr	r0, [r2, #0]
   81d6a:	490d      	ldr	r1, [pc, #52]	; (81da0 <prvSampleTimeNow+0xac>)
   81d6c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81d6e:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81d70:	2301      	movs	r3, #1
   81d72:	f8c9 3000 	str.w	r3, [r9]
   81d76:	e002      	b.n	81d7e <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81d78:	2300      	movs	r3, #0
   81d7a:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   81d7e:	4b04      	ldr	r3, [pc, #16]	; (81d90 <prvSampleTimeNow+0x9c>)
   81d80:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   81d84:	4640      	mov	r0, r8
   81d86:	b002      	add	sp, #8
   81d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81d8c:	000814a9 	.word	0x000814a9
   81d90:	2007883c 	.word	0x2007883c
   81d94:	0008094d 	.word	0x0008094d
   81d98:	00081c9d 	.word	0x00081c9d
   81d9c:	00080a19 	.word	0x00080a19
   81da0:	20078810 	.word	0x20078810
   81da4:	00080991 	.word	0x00080991
   81da8:	20078844 	.word	0x20078844

00081dac <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81db0:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81db2:	4d51      	ldr	r5, [pc, #324]	; (81ef8 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81db4:	f8df 8170 	ldr.w	r8, [pc, #368]	; 81f28 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81db8:	4b50      	ldr	r3, [pc, #320]	; (81efc <prvTimerTask+0x150>)
   81dba:	681b      	ldr	r3, [r3, #0]
   81dbc:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81dbe:	2a00      	cmp	r2, #0
   81dc0:	f000 8090 	beq.w	81ee4 <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81dc4:	68db      	ldr	r3, [r3, #12]
   81dc6:	881c      	ldrh	r4, [r3, #0]
   81dc8:	b2a4      	uxth	r4, r4
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81dca:	4b4d      	ldr	r3, [pc, #308]	; (81f00 <prvTimerTask+0x154>)
   81dcc:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81dce:	a803      	add	r0, sp, #12
   81dd0:	4b4c      	ldr	r3, [pc, #304]	; (81f04 <prvTimerTask+0x158>)
   81dd2:	4798      	blx	r3
   81dd4:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81dd6:	9b03      	ldr	r3, [sp, #12]
   81dd8:	2b00      	cmp	r3, #0
   81dda:	d132      	bne.n	81e42 <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81ddc:	4284      	cmp	r4, r0
   81dde:	d825      	bhi.n	81e2c <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   81de0:	4b49      	ldr	r3, [pc, #292]	; (81f08 <prvTimerTask+0x15c>)
   81de2:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81de4:	4b45      	ldr	r3, [pc, #276]	; (81efc <prvTimerTask+0x150>)
   81de6:	681b      	ldr	r3, [r3, #0]
   81de8:	68db      	ldr	r3, [r3, #12]
   81dea:	68de      	ldr	r6, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81dec:	1d30      	adds	r0, r6, #4
   81dee:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81df0:	69f3      	ldr	r3, [r6, #28]
   81df2:	2b01      	cmp	r3, #1
   81df4:	d115      	bne.n	81e22 <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81df6:	8b31      	ldrh	r1, [r6, #24]
   81df8:	4421      	add	r1, r4
   81dfa:	4630      	mov	r0, r6
   81dfc:	b289      	uxth	r1, r1
   81dfe:	463a      	mov	r2, r7
   81e00:	4623      	mov	r3, r4
   81e02:	4f42      	ldr	r7, [pc, #264]	; (81f0c <prvTimerTask+0x160>)
   81e04:	47b8      	blx	r7
   81e06:	2801      	cmp	r0, #1
   81e08:	d10b      	bne.n	81e22 <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81e0a:	2300      	movs	r3, #0
   81e0c:	9300      	str	r3, [sp, #0]
   81e0e:	4630      	mov	r0, r6
   81e10:	4619      	mov	r1, r3
   81e12:	4622      	mov	r2, r4
   81e14:	4c3e      	ldr	r4, [pc, #248]	; (81f10 <prvTimerTask+0x164>)
   81e16:	47a0      	blx	r4
			configASSERT( xResult );
   81e18:	b918      	cbnz	r0, 81e22 <prvTimerTask+0x76>
   81e1a:	4b3e      	ldr	r3, [pc, #248]	; (81f14 <prvTimerTask+0x168>)
   81e1c:	4798      	blx	r3
   81e1e:	bf00      	nop
   81e20:	e7fd      	b.n	81e1e <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81e22:	6a73      	ldr	r3, [r6, #36]	; 0x24
   81e24:	4630      	mov	r0, r6
   81e26:	4798      	blx	r3
   81e28:	e00d      	b.n	81e46 <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   81e2a:	2400      	movs	r4, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81e2c:	1be1      	subs	r1, r4, r7
   81e2e:	6828      	ldr	r0, [r5, #0]
   81e30:	b289      	uxth	r1, r1
   81e32:	4b39      	ldr	r3, [pc, #228]	; (81f18 <prvTimerTask+0x16c>)
   81e34:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81e36:	4b34      	ldr	r3, [pc, #208]	; (81f08 <prvTimerTask+0x15c>)
   81e38:	4798      	blx	r3
   81e3a:	b920      	cbnz	r0, 81e46 <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   81e3c:	4b37      	ldr	r3, [pc, #220]	; (81f1c <prvTimerTask+0x170>)
   81e3e:	4798      	blx	r3
   81e40:	e001      	b.n	81e46 <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   81e42:	4b31      	ldr	r3, [pc, #196]	; (81f08 <prvTimerTask+0x15c>)
   81e44:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81e46:	a802      	add	r0, sp, #8
   81e48:	4b2e      	ldr	r3, [pc, #184]	; (81f04 <prvTimerTask+0x158>)
   81e4a:	4798      	blx	r3
   81e4c:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81e4e:	4e34      	ldr	r6, [pc, #208]	; (81f20 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81e50:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 81f0c <prvTimerTask+0x160>
   81e54:	e03e      	b.n	81ed4 <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   81e56:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   81e58:	b11c      	cbz	r4, 81e62 <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81e5a:	6963      	ldr	r3, [r4, #20]
   81e5c:	b10b      	cbz	r3, 81e62 <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81e5e:	1d20      	adds	r0, r4, #4
   81e60:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   81e62:	9b03      	ldr	r3, [sp, #12]
   81e64:	2b02      	cmp	r3, #2
   81e66:	d023      	beq.n	81eb0 <prvTimerTask+0x104>
   81e68:	2b03      	cmp	r3, #3
   81e6a:	d030      	beq.n	81ece <prvTimerTask+0x122>
   81e6c:	2b00      	cmp	r3, #0
   81e6e:	d131      	bne.n	81ed4 <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81e70:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81e74:	8b21      	ldrh	r1, [r4, #24]
   81e76:	4419      	add	r1, r3
   81e78:	4620      	mov	r0, r4
   81e7a:	b289      	uxth	r1, r1
   81e7c:	463a      	mov	r2, r7
   81e7e:	47c8      	blx	r9
   81e80:	2801      	cmp	r0, #1
   81e82:	d127      	bne.n	81ed4 <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81e86:	4620      	mov	r0, r4
   81e88:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81e8a:	69e3      	ldr	r3, [r4, #28]
   81e8c:	2b01      	cmp	r3, #1
   81e8e:	d121      	bne.n	81ed4 <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81e90:	8b22      	ldrh	r2, [r4, #24]
   81e92:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81e96:	441a      	add	r2, r3
   81e98:	2300      	movs	r3, #0
   81e9a:	9300      	str	r3, [sp, #0]
   81e9c:	4620      	mov	r0, r4
   81e9e:	4619      	mov	r1, r3
   81ea0:	b292      	uxth	r2, r2
   81ea2:	4c1b      	ldr	r4, [pc, #108]	; (81f10 <prvTimerTask+0x164>)
   81ea4:	47a0      	blx	r4
						configASSERT( xResult );
   81ea6:	b9a8      	cbnz	r0, 81ed4 <prvTimerTask+0x128>
   81ea8:	4b1a      	ldr	r3, [pc, #104]	; (81f14 <prvTimerTask+0x168>)
   81eaa:	4798      	blx	r3
   81eac:	bf00      	nop
   81eae:	e7fd      	b.n	81eac <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81eb0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81eb4:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81eb6:	b91b      	cbnz	r3, 81ec0 <prvTimerTask+0x114>
   81eb8:	4b16      	ldr	r3, [pc, #88]	; (81f14 <prvTimerTask+0x168>)
   81eba:	4798      	blx	r3
   81ebc:	bf00      	nop
   81ebe:	e7fd      	b.n	81ebc <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81ec0:	18f9      	adds	r1, r7, r3
   81ec2:	4620      	mov	r0, r4
   81ec4:	b289      	uxth	r1, r1
   81ec6:	463a      	mov	r2, r7
   81ec8:	463b      	mov	r3, r7
   81eca:	47c8      	blx	r9
   81ecc:	e002      	b.n	81ed4 <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   81ece:	4620      	mov	r0, r4
   81ed0:	4b14      	ldr	r3, [pc, #80]	; (81f24 <prvTimerTask+0x178>)
   81ed2:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81ed4:	6828      	ldr	r0, [r5, #0]
   81ed6:	a903      	add	r1, sp, #12
   81ed8:	2200      	movs	r2, #0
   81eda:	4613      	mov	r3, r2
   81edc:	47b0      	blx	r6
   81ede:	2800      	cmp	r0, #0
   81ee0:	d1b9      	bne.n	81e56 <prvTimerTask+0xaa>
   81ee2:	e769      	b.n	81db8 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81ee4:	4b06      	ldr	r3, [pc, #24]	; (81f00 <prvTimerTask+0x154>)
   81ee6:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81ee8:	a803      	add	r0, sp, #12
   81eea:	4b06      	ldr	r3, [pc, #24]	; (81f04 <prvTimerTask+0x158>)
   81eec:	4798      	blx	r3
   81eee:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81ef0:	9b03      	ldr	r3, [sp, #12]
   81ef2:	2b00      	cmp	r3, #0
   81ef4:	d099      	beq.n	81e2a <prvTimerTask+0x7e>
   81ef6:	e7a4      	b.n	81e42 <prvTimerTask+0x96>
   81ef8:	20078840 	.word	0x20078840
   81efc:	20078810 	.word	0x20078810
   81f00:	00081499 	.word	0x00081499
   81f04:	00081cf5 	.word	0x00081cf5
   81f08:	000815f5 	.word	0x000815f5
   81f0c:	00081ba5 	.word	0x00081ba5
   81f10:	00081c9d 	.word	0x00081c9d
   81f14:	00080a19 	.word	0x00080a19
   81f18:	00081181 	.word	0x00081181
   81f1c:	00080a09 	.word	0x00080a09
   81f20:	0008101d 	.word	0x0008101d
   81f24:	00080c3d 	.word	0x00080c3d
   81f28:	00080991 	.word	0x00080991

00081f2c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81f2c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81f2e:	480e      	ldr	r0, [pc, #56]	; (81f68 <sysclk_init+0x3c>)
   81f30:	4b0e      	ldr	r3, [pc, #56]	; (81f6c <sysclk_init+0x40>)
   81f32:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81f34:	2000      	movs	r0, #0
   81f36:	213e      	movs	r1, #62	; 0x3e
   81f38:	4b0d      	ldr	r3, [pc, #52]	; (81f70 <sysclk_init+0x44>)
   81f3a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81f3c:	4c0d      	ldr	r4, [pc, #52]	; (81f74 <sysclk_init+0x48>)
   81f3e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81f40:	2800      	cmp	r0, #0
   81f42:	d0fc      	beq.n	81f3e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81f44:	4b0c      	ldr	r3, [pc, #48]	; (81f78 <sysclk_init+0x4c>)
   81f46:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81f48:	4a0c      	ldr	r2, [pc, #48]	; (81f7c <sysclk_init+0x50>)
   81f4a:	4b0d      	ldr	r3, [pc, #52]	; (81f80 <sysclk_init+0x54>)
   81f4c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81f4e:	4c0d      	ldr	r4, [pc, #52]	; (81f84 <sysclk_init+0x58>)
   81f50:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81f52:	2800      	cmp	r0, #0
   81f54:	d0fc      	beq.n	81f50 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81f56:	2010      	movs	r0, #16
   81f58:	4b0b      	ldr	r3, [pc, #44]	; (81f88 <sysclk_init+0x5c>)
   81f5a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81f5c:	4b0b      	ldr	r3, [pc, #44]	; (81f8c <sysclk_init+0x60>)
   81f5e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81f60:	4801      	ldr	r0, [pc, #4]	; (81f68 <sysclk_init+0x3c>)
   81f62:	4b02      	ldr	r3, [pc, #8]	; (81f6c <sysclk_init+0x40>)
   81f64:	4798      	blx	r3
   81f66:	bd10      	pop	{r4, pc}
   81f68:	0501bd00 	.word	0x0501bd00
   81f6c:	200700a5 	.word	0x200700a5
   81f70:	00082321 	.word	0x00082321
   81f74:	00082375 	.word	0x00082375
   81f78:	00082385 	.word	0x00082385
   81f7c:	200d3f01 	.word	0x200d3f01
   81f80:	400e0600 	.word	0x400e0600
   81f84:	00082395 	.word	0x00082395
   81f88:	000822b9 	.word	0x000822b9
   81f8c:	000824ad 	.word	0x000824ad

00081f90 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81f90:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81f92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81f96:	4b12      	ldr	r3, [pc, #72]	; (81fe0 <board_init+0x50>)
   81f98:	605a      	str	r2, [r3, #4]
   81f9a:	200b      	movs	r0, #11
   81f9c:	4c11      	ldr	r4, [pc, #68]	; (81fe4 <board_init+0x54>)
   81f9e:	47a0      	blx	r4
   81fa0:	200c      	movs	r0, #12
   81fa2:	47a0      	blx	r4
   81fa4:	200d      	movs	r0, #13
   81fa6:	47a0      	blx	r4
   81fa8:	200e      	movs	r0, #14
   81faa:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81fac:	203b      	movs	r0, #59	; 0x3b
   81fae:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81fb2:	4c0d      	ldr	r4, [pc, #52]	; (81fe8 <board_init+0x58>)
   81fb4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81fb6:	2055      	movs	r0, #85	; 0x55
   81fb8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81fbc:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81fbe:	2056      	movs	r0, #86	; 0x56
   81fc0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81fc4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81fc6:	2068      	movs	r0, #104	; 0x68
   81fc8:	4908      	ldr	r1, [pc, #32]	; (81fec <board_init+0x5c>)
   81fca:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81fcc:	205c      	movs	r0, #92	; 0x5c
   81fce:	4908      	ldr	r1, [pc, #32]	; (81ff0 <board_init+0x60>)
   81fd0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81fd2:	4808      	ldr	r0, [pc, #32]	; (81ff4 <board_init+0x64>)
   81fd4:	f44f 7140 	mov.w	r1, #768	; 0x300
   81fd8:	4a07      	ldr	r2, [pc, #28]	; (81ff8 <board_init+0x68>)
   81fda:	4b08      	ldr	r3, [pc, #32]	; (81ffc <board_init+0x6c>)
   81fdc:	4798      	blx	r3
   81fde:	bd10      	pop	{r4, pc}
   81fe0:	400e1a50 	.word	0x400e1a50
   81fe4:	000823a5 	.word	0x000823a5
   81fe8:	000820a5 	.word	0x000820a5
   81fec:	28000079 	.word	0x28000079
   81ff0:	28000001 	.word	0x28000001
   81ff4:	400e0e00 	.word	0x400e0e00
   81ff8:	08000001 	.word	0x08000001
   81ffc:	00082179 	.word	0x00082179

00082000 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82000:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82002:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82006:	d016      	beq.n	82036 <pio_set_peripheral+0x36>
   82008:	d804      	bhi.n	82014 <pio_set_peripheral+0x14>
   8200a:	b1c1      	cbz	r1, 8203e <pio_set_peripheral+0x3e>
   8200c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82010:	d00a      	beq.n	82028 <pio_set_peripheral+0x28>
   82012:	e013      	b.n	8203c <pio_set_peripheral+0x3c>
   82014:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82018:	d011      	beq.n	8203e <pio_set_peripheral+0x3e>
   8201a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8201e:	d00e      	beq.n	8203e <pio_set_peripheral+0x3e>
   82020:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82024:	d10a      	bne.n	8203c <pio_set_peripheral+0x3c>
   82026:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82028:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8202a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8202c:	400b      	ands	r3, r1
   8202e:	ea23 0302 	bic.w	r3, r3, r2
   82032:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82034:	e002      	b.n	8203c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82036:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82038:	4313      	orrs	r3, r2
   8203a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8203c:	6042      	str	r2, [r0, #4]
   8203e:	4770      	bx	lr

00082040 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82040:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82042:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82046:	bf14      	ite	ne
   82048:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8204a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8204c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82050:	bf14      	ite	ne
   82052:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82054:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82056:	f012 0f02 	tst.w	r2, #2
   8205a:	d002      	beq.n	82062 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8205c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82060:	e004      	b.n	8206c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82062:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82066:	bf18      	it	ne
   82068:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8206c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8206e:	6001      	str	r1, [r0, #0]
   82070:	4770      	bx	lr
   82072:	bf00      	nop

00082074 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82074:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82076:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82078:	9c01      	ldr	r4, [sp, #4]
   8207a:	b10c      	cbz	r4, 82080 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8207c:	6641      	str	r1, [r0, #100]	; 0x64
   8207e:	e000      	b.n	82082 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82080:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82082:	b10b      	cbz	r3, 82088 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   82084:	6501      	str	r1, [r0, #80]	; 0x50
   82086:	e000      	b.n	8208a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82088:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8208a:	b10a      	cbz	r2, 82090 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8208c:	6301      	str	r1, [r0, #48]	; 0x30
   8208e:	e000      	b.n	82092 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82090:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82092:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82094:	6001      	str	r1, [r0, #0]
}
   82096:	f85d 4b04 	ldr.w	r4, [sp], #4
   8209a:	4770      	bx	lr

0008209c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8209c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8209e:	4770      	bx	lr

000820a0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   820a0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   820a2:	4770      	bx	lr

000820a4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   820a4:	b570      	push	{r4, r5, r6, lr}
   820a6:	b082      	sub	sp, #8
   820a8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   820aa:	0943      	lsrs	r3, r0, #5
   820ac:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   820b0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   820b4:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   820b6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   820ba:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   820be:	d030      	beq.n	82122 <pio_configure_pin+0x7e>
   820c0:	d806      	bhi.n	820d0 <pio_configure_pin+0x2c>
   820c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   820c6:	d00a      	beq.n	820de <pio_configure_pin+0x3a>
   820c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   820cc:	d018      	beq.n	82100 <pio_configure_pin+0x5c>
   820ce:	e049      	b.n	82164 <pio_configure_pin+0xc0>
   820d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   820d4:	d030      	beq.n	82138 <pio_configure_pin+0x94>
   820d6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   820da:	d02d      	beq.n	82138 <pio_configure_pin+0x94>
   820dc:	e042      	b.n	82164 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   820de:	f000 001f 	and.w	r0, r0, #31
   820e2:	2601      	movs	r6, #1
   820e4:	4086      	lsls	r6, r0
   820e6:	4620      	mov	r0, r4
   820e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   820ec:	4632      	mov	r2, r6
   820ee:	4b1f      	ldr	r3, [pc, #124]	; (8216c <pio_configure_pin+0xc8>)
   820f0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   820f2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   820f6:	bf14      	ite	ne
   820f8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   820fa:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   820fc:	2001      	movs	r0, #1
   820fe:	e032      	b.n	82166 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82100:	f000 001f 	and.w	r0, r0, #31
   82104:	2601      	movs	r6, #1
   82106:	4086      	lsls	r6, r0
   82108:	4620      	mov	r0, r4
   8210a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8210e:	4632      	mov	r2, r6
   82110:	4b16      	ldr	r3, [pc, #88]	; (8216c <pio_configure_pin+0xc8>)
   82112:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82114:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82118:	bf14      	ite	ne
   8211a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8211c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8211e:	2001      	movs	r0, #1
   82120:	e021      	b.n	82166 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82122:	f000 031f 	and.w	r3, r0, #31
   82126:	2601      	movs	r6, #1
   82128:	4620      	mov	r0, r4
   8212a:	fa06 f103 	lsl.w	r1, r6, r3
   8212e:	462a      	mov	r2, r5
   82130:	4b0f      	ldr	r3, [pc, #60]	; (82170 <pio_configure_pin+0xcc>)
   82132:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82134:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   82136:	e016      	b.n	82166 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82138:	f000 031f 	and.w	r3, r0, #31
   8213c:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8213e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82142:	ea05 0106 	and.w	r1, r5, r6
   82146:	9100      	str	r1, [sp, #0]
   82148:	4620      	mov	r0, r4
   8214a:	fa06 f103 	lsl.w	r1, r6, r3
   8214e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82152:	bf14      	ite	ne
   82154:	2200      	movne	r2, #0
   82156:	2201      	moveq	r2, #1
   82158:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8215c:	4c05      	ldr	r4, [pc, #20]	; (82174 <pio_configure_pin+0xd0>)
   8215e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82160:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82162:	e000      	b.n	82166 <pio_configure_pin+0xc2>

	default:
		return 0;
   82164:	2000      	movs	r0, #0
	}

	return 1;
}
   82166:	b002      	add	sp, #8
   82168:	bd70      	pop	{r4, r5, r6, pc}
   8216a:	bf00      	nop
   8216c:	00082001 	.word	0x00082001
   82170:	00082041 	.word	0x00082041
   82174:	00082075 	.word	0x00082075

00082178 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82178:	b570      	push	{r4, r5, r6, lr}
   8217a:	b082      	sub	sp, #8
   8217c:	4606      	mov	r6, r0
   8217e:	460d      	mov	r5, r1
   82180:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82182:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   82186:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8218a:	d026      	beq.n	821da <pio_configure_pin_group+0x62>
   8218c:	d806      	bhi.n	8219c <pio_configure_pin_group+0x24>
   8218e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82192:	d00a      	beq.n	821aa <pio_configure_pin_group+0x32>
   82194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82198:	d013      	beq.n	821c2 <pio_configure_pin_group+0x4a>
   8219a:	e034      	b.n	82206 <pio_configure_pin_group+0x8e>
   8219c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   821a0:	d01f      	beq.n	821e2 <pio_configure_pin_group+0x6a>
   821a2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   821a6:	d01c      	beq.n	821e2 <pio_configure_pin_group+0x6a>
   821a8:	e02d      	b.n	82206 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   821aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   821ae:	462a      	mov	r2, r5
   821b0:	4b16      	ldr	r3, [pc, #88]	; (8220c <pio_configure_pin_group+0x94>)
   821b2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   821b4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   821b8:	bf14      	ite	ne
   821ba:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   821bc:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   821be:	2001      	movs	r0, #1
   821c0:	e022      	b.n	82208 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   821c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   821c6:	462a      	mov	r2, r5
   821c8:	4b10      	ldr	r3, [pc, #64]	; (8220c <pio_configure_pin_group+0x94>)
   821ca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   821cc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   821d0:	bf14      	ite	ne
   821d2:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   821d4:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   821d6:	2001      	movs	r0, #1
   821d8:	e016      	b.n	82208 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   821da:	4b0d      	ldr	r3, [pc, #52]	; (82210 <pio_configure_pin_group+0x98>)
   821dc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   821de:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   821e0:	e012      	b.n	82208 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   821e2:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   821e6:	f004 0301 	and.w	r3, r4, #1
   821ea:	9300      	str	r3, [sp, #0]
   821ec:	4630      	mov	r0, r6
   821ee:	4629      	mov	r1, r5
   821f0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   821f4:	bf14      	ite	ne
   821f6:	2200      	movne	r2, #0
   821f8:	2201      	moveq	r2, #1
   821fa:	f3c4 0380 	ubfx	r3, r4, #2, #1
   821fe:	4c05      	ldr	r4, [pc, #20]	; (82214 <pio_configure_pin_group+0x9c>)
   82200:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82202:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82204:	e000      	b.n	82208 <pio_configure_pin_group+0x90>

	default:
		return 0;
   82206:	2000      	movs	r0, #0
	}

	return 1;
}
   82208:	b002      	add	sp, #8
   8220a:	bd70      	pop	{r4, r5, r6, pc}
   8220c:	00082001 	.word	0x00082001
   82210:	00082041 	.word	0x00082041
   82214:	00082075 	.word	0x00082075

00082218 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8221c:	4604      	mov	r4, r0
   8221e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82220:	4b0e      	ldr	r3, [pc, #56]	; (8225c <pio_handler_process+0x44>)
   82222:	4798      	blx	r3
   82224:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82226:	4620      	mov	r0, r4
   82228:	4b0d      	ldr	r3, [pc, #52]	; (82260 <pio_handler_process+0x48>)
   8222a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8222c:	4005      	ands	r5, r0
   8222e:	d013      	beq.n	82258 <pio_handler_process+0x40>
   82230:	4c0c      	ldr	r4, [pc, #48]	; (82264 <pio_handler_process+0x4c>)
   82232:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82236:	6823      	ldr	r3, [r4, #0]
   82238:	4543      	cmp	r3, r8
   8223a:	d108      	bne.n	8224e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8223c:	6861      	ldr	r1, [r4, #4]
   8223e:	4229      	tst	r1, r5
   82240:	d005      	beq.n	8224e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82242:	68e3      	ldr	r3, [r4, #12]
   82244:	4640      	mov	r0, r8
   82246:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82248:	6863      	ldr	r3, [r4, #4]
   8224a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8224e:	42b4      	cmp	r4, r6
   82250:	d002      	beq.n	82258 <pio_handler_process+0x40>
   82252:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82254:	2d00      	cmp	r5, #0
   82256:	d1ee      	bne.n	82236 <pio_handler_process+0x1e>
   82258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8225c:	0008209d 	.word	0x0008209d
   82260:	000820a1 	.word	0x000820a1
   82264:	20078848 	.word	0x20078848

00082268 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82268:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8226a:	4802      	ldr	r0, [pc, #8]	; (82274 <PIOA_Handler+0xc>)
   8226c:	210b      	movs	r1, #11
   8226e:	4b02      	ldr	r3, [pc, #8]	; (82278 <PIOA_Handler+0x10>)
   82270:	4798      	blx	r3
   82272:	bd08      	pop	{r3, pc}
   82274:	400e0e00 	.word	0x400e0e00
   82278:	00082219 	.word	0x00082219

0008227c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8227c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8227e:	4802      	ldr	r0, [pc, #8]	; (82288 <PIOB_Handler+0xc>)
   82280:	210c      	movs	r1, #12
   82282:	4b02      	ldr	r3, [pc, #8]	; (8228c <PIOB_Handler+0x10>)
   82284:	4798      	blx	r3
   82286:	bd08      	pop	{r3, pc}
   82288:	400e1000 	.word	0x400e1000
   8228c:	00082219 	.word	0x00082219

00082290 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82290:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82292:	4802      	ldr	r0, [pc, #8]	; (8229c <PIOC_Handler+0xc>)
   82294:	210d      	movs	r1, #13
   82296:	4b02      	ldr	r3, [pc, #8]	; (822a0 <PIOC_Handler+0x10>)
   82298:	4798      	blx	r3
   8229a:	bd08      	pop	{r3, pc}
   8229c:	400e1200 	.word	0x400e1200
   822a0:	00082219 	.word	0x00082219

000822a4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   822a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   822a6:	4802      	ldr	r0, [pc, #8]	; (822b0 <PIOD_Handler+0xc>)
   822a8:	210e      	movs	r1, #14
   822aa:	4b02      	ldr	r3, [pc, #8]	; (822b4 <PIOD_Handler+0x10>)
   822ac:	4798      	blx	r3
   822ae:	bd08      	pop	{r3, pc}
   822b0:	400e1400 	.word	0x400e1400
   822b4:	00082219 	.word	0x00082219

000822b8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   822b8:	4a18      	ldr	r2, [pc, #96]	; (8231c <pmc_switch_mck_to_pllack+0x64>)
   822ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
   822bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   822c0:	4318      	orrs	r0, r3
   822c2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   822c6:	f013 0f08 	tst.w	r3, #8
   822ca:	d003      	beq.n	822d4 <pmc_switch_mck_to_pllack+0x1c>
   822cc:	e009      	b.n	822e2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   822ce:	3b01      	subs	r3, #1
   822d0:	d103      	bne.n	822da <pmc_switch_mck_to_pllack+0x22>
   822d2:	e01e      	b.n	82312 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   822d8:	4910      	ldr	r1, [pc, #64]	; (8231c <pmc_switch_mck_to_pllack+0x64>)
   822da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   822dc:	f012 0f08 	tst.w	r2, #8
   822e0:	d0f5      	beq.n	822ce <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   822e2:	4a0e      	ldr	r2, [pc, #56]	; (8231c <pmc_switch_mck_to_pllack+0x64>)
   822e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   822e6:	f023 0303 	bic.w	r3, r3, #3
   822ea:	f043 0302 	orr.w	r3, r3, #2
   822ee:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822f0:	6e90      	ldr	r0, [r2, #104]	; 0x68
   822f2:	f010 0008 	ands.w	r0, r0, #8
   822f6:	d004      	beq.n	82302 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   822f8:	2000      	movs	r0, #0
   822fa:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   822fc:	3b01      	subs	r3, #1
   822fe:	d103      	bne.n	82308 <pmc_switch_mck_to_pllack+0x50>
   82300:	e009      	b.n	82316 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82302:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82306:	4905      	ldr	r1, [pc, #20]	; (8231c <pmc_switch_mck_to_pllack+0x64>)
   82308:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8230a:	f012 0f08 	tst.w	r2, #8
   8230e:	d0f5      	beq.n	822fc <pmc_switch_mck_to_pllack+0x44>
   82310:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82312:	2001      	movs	r0, #1
   82314:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82316:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82318:	4770      	bx	lr
   8231a:	bf00      	nop
   8231c:	400e0600 	.word	0x400e0600

00082320 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82320:	b138      	cbz	r0, 82332 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82322:	4911      	ldr	r1, [pc, #68]	; (82368 <pmc_switch_mainck_to_xtal+0x48>)
   82324:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82326:	4a11      	ldr	r2, [pc, #68]	; (8236c <pmc_switch_mainck_to_xtal+0x4c>)
   82328:	401a      	ands	r2, r3
   8232a:	4b11      	ldr	r3, [pc, #68]	; (82370 <pmc_switch_mainck_to_xtal+0x50>)
   8232c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8232e:	620b      	str	r3, [r1, #32]
   82330:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82332:	4a0d      	ldr	r2, [pc, #52]	; (82368 <pmc_switch_mainck_to_xtal+0x48>)
   82334:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82336:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8233a:	f023 0303 	bic.w	r3, r3, #3
   8233e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82342:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82346:	0209      	lsls	r1, r1, #8
   82348:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8234a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8234c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8234e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82350:	f013 0f01 	tst.w	r3, #1
   82354:	d0fb      	beq.n	8234e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82356:	4a04      	ldr	r2, [pc, #16]	; (82368 <pmc_switch_mainck_to_xtal+0x48>)
   82358:	6a13      	ldr	r3, [r2, #32]
   8235a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8235e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82362:	6213      	str	r3, [r2, #32]
   82364:	4770      	bx	lr
   82366:	bf00      	nop
   82368:	400e0600 	.word	0x400e0600
   8236c:	fec8fffc 	.word	0xfec8fffc
   82370:	01370002 	.word	0x01370002

00082374 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82374:	4b02      	ldr	r3, [pc, #8]	; (82380 <pmc_osc_is_ready_mainck+0xc>)
   82376:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82378:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8237c:	4770      	bx	lr
   8237e:	bf00      	nop
   82380:	400e0600 	.word	0x400e0600

00082384 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82384:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82388:	4b01      	ldr	r3, [pc, #4]	; (82390 <pmc_disable_pllack+0xc>)
   8238a:	629a      	str	r2, [r3, #40]	; 0x28
   8238c:	4770      	bx	lr
   8238e:	bf00      	nop
   82390:	400e0600 	.word	0x400e0600

00082394 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82394:	4b02      	ldr	r3, [pc, #8]	; (823a0 <pmc_is_locked_pllack+0xc>)
   82396:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82398:	f000 0002 	and.w	r0, r0, #2
   8239c:	4770      	bx	lr
   8239e:	bf00      	nop
   823a0:	400e0600 	.word	0x400e0600

000823a4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   823a4:	282c      	cmp	r0, #44	; 0x2c
   823a6:	d81e      	bhi.n	823e6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   823a8:	281f      	cmp	r0, #31
   823aa:	d80c      	bhi.n	823c6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   823ac:	4b11      	ldr	r3, [pc, #68]	; (823f4 <pmc_enable_periph_clk+0x50>)
   823ae:	699a      	ldr	r2, [r3, #24]
   823b0:	2301      	movs	r3, #1
   823b2:	4083      	lsls	r3, r0
   823b4:	401a      	ands	r2, r3
   823b6:	4293      	cmp	r3, r2
   823b8:	d017      	beq.n	823ea <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   823ba:	2301      	movs	r3, #1
   823bc:	4083      	lsls	r3, r0
   823be:	4a0d      	ldr	r2, [pc, #52]	; (823f4 <pmc_enable_periph_clk+0x50>)
   823c0:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   823c2:	2000      	movs	r0, #0
   823c4:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   823c6:	4b0b      	ldr	r3, [pc, #44]	; (823f4 <pmc_enable_periph_clk+0x50>)
   823c8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   823cc:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   823ce:	2301      	movs	r3, #1
   823d0:	4083      	lsls	r3, r0
   823d2:	401a      	ands	r2, r3
   823d4:	4293      	cmp	r3, r2
   823d6:	d00a      	beq.n	823ee <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   823d8:	2301      	movs	r3, #1
   823da:	4083      	lsls	r3, r0
   823dc:	4a05      	ldr	r2, [pc, #20]	; (823f4 <pmc_enable_periph_clk+0x50>)
   823de:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   823e2:	2000      	movs	r0, #0
   823e4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   823e6:	2001      	movs	r0, #1
   823e8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   823ea:	2000      	movs	r0, #0
   823ec:	4770      	bx	lr
   823ee:	2000      	movs	r0, #0
}
   823f0:	4770      	bx	lr
   823f2:	bf00      	nop
   823f4:	400e0600 	.word	0x400e0600

000823f8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   823f8:	e7fe      	b.n	823f8 <Dummy_Handler>
   823fa:	bf00      	nop

000823fc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   823fc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   823fe:	4b1f      	ldr	r3, [pc, #124]	; (8247c <Reset_Handler+0x80>)
   82400:	4a1f      	ldr	r2, [pc, #124]	; (82480 <Reset_Handler+0x84>)
   82402:	429a      	cmp	r2, r3
   82404:	d003      	beq.n	8240e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   82406:	4b1f      	ldr	r3, [pc, #124]	; (82484 <Reset_Handler+0x88>)
   82408:	4a1c      	ldr	r2, [pc, #112]	; (8247c <Reset_Handler+0x80>)
   8240a:	429a      	cmp	r2, r3
   8240c:	d304      	bcc.n	82418 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8240e:	4b1e      	ldr	r3, [pc, #120]	; (82488 <Reset_Handler+0x8c>)
   82410:	4a1e      	ldr	r2, [pc, #120]	; (8248c <Reset_Handler+0x90>)
   82412:	429a      	cmp	r2, r3
   82414:	d310      	bcc.n	82438 <Reset_Handler+0x3c>
   82416:	e01b      	b.n	82450 <Reset_Handler+0x54>
   82418:	4918      	ldr	r1, [pc, #96]	; (8247c <Reset_Handler+0x80>)
   8241a:	1d0a      	adds	r2, r1, #4
   8241c:	4b1c      	ldr	r3, [pc, #112]	; (82490 <Reset_Handler+0x94>)
   8241e:	1a9b      	subs	r3, r3, r2
   82420:	f023 0303 	bic.w	r3, r3, #3
   82424:	3304      	adds	r3, #4
   82426:	4a16      	ldr	r2, [pc, #88]	; (82480 <Reset_Handler+0x84>)
   82428:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8242a:	f852 0b04 	ldr.w	r0, [r2], #4
   8242e:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82432:	429a      	cmp	r2, r3
   82434:	d1f9      	bne.n	8242a <Reset_Handler+0x2e>
   82436:	e7ea      	b.n	8240e <Reset_Handler+0x12>
   82438:	4b16      	ldr	r3, [pc, #88]	; (82494 <Reset_Handler+0x98>)
   8243a:	4a17      	ldr	r2, [pc, #92]	; (82498 <Reset_Handler+0x9c>)
   8243c:	1ad2      	subs	r2, r2, r3
   8243e:	f022 0203 	bic.w	r2, r2, #3
   82442:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82444:	3b04      	subs	r3, #4
		*pDest++ = 0;
   82446:	2100      	movs	r1, #0
   82448:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8244c:	4293      	cmp	r3, r2
   8244e:	d1fb      	bne.n	82448 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82450:	4b12      	ldr	r3, [pc, #72]	; (8249c <Reset_Handler+0xa0>)
   82452:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82456:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8245a:	4911      	ldr	r1, [pc, #68]	; (824a0 <Reset_Handler+0xa4>)
   8245c:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8245e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   82462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   82466:	d203      	bcs.n	82470 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82468:	688b      	ldr	r3, [r1, #8]
   8246a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8246e:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82470:	4b0c      	ldr	r3, [pc, #48]	; (824a4 <Reset_Handler+0xa8>)
   82472:	4798      	blx	r3

	/* Branch to main function */
	main();
   82474:	4b0c      	ldr	r3, [pc, #48]	; (824a8 <Reset_Handler+0xac>)
   82476:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82478:	e7fe      	b.n	82478 <Reset_Handler+0x7c>
   8247a:	bf00      	nop
   8247c:	20070000 	.word	0x20070000
   82480:	0008373c 	.word	0x0008373c
   82484:	20070578 	.word	0x20070578
   82488:	200788b8 	.word	0x200788b8
   8248c:	20070578 	.word	0x20070578
   82490:	2007057b 	.word	0x2007057b
   82494:	2007057c 	.word	0x2007057c
   82498:	200788bb 	.word	0x200788bb
   8249c:	00080000 	.word	0x00080000
   824a0:	e000ed00 	.word	0xe000ed00
   824a4:	00083061 	.word	0x00083061
   824a8:	00080575 	.word	0x00080575

000824ac <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   824ac:	4b3e      	ldr	r3, [pc, #248]	; (825a8 <SystemCoreClockUpdate+0xfc>)
   824ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   824b0:	f003 0303 	and.w	r3, r3, #3
   824b4:	2b03      	cmp	r3, #3
   824b6:	d85f      	bhi.n	82578 <SystemCoreClockUpdate+0xcc>
   824b8:	e8df f003 	tbb	[pc, r3]
   824bc:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   824c0:	4b3a      	ldr	r3, [pc, #232]	; (825ac <SystemCoreClockUpdate+0x100>)
   824c2:	695b      	ldr	r3, [r3, #20]
   824c4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   824c8:	bf14      	ite	ne
   824ca:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   824ce:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   824d2:	4b37      	ldr	r3, [pc, #220]	; (825b0 <SystemCoreClockUpdate+0x104>)
   824d4:	601a      	str	r2, [r3, #0]
   824d6:	e04f      	b.n	82578 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   824d8:	4b33      	ldr	r3, [pc, #204]	; (825a8 <SystemCoreClockUpdate+0xfc>)
   824da:	6a1b      	ldr	r3, [r3, #32]
   824dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   824e0:	d003      	beq.n	824ea <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   824e2:	4a34      	ldr	r2, [pc, #208]	; (825b4 <SystemCoreClockUpdate+0x108>)
   824e4:	4b32      	ldr	r3, [pc, #200]	; (825b0 <SystemCoreClockUpdate+0x104>)
   824e6:	601a      	str	r2, [r3, #0]
   824e8:	e046      	b.n	82578 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   824ea:	4a33      	ldr	r2, [pc, #204]	; (825b8 <SystemCoreClockUpdate+0x10c>)
   824ec:	4b30      	ldr	r3, [pc, #192]	; (825b0 <SystemCoreClockUpdate+0x104>)
   824ee:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   824f0:	4b2d      	ldr	r3, [pc, #180]	; (825a8 <SystemCoreClockUpdate+0xfc>)
   824f2:	6a1b      	ldr	r3, [r3, #32]
   824f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   824f8:	2b10      	cmp	r3, #16
   824fa:	d002      	beq.n	82502 <SystemCoreClockUpdate+0x56>
   824fc:	2b20      	cmp	r3, #32
   824fe:	d004      	beq.n	8250a <SystemCoreClockUpdate+0x5e>
   82500:	e03a      	b.n	82578 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82502:	4a2e      	ldr	r2, [pc, #184]	; (825bc <SystemCoreClockUpdate+0x110>)
   82504:	4b2a      	ldr	r3, [pc, #168]	; (825b0 <SystemCoreClockUpdate+0x104>)
   82506:	601a      	str	r2, [r3, #0]
				break;
   82508:	e036      	b.n	82578 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8250a:	4a2a      	ldr	r2, [pc, #168]	; (825b4 <SystemCoreClockUpdate+0x108>)
   8250c:	4b28      	ldr	r3, [pc, #160]	; (825b0 <SystemCoreClockUpdate+0x104>)
   8250e:	601a      	str	r2, [r3, #0]
				break;
   82510:	e032      	b.n	82578 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82512:	4b25      	ldr	r3, [pc, #148]	; (825a8 <SystemCoreClockUpdate+0xfc>)
   82514:	6a1b      	ldr	r3, [r3, #32]
   82516:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8251a:	d003      	beq.n	82524 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8251c:	4a25      	ldr	r2, [pc, #148]	; (825b4 <SystemCoreClockUpdate+0x108>)
   8251e:	4b24      	ldr	r3, [pc, #144]	; (825b0 <SystemCoreClockUpdate+0x104>)
   82520:	601a      	str	r2, [r3, #0]
   82522:	e012      	b.n	8254a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82524:	4a24      	ldr	r2, [pc, #144]	; (825b8 <SystemCoreClockUpdate+0x10c>)
   82526:	4b22      	ldr	r3, [pc, #136]	; (825b0 <SystemCoreClockUpdate+0x104>)
   82528:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8252a:	4b1f      	ldr	r3, [pc, #124]	; (825a8 <SystemCoreClockUpdate+0xfc>)
   8252c:	6a1b      	ldr	r3, [r3, #32]
   8252e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82532:	2b10      	cmp	r3, #16
   82534:	d002      	beq.n	8253c <SystemCoreClockUpdate+0x90>
   82536:	2b20      	cmp	r3, #32
   82538:	d004      	beq.n	82544 <SystemCoreClockUpdate+0x98>
   8253a:	e006      	b.n	8254a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8253c:	4a1f      	ldr	r2, [pc, #124]	; (825bc <SystemCoreClockUpdate+0x110>)
   8253e:	4b1c      	ldr	r3, [pc, #112]	; (825b0 <SystemCoreClockUpdate+0x104>)
   82540:	601a      	str	r2, [r3, #0]
				break;
   82542:	e002      	b.n	8254a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82544:	4a1b      	ldr	r2, [pc, #108]	; (825b4 <SystemCoreClockUpdate+0x108>)
   82546:	4b1a      	ldr	r3, [pc, #104]	; (825b0 <SystemCoreClockUpdate+0x104>)
   82548:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8254a:	4b17      	ldr	r3, [pc, #92]	; (825a8 <SystemCoreClockUpdate+0xfc>)
   8254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8254e:	f003 0303 	and.w	r3, r3, #3
   82552:	2b02      	cmp	r3, #2
   82554:	d10d      	bne.n	82572 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82556:	4a14      	ldr	r2, [pc, #80]	; (825a8 <SystemCoreClockUpdate+0xfc>)
   82558:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8255a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8255c:	4814      	ldr	r0, [pc, #80]	; (825b0 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8255e:	f3c3 410a 	ubfx	r1, r3, #16, #11
   82562:	6803      	ldr	r3, [r0, #0]
   82564:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82568:	b2d2      	uxtb	r2, r2
   8256a:	fbb3 f3f2 	udiv	r3, r3, r2
   8256e:	6003      	str	r3, [r0, #0]
   82570:	e002      	b.n	82578 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82572:	4a13      	ldr	r2, [pc, #76]	; (825c0 <SystemCoreClockUpdate+0x114>)
   82574:	4b0e      	ldr	r3, [pc, #56]	; (825b0 <SystemCoreClockUpdate+0x104>)
   82576:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82578:	4b0b      	ldr	r3, [pc, #44]	; (825a8 <SystemCoreClockUpdate+0xfc>)
   8257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8257c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82580:	2b70      	cmp	r3, #112	; 0x70
   82582:	d107      	bne.n	82594 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82584:	4a0a      	ldr	r2, [pc, #40]	; (825b0 <SystemCoreClockUpdate+0x104>)
   82586:	6813      	ldr	r3, [r2, #0]
   82588:	490e      	ldr	r1, [pc, #56]	; (825c4 <SystemCoreClockUpdate+0x118>)
   8258a:	fba1 1303 	umull	r1, r3, r1, r3
   8258e:	085b      	lsrs	r3, r3, #1
   82590:	6013      	str	r3, [r2, #0]
   82592:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82594:	4b04      	ldr	r3, [pc, #16]	; (825a8 <SystemCoreClockUpdate+0xfc>)
   82596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82598:	4905      	ldr	r1, [pc, #20]	; (825b0 <SystemCoreClockUpdate+0x104>)
   8259a:	f3c2 1202 	ubfx	r2, r2, #4, #3
   8259e:	680b      	ldr	r3, [r1, #0]
   825a0:	40d3      	lsrs	r3, r2
   825a2:	600b      	str	r3, [r1, #0]
   825a4:	4770      	bx	lr
   825a6:	bf00      	nop
   825a8:	400e0600 	.word	0x400e0600
   825ac:	400e1a10 	.word	0x400e1a10
   825b0:	20070144 	.word	0x20070144
   825b4:	00b71b00 	.word	0x00b71b00
   825b8:	003d0900 	.word	0x003d0900
   825bc:	007a1200 	.word	0x007a1200
   825c0:	0e4e1c00 	.word	0x0e4e1c00
   825c4:	aaaaaaab 	.word	0xaaaaaaab

000825c8 <__aeabi_drsub>:
   825c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   825cc:	e002      	b.n	825d4 <__adddf3>
   825ce:	bf00      	nop

000825d0 <__aeabi_dsub>:
   825d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000825d4 <__adddf3>:
   825d4:	b530      	push	{r4, r5, lr}
   825d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   825da:	ea4f 0543 	mov.w	r5, r3, lsl #1
   825de:	ea94 0f05 	teq	r4, r5
   825e2:	bf08      	it	eq
   825e4:	ea90 0f02 	teqeq	r0, r2
   825e8:	bf1f      	itttt	ne
   825ea:	ea54 0c00 	orrsne.w	ip, r4, r0
   825ee:	ea55 0c02 	orrsne.w	ip, r5, r2
   825f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   825f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   825fa:	f000 80e2 	beq.w	827c2 <__adddf3+0x1ee>
   825fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82602:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   82606:	bfb8      	it	lt
   82608:	426d      	neglt	r5, r5
   8260a:	dd0c      	ble.n	82626 <__adddf3+0x52>
   8260c:	442c      	add	r4, r5
   8260e:	ea80 0202 	eor.w	r2, r0, r2
   82612:	ea81 0303 	eor.w	r3, r1, r3
   82616:	ea82 0000 	eor.w	r0, r2, r0
   8261a:	ea83 0101 	eor.w	r1, r3, r1
   8261e:	ea80 0202 	eor.w	r2, r0, r2
   82622:	ea81 0303 	eor.w	r3, r1, r3
   82626:	2d36      	cmp	r5, #54	; 0x36
   82628:	bf88      	it	hi
   8262a:	bd30      	pophi	{r4, r5, pc}
   8262c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82630:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82634:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   82638:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8263c:	d002      	beq.n	82644 <__adddf3+0x70>
   8263e:	4240      	negs	r0, r0
   82640:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82644:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   82648:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8264c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   82650:	d002      	beq.n	82658 <__adddf3+0x84>
   82652:	4252      	negs	r2, r2
   82654:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82658:	ea94 0f05 	teq	r4, r5
   8265c:	f000 80a7 	beq.w	827ae <__adddf3+0x1da>
   82660:	f1a4 0401 	sub.w	r4, r4, #1
   82664:	f1d5 0e20 	rsbs	lr, r5, #32
   82668:	db0d      	blt.n	82686 <__adddf3+0xb2>
   8266a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8266e:	fa22 f205 	lsr.w	r2, r2, r5
   82672:	1880      	adds	r0, r0, r2
   82674:	f141 0100 	adc.w	r1, r1, #0
   82678:	fa03 f20e 	lsl.w	r2, r3, lr
   8267c:	1880      	adds	r0, r0, r2
   8267e:	fa43 f305 	asr.w	r3, r3, r5
   82682:	4159      	adcs	r1, r3
   82684:	e00e      	b.n	826a4 <__adddf3+0xd0>
   82686:	f1a5 0520 	sub.w	r5, r5, #32
   8268a:	f10e 0e20 	add.w	lr, lr, #32
   8268e:	2a01      	cmp	r2, #1
   82690:	fa03 fc0e 	lsl.w	ip, r3, lr
   82694:	bf28      	it	cs
   82696:	f04c 0c02 	orrcs.w	ip, ip, #2
   8269a:	fa43 f305 	asr.w	r3, r3, r5
   8269e:	18c0      	adds	r0, r0, r3
   826a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   826a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   826a8:	d507      	bpl.n	826ba <__adddf3+0xe6>
   826aa:	f04f 0e00 	mov.w	lr, #0
   826ae:	f1dc 0c00 	rsbs	ip, ip, #0
   826b2:	eb7e 0000 	sbcs.w	r0, lr, r0
   826b6:	eb6e 0101 	sbc.w	r1, lr, r1
   826ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   826be:	d31b      	bcc.n	826f8 <__adddf3+0x124>
   826c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   826c4:	d30c      	bcc.n	826e0 <__adddf3+0x10c>
   826c6:	0849      	lsrs	r1, r1, #1
   826c8:	ea5f 0030 	movs.w	r0, r0, rrx
   826cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   826d0:	f104 0401 	add.w	r4, r4, #1
   826d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   826d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   826dc:	f080 809a 	bcs.w	82814 <__adddf3+0x240>
   826e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   826e4:	bf08      	it	eq
   826e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   826ea:	f150 0000 	adcs.w	r0, r0, #0
   826ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   826f2:	ea41 0105 	orr.w	r1, r1, r5
   826f6:	bd30      	pop	{r4, r5, pc}
   826f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   826fc:	4140      	adcs	r0, r0
   826fe:	eb41 0101 	adc.w	r1, r1, r1
   82702:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82706:	f1a4 0401 	sub.w	r4, r4, #1
   8270a:	d1e9      	bne.n	826e0 <__adddf3+0x10c>
   8270c:	f091 0f00 	teq	r1, #0
   82710:	bf04      	itt	eq
   82712:	4601      	moveq	r1, r0
   82714:	2000      	moveq	r0, #0
   82716:	fab1 f381 	clz	r3, r1
   8271a:	bf08      	it	eq
   8271c:	3320      	addeq	r3, #32
   8271e:	f1a3 030b 	sub.w	r3, r3, #11
   82722:	f1b3 0220 	subs.w	r2, r3, #32
   82726:	da0c      	bge.n	82742 <__adddf3+0x16e>
   82728:	320c      	adds	r2, #12
   8272a:	dd08      	ble.n	8273e <__adddf3+0x16a>
   8272c:	f102 0c14 	add.w	ip, r2, #20
   82730:	f1c2 020c 	rsb	r2, r2, #12
   82734:	fa01 f00c 	lsl.w	r0, r1, ip
   82738:	fa21 f102 	lsr.w	r1, r1, r2
   8273c:	e00c      	b.n	82758 <__adddf3+0x184>
   8273e:	f102 0214 	add.w	r2, r2, #20
   82742:	bfd8      	it	le
   82744:	f1c2 0c20 	rsble	ip, r2, #32
   82748:	fa01 f102 	lsl.w	r1, r1, r2
   8274c:	fa20 fc0c 	lsr.w	ip, r0, ip
   82750:	bfdc      	itt	le
   82752:	ea41 010c 	orrle.w	r1, r1, ip
   82756:	4090      	lslle	r0, r2
   82758:	1ae4      	subs	r4, r4, r3
   8275a:	bfa2      	ittt	ge
   8275c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   82760:	4329      	orrge	r1, r5
   82762:	bd30      	popge	{r4, r5, pc}
   82764:	ea6f 0404 	mvn.w	r4, r4
   82768:	3c1f      	subs	r4, #31
   8276a:	da1c      	bge.n	827a6 <__adddf3+0x1d2>
   8276c:	340c      	adds	r4, #12
   8276e:	dc0e      	bgt.n	8278e <__adddf3+0x1ba>
   82770:	f104 0414 	add.w	r4, r4, #20
   82774:	f1c4 0220 	rsb	r2, r4, #32
   82778:	fa20 f004 	lsr.w	r0, r0, r4
   8277c:	fa01 f302 	lsl.w	r3, r1, r2
   82780:	ea40 0003 	orr.w	r0, r0, r3
   82784:	fa21 f304 	lsr.w	r3, r1, r4
   82788:	ea45 0103 	orr.w	r1, r5, r3
   8278c:	bd30      	pop	{r4, r5, pc}
   8278e:	f1c4 040c 	rsb	r4, r4, #12
   82792:	f1c4 0220 	rsb	r2, r4, #32
   82796:	fa20 f002 	lsr.w	r0, r0, r2
   8279a:	fa01 f304 	lsl.w	r3, r1, r4
   8279e:	ea40 0003 	orr.w	r0, r0, r3
   827a2:	4629      	mov	r1, r5
   827a4:	bd30      	pop	{r4, r5, pc}
   827a6:	fa21 f004 	lsr.w	r0, r1, r4
   827aa:	4629      	mov	r1, r5
   827ac:	bd30      	pop	{r4, r5, pc}
   827ae:	f094 0f00 	teq	r4, #0
   827b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   827b6:	bf06      	itte	eq
   827b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   827bc:	3401      	addeq	r4, #1
   827be:	3d01      	subne	r5, #1
   827c0:	e74e      	b.n	82660 <__adddf3+0x8c>
   827c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   827c6:	bf18      	it	ne
   827c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   827cc:	d029      	beq.n	82822 <__adddf3+0x24e>
   827ce:	ea94 0f05 	teq	r4, r5
   827d2:	bf08      	it	eq
   827d4:	ea90 0f02 	teqeq	r0, r2
   827d8:	d005      	beq.n	827e6 <__adddf3+0x212>
   827da:	ea54 0c00 	orrs.w	ip, r4, r0
   827de:	bf04      	itt	eq
   827e0:	4619      	moveq	r1, r3
   827e2:	4610      	moveq	r0, r2
   827e4:	bd30      	pop	{r4, r5, pc}
   827e6:	ea91 0f03 	teq	r1, r3
   827ea:	bf1e      	ittt	ne
   827ec:	2100      	movne	r1, #0
   827ee:	2000      	movne	r0, #0
   827f0:	bd30      	popne	{r4, r5, pc}
   827f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   827f6:	d105      	bne.n	82804 <__adddf3+0x230>
   827f8:	0040      	lsls	r0, r0, #1
   827fa:	4149      	adcs	r1, r1
   827fc:	bf28      	it	cs
   827fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82802:	bd30      	pop	{r4, r5, pc}
   82804:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   82808:	bf3c      	itt	cc
   8280a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8280e:	bd30      	popcc	{r4, r5, pc}
   82810:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82814:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   82818:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8281c:	f04f 0000 	mov.w	r0, #0
   82820:	bd30      	pop	{r4, r5, pc}
   82822:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82826:	bf1a      	itte	ne
   82828:	4619      	movne	r1, r3
   8282a:	4610      	movne	r0, r2
   8282c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   82830:	bf1c      	itt	ne
   82832:	460b      	movne	r3, r1
   82834:	4602      	movne	r2, r0
   82836:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8283a:	bf06      	itte	eq
   8283c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   82840:	ea91 0f03 	teqeq	r1, r3
   82844:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   82848:	bd30      	pop	{r4, r5, pc}
   8284a:	bf00      	nop

0008284c <__aeabi_ui2d>:
   8284c:	f090 0f00 	teq	r0, #0
   82850:	bf04      	itt	eq
   82852:	2100      	moveq	r1, #0
   82854:	4770      	bxeq	lr
   82856:	b530      	push	{r4, r5, lr}
   82858:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8285c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82860:	f04f 0500 	mov.w	r5, #0
   82864:	f04f 0100 	mov.w	r1, #0
   82868:	e750      	b.n	8270c <__adddf3+0x138>
   8286a:	bf00      	nop

0008286c <__aeabi_i2d>:
   8286c:	f090 0f00 	teq	r0, #0
   82870:	bf04      	itt	eq
   82872:	2100      	moveq	r1, #0
   82874:	4770      	bxeq	lr
   82876:	b530      	push	{r4, r5, lr}
   82878:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8287c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82880:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   82884:	bf48      	it	mi
   82886:	4240      	negmi	r0, r0
   82888:	f04f 0100 	mov.w	r1, #0
   8288c:	e73e      	b.n	8270c <__adddf3+0x138>
   8288e:	bf00      	nop

00082890 <__aeabi_f2d>:
   82890:	0042      	lsls	r2, r0, #1
   82892:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82896:	ea4f 0131 	mov.w	r1, r1, rrx
   8289a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8289e:	bf1f      	itttt	ne
   828a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   828a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   828a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   828ac:	4770      	bxne	lr
   828ae:	f092 0f00 	teq	r2, #0
   828b2:	bf14      	ite	ne
   828b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   828b8:	4770      	bxeq	lr
   828ba:	b530      	push	{r4, r5, lr}
   828bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   828c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   828c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   828c8:	e720      	b.n	8270c <__adddf3+0x138>
   828ca:	bf00      	nop

000828cc <__aeabi_ul2d>:
   828cc:	ea50 0201 	orrs.w	r2, r0, r1
   828d0:	bf08      	it	eq
   828d2:	4770      	bxeq	lr
   828d4:	b530      	push	{r4, r5, lr}
   828d6:	f04f 0500 	mov.w	r5, #0
   828da:	e00a      	b.n	828f2 <__aeabi_l2d+0x16>

000828dc <__aeabi_l2d>:
   828dc:	ea50 0201 	orrs.w	r2, r0, r1
   828e0:	bf08      	it	eq
   828e2:	4770      	bxeq	lr
   828e4:	b530      	push	{r4, r5, lr}
   828e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   828ea:	d502      	bpl.n	828f2 <__aeabi_l2d+0x16>
   828ec:	4240      	negs	r0, r0
   828ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   828f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   828f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   828fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   828fe:	f43f aedc 	beq.w	826ba <__adddf3+0xe6>
   82902:	f04f 0203 	mov.w	r2, #3
   82906:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8290a:	bf18      	it	ne
   8290c:	3203      	addne	r2, #3
   8290e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82912:	bf18      	it	ne
   82914:	3203      	addne	r2, #3
   82916:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8291a:	f1c2 0320 	rsb	r3, r2, #32
   8291e:	fa00 fc03 	lsl.w	ip, r0, r3
   82922:	fa20 f002 	lsr.w	r0, r0, r2
   82926:	fa01 fe03 	lsl.w	lr, r1, r3
   8292a:	ea40 000e 	orr.w	r0, r0, lr
   8292e:	fa21 f102 	lsr.w	r1, r1, r2
   82932:	4414      	add	r4, r2
   82934:	e6c1      	b.n	826ba <__adddf3+0xe6>
   82936:	bf00      	nop

00082938 <__aeabi_dmul>:
   82938:	b570      	push	{r4, r5, r6, lr}
   8293a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8293e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82942:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82946:	bf1d      	ittte	ne
   82948:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8294c:	ea94 0f0c 	teqne	r4, ip
   82950:	ea95 0f0c 	teqne	r5, ip
   82954:	f000 f8de 	bleq	82b14 <__aeabi_dmul+0x1dc>
   82958:	442c      	add	r4, r5
   8295a:	ea81 0603 	eor.w	r6, r1, r3
   8295e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   82962:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   82966:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8296a:	bf18      	it	ne
   8296c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82978:	d038      	beq.n	829ec <__aeabi_dmul+0xb4>
   8297a:	fba0 ce02 	umull	ip, lr, r0, r2
   8297e:	f04f 0500 	mov.w	r5, #0
   82982:	fbe1 e502 	umlal	lr, r5, r1, r2
   82986:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8298a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8298e:	f04f 0600 	mov.w	r6, #0
   82992:	fbe1 5603 	umlal	r5, r6, r1, r3
   82996:	f09c 0f00 	teq	ip, #0
   8299a:	bf18      	it	ne
   8299c:	f04e 0e01 	orrne.w	lr, lr, #1
   829a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   829a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   829a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   829ac:	d204      	bcs.n	829b8 <__aeabi_dmul+0x80>
   829ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   829b2:	416d      	adcs	r5, r5
   829b4:	eb46 0606 	adc.w	r6, r6, r6
   829b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   829bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   829c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   829c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   829c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   829cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   829d0:	bf88      	it	hi
   829d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   829d6:	d81e      	bhi.n	82a16 <__aeabi_dmul+0xde>
   829d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   829dc:	bf08      	it	eq
   829de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   829e2:	f150 0000 	adcs.w	r0, r0, #0
   829e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   829ea:	bd70      	pop	{r4, r5, r6, pc}
   829ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   829f0:	ea46 0101 	orr.w	r1, r6, r1
   829f4:	ea40 0002 	orr.w	r0, r0, r2
   829f8:	ea81 0103 	eor.w	r1, r1, r3
   829fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   82a00:	bfc2      	ittt	gt
   82a02:	ebd4 050c 	rsbsgt	r5, r4, ip
   82a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82a0a:	bd70      	popgt	{r4, r5, r6, pc}
   82a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82a10:	f04f 0e00 	mov.w	lr, #0
   82a14:	3c01      	subs	r4, #1
   82a16:	f300 80ab 	bgt.w	82b70 <__aeabi_dmul+0x238>
   82a1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   82a1e:	bfde      	ittt	le
   82a20:	2000      	movle	r0, #0
   82a22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   82a26:	bd70      	pople	{r4, r5, r6, pc}
   82a28:	f1c4 0400 	rsb	r4, r4, #0
   82a2c:	3c20      	subs	r4, #32
   82a2e:	da35      	bge.n	82a9c <__aeabi_dmul+0x164>
   82a30:	340c      	adds	r4, #12
   82a32:	dc1b      	bgt.n	82a6c <__aeabi_dmul+0x134>
   82a34:	f104 0414 	add.w	r4, r4, #20
   82a38:	f1c4 0520 	rsb	r5, r4, #32
   82a3c:	fa00 f305 	lsl.w	r3, r0, r5
   82a40:	fa20 f004 	lsr.w	r0, r0, r4
   82a44:	fa01 f205 	lsl.w	r2, r1, r5
   82a48:	ea40 0002 	orr.w	r0, r0, r2
   82a4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   82a50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82a54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82a58:	fa21 f604 	lsr.w	r6, r1, r4
   82a5c:	eb42 0106 	adc.w	r1, r2, r6
   82a60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82a64:	bf08      	it	eq
   82a66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82a6a:	bd70      	pop	{r4, r5, r6, pc}
   82a6c:	f1c4 040c 	rsb	r4, r4, #12
   82a70:	f1c4 0520 	rsb	r5, r4, #32
   82a74:	fa00 f304 	lsl.w	r3, r0, r4
   82a78:	fa20 f005 	lsr.w	r0, r0, r5
   82a7c:	fa01 f204 	lsl.w	r2, r1, r4
   82a80:	ea40 0002 	orr.w	r0, r0, r2
   82a84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82a88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82a8c:	f141 0100 	adc.w	r1, r1, #0
   82a90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82a94:	bf08      	it	eq
   82a96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82a9a:	bd70      	pop	{r4, r5, r6, pc}
   82a9c:	f1c4 0520 	rsb	r5, r4, #32
   82aa0:	fa00 f205 	lsl.w	r2, r0, r5
   82aa4:	ea4e 0e02 	orr.w	lr, lr, r2
   82aa8:	fa20 f304 	lsr.w	r3, r0, r4
   82aac:	fa01 f205 	lsl.w	r2, r1, r5
   82ab0:	ea43 0302 	orr.w	r3, r3, r2
   82ab4:	fa21 f004 	lsr.w	r0, r1, r4
   82ab8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82abc:	fa21 f204 	lsr.w	r2, r1, r4
   82ac0:	ea20 0002 	bic.w	r0, r0, r2
   82ac4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   82ac8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82acc:	bf08      	it	eq
   82ace:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82ad2:	bd70      	pop	{r4, r5, r6, pc}
   82ad4:	f094 0f00 	teq	r4, #0
   82ad8:	d10f      	bne.n	82afa <__aeabi_dmul+0x1c2>
   82ada:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   82ade:	0040      	lsls	r0, r0, #1
   82ae0:	eb41 0101 	adc.w	r1, r1, r1
   82ae4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82ae8:	bf08      	it	eq
   82aea:	3c01      	subeq	r4, #1
   82aec:	d0f7      	beq.n	82ade <__aeabi_dmul+0x1a6>
   82aee:	ea41 0106 	orr.w	r1, r1, r6
   82af2:	f095 0f00 	teq	r5, #0
   82af6:	bf18      	it	ne
   82af8:	4770      	bxne	lr
   82afa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   82afe:	0052      	lsls	r2, r2, #1
   82b00:	eb43 0303 	adc.w	r3, r3, r3
   82b04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   82b08:	bf08      	it	eq
   82b0a:	3d01      	subeq	r5, #1
   82b0c:	d0f7      	beq.n	82afe <__aeabi_dmul+0x1c6>
   82b0e:	ea43 0306 	orr.w	r3, r3, r6
   82b12:	4770      	bx	lr
   82b14:	ea94 0f0c 	teq	r4, ip
   82b18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82b1c:	bf18      	it	ne
   82b1e:	ea95 0f0c 	teqne	r5, ip
   82b22:	d00c      	beq.n	82b3e <__aeabi_dmul+0x206>
   82b24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82b28:	bf18      	it	ne
   82b2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82b2e:	d1d1      	bne.n	82ad4 <__aeabi_dmul+0x19c>
   82b30:	ea81 0103 	eor.w	r1, r1, r3
   82b34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82b38:	f04f 0000 	mov.w	r0, #0
   82b3c:	bd70      	pop	{r4, r5, r6, pc}
   82b3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82b42:	bf06      	itte	eq
   82b44:	4610      	moveq	r0, r2
   82b46:	4619      	moveq	r1, r3
   82b48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82b4c:	d019      	beq.n	82b82 <__aeabi_dmul+0x24a>
   82b4e:	ea94 0f0c 	teq	r4, ip
   82b52:	d102      	bne.n	82b5a <__aeabi_dmul+0x222>
   82b54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   82b58:	d113      	bne.n	82b82 <__aeabi_dmul+0x24a>
   82b5a:	ea95 0f0c 	teq	r5, ip
   82b5e:	d105      	bne.n	82b6c <__aeabi_dmul+0x234>
   82b60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   82b64:	bf1c      	itt	ne
   82b66:	4610      	movne	r0, r2
   82b68:	4619      	movne	r1, r3
   82b6a:	d10a      	bne.n	82b82 <__aeabi_dmul+0x24a>
   82b6c:	ea81 0103 	eor.w	r1, r1, r3
   82b70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82b74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82b78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82b7c:	f04f 0000 	mov.w	r0, #0
   82b80:	bd70      	pop	{r4, r5, r6, pc}
   82b82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82b86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   82b8a:	bd70      	pop	{r4, r5, r6, pc}

00082b8c <__aeabi_ddiv>:
   82b8c:	b570      	push	{r4, r5, r6, lr}
   82b8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82b92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82b96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82b9a:	bf1d      	ittte	ne
   82b9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82ba0:	ea94 0f0c 	teqne	r4, ip
   82ba4:	ea95 0f0c 	teqne	r5, ip
   82ba8:	f000 f8a7 	bleq	82cfa <__aeabi_ddiv+0x16e>
   82bac:	eba4 0405 	sub.w	r4, r4, r5
   82bb0:	ea81 0e03 	eor.w	lr, r1, r3
   82bb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82bb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82bbc:	f000 8088 	beq.w	82cd0 <__aeabi_ddiv+0x144>
   82bc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82bc4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   82bc8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   82bcc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   82bd0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   82bd4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   82bd8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   82bdc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   82be0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   82be4:	429d      	cmp	r5, r3
   82be6:	bf08      	it	eq
   82be8:	4296      	cmpeq	r6, r2
   82bea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   82bee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   82bf2:	d202      	bcs.n	82bfa <__aeabi_ddiv+0x6e>
   82bf4:	085b      	lsrs	r3, r3, #1
   82bf6:	ea4f 0232 	mov.w	r2, r2, rrx
   82bfa:	1ab6      	subs	r6, r6, r2
   82bfc:	eb65 0503 	sbc.w	r5, r5, r3
   82c00:	085b      	lsrs	r3, r3, #1
   82c02:	ea4f 0232 	mov.w	r2, r2, rrx
   82c06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   82c0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   82c0e:	ebb6 0e02 	subs.w	lr, r6, r2
   82c12:	eb75 0e03 	sbcs.w	lr, r5, r3
   82c16:	bf22      	ittt	cs
   82c18:	1ab6      	subcs	r6, r6, r2
   82c1a:	4675      	movcs	r5, lr
   82c1c:	ea40 000c 	orrcs.w	r0, r0, ip
   82c20:	085b      	lsrs	r3, r3, #1
   82c22:	ea4f 0232 	mov.w	r2, r2, rrx
   82c26:	ebb6 0e02 	subs.w	lr, r6, r2
   82c2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   82c2e:	bf22      	ittt	cs
   82c30:	1ab6      	subcs	r6, r6, r2
   82c32:	4675      	movcs	r5, lr
   82c34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82c38:	085b      	lsrs	r3, r3, #1
   82c3a:	ea4f 0232 	mov.w	r2, r2, rrx
   82c3e:	ebb6 0e02 	subs.w	lr, r6, r2
   82c42:	eb75 0e03 	sbcs.w	lr, r5, r3
   82c46:	bf22      	ittt	cs
   82c48:	1ab6      	subcs	r6, r6, r2
   82c4a:	4675      	movcs	r5, lr
   82c4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82c50:	085b      	lsrs	r3, r3, #1
   82c52:	ea4f 0232 	mov.w	r2, r2, rrx
   82c56:	ebb6 0e02 	subs.w	lr, r6, r2
   82c5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   82c5e:	bf22      	ittt	cs
   82c60:	1ab6      	subcs	r6, r6, r2
   82c62:	4675      	movcs	r5, lr
   82c64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82c68:	ea55 0e06 	orrs.w	lr, r5, r6
   82c6c:	d018      	beq.n	82ca0 <__aeabi_ddiv+0x114>
   82c6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   82c72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   82c76:	ea4f 1606 	mov.w	r6, r6, lsl #4
   82c7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   82c7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   82c82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   82c86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   82c8a:	d1c0      	bne.n	82c0e <__aeabi_ddiv+0x82>
   82c8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82c90:	d10b      	bne.n	82caa <__aeabi_ddiv+0x11e>
   82c92:	ea41 0100 	orr.w	r1, r1, r0
   82c96:	f04f 0000 	mov.w	r0, #0
   82c9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   82c9e:	e7b6      	b.n	82c0e <__aeabi_ddiv+0x82>
   82ca0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82ca4:	bf04      	itt	eq
   82ca6:	4301      	orreq	r1, r0
   82ca8:	2000      	moveq	r0, #0
   82caa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82cae:	bf88      	it	hi
   82cb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   82cb4:	f63f aeaf 	bhi.w	82a16 <__aeabi_dmul+0xde>
   82cb8:	ebb5 0c03 	subs.w	ip, r5, r3
   82cbc:	bf04      	itt	eq
   82cbe:	ebb6 0c02 	subseq.w	ip, r6, r2
   82cc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82cc6:	f150 0000 	adcs.w	r0, r0, #0
   82cca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82cce:	bd70      	pop	{r4, r5, r6, pc}
   82cd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   82cd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   82cd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   82cdc:	bfc2      	ittt	gt
   82cde:	ebd4 050c 	rsbsgt	r5, r4, ip
   82ce2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82ce6:	bd70      	popgt	{r4, r5, r6, pc}
   82ce8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82cec:	f04f 0e00 	mov.w	lr, #0
   82cf0:	3c01      	subs	r4, #1
   82cf2:	e690      	b.n	82a16 <__aeabi_dmul+0xde>
   82cf4:	ea45 0e06 	orr.w	lr, r5, r6
   82cf8:	e68d      	b.n	82a16 <__aeabi_dmul+0xde>
   82cfa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82cfe:	ea94 0f0c 	teq	r4, ip
   82d02:	bf08      	it	eq
   82d04:	ea95 0f0c 	teqeq	r5, ip
   82d08:	f43f af3b 	beq.w	82b82 <__aeabi_dmul+0x24a>
   82d0c:	ea94 0f0c 	teq	r4, ip
   82d10:	d10a      	bne.n	82d28 <__aeabi_ddiv+0x19c>
   82d12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82d16:	f47f af34 	bne.w	82b82 <__aeabi_dmul+0x24a>
   82d1a:	ea95 0f0c 	teq	r5, ip
   82d1e:	f47f af25 	bne.w	82b6c <__aeabi_dmul+0x234>
   82d22:	4610      	mov	r0, r2
   82d24:	4619      	mov	r1, r3
   82d26:	e72c      	b.n	82b82 <__aeabi_dmul+0x24a>
   82d28:	ea95 0f0c 	teq	r5, ip
   82d2c:	d106      	bne.n	82d3c <__aeabi_ddiv+0x1b0>
   82d2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82d32:	f43f aefd 	beq.w	82b30 <__aeabi_dmul+0x1f8>
   82d36:	4610      	mov	r0, r2
   82d38:	4619      	mov	r1, r3
   82d3a:	e722      	b.n	82b82 <__aeabi_dmul+0x24a>
   82d3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82d40:	bf18      	it	ne
   82d42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82d46:	f47f aec5 	bne.w	82ad4 <__aeabi_dmul+0x19c>
   82d4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   82d4e:	f47f af0d 	bne.w	82b6c <__aeabi_dmul+0x234>
   82d52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   82d56:	f47f aeeb 	bne.w	82b30 <__aeabi_dmul+0x1f8>
   82d5a:	e712      	b.n	82b82 <__aeabi_dmul+0x24a>

00082d5c <__aeabi_d2f>:
   82d5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   82d60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   82d64:	bf24      	itt	cs
   82d66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   82d6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   82d6e:	d90d      	bls.n	82d8c <__aeabi_d2f+0x30>
   82d70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82d74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   82d78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   82d7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   82d80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   82d84:	bf08      	it	eq
   82d86:	f020 0001 	biceq.w	r0, r0, #1
   82d8a:	4770      	bx	lr
   82d8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   82d90:	d121      	bne.n	82dd6 <__aeabi_d2f+0x7a>
   82d92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   82d96:	bfbc      	itt	lt
   82d98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   82d9c:	4770      	bxlt	lr
   82d9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82da2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   82da6:	f1c2 0218 	rsb	r2, r2, #24
   82daa:	f1c2 0c20 	rsb	ip, r2, #32
   82dae:	fa10 f30c 	lsls.w	r3, r0, ip
   82db2:	fa20 f002 	lsr.w	r0, r0, r2
   82db6:	bf18      	it	ne
   82db8:	f040 0001 	orrne.w	r0, r0, #1
   82dbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   82dc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   82dc4:	fa03 fc0c 	lsl.w	ip, r3, ip
   82dc8:	ea40 000c 	orr.w	r0, r0, ip
   82dcc:	fa23 f302 	lsr.w	r3, r3, r2
   82dd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   82dd4:	e7cc      	b.n	82d70 <__aeabi_d2f+0x14>
   82dd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   82dda:	d107      	bne.n	82dec <__aeabi_d2f+0x90>
   82ddc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   82de0:	bf1e      	ittt	ne
   82de2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   82de6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   82dea:	4770      	bxne	lr
   82dec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   82df0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82df8:	4770      	bx	lr
   82dfa:	bf00      	nop

00082dfc <__aeabi_frsub>:
   82dfc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   82e00:	e002      	b.n	82e08 <__addsf3>
   82e02:	bf00      	nop

00082e04 <__aeabi_fsub>:
   82e04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00082e08 <__addsf3>:
   82e08:	0042      	lsls	r2, r0, #1
   82e0a:	bf1f      	itttt	ne
   82e0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   82e10:	ea92 0f03 	teqne	r2, r3
   82e14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   82e18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82e1c:	d06a      	beq.n	82ef4 <__addsf3+0xec>
   82e1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   82e22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   82e26:	bfc1      	itttt	gt
   82e28:	18d2      	addgt	r2, r2, r3
   82e2a:	4041      	eorgt	r1, r0
   82e2c:	4048      	eorgt	r0, r1
   82e2e:	4041      	eorgt	r1, r0
   82e30:	bfb8      	it	lt
   82e32:	425b      	neglt	r3, r3
   82e34:	2b19      	cmp	r3, #25
   82e36:	bf88      	it	hi
   82e38:	4770      	bxhi	lr
   82e3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   82e3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82e42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   82e46:	bf18      	it	ne
   82e48:	4240      	negne	r0, r0
   82e4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82e4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   82e52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   82e56:	bf18      	it	ne
   82e58:	4249      	negne	r1, r1
   82e5a:	ea92 0f03 	teq	r2, r3
   82e5e:	d03f      	beq.n	82ee0 <__addsf3+0xd8>
   82e60:	f1a2 0201 	sub.w	r2, r2, #1
   82e64:	fa41 fc03 	asr.w	ip, r1, r3
   82e68:	eb10 000c 	adds.w	r0, r0, ip
   82e6c:	f1c3 0320 	rsb	r3, r3, #32
   82e70:	fa01 f103 	lsl.w	r1, r1, r3
   82e74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82e78:	d502      	bpl.n	82e80 <__addsf3+0x78>
   82e7a:	4249      	negs	r1, r1
   82e7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   82e80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   82e84:	d313      	bcc.n	82eae <__addsf3+0xa6>
   82e86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   82e8a:	d306      	bcc.n	82e9a <__addsf3+0x92>
   82e8c:	0840      	lsrs	r0, r0, #1
   82e8e:	ea4f 0131 	mov.w	r1, r1, rrx
   82e92:	f102 0201 	add.w	r2, r2, #1
   82e96:	2afe      	cmp	r2, #254	; 0xfe
   82e98:	d251      	bcs.n	82f3e <__addsf3+0x136>
   82e9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   82e9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82ea2:	bf08      	it	eq
   82ea4:	f020 0001 	biceq.w	r0, r0, #1
   82ea8:	ea40 0003 	orr.w	r0, r0, r3
   82eac:	4770      	bx	lr
   82eae:	0049      	lsls	r1, r1, #1
   82eb0:	eb40 0000 	adc.w	r0, r0, r0
   82eb4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   82eb8:	f1a2 0201 	sub.w	r2, r2, #1
   82ebc:	d1ed      	bne.n	82e9a <__addsf3+0x92>
   82ebe:	fab0 fc80 	clz	ip, r0
   82ec2:	f1ac 0c08 	sub.w	ip, ip, #8
   82ec6:	ebb2 020c 	subs.w	r2, r2, ip
   82eca:	fa00 f00c 	lsl.w	r0, r0, ip
   82ece:	bfaa      	itet	ge
   82ed0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   82ed4:	4252      	neglt	r2, r2
   82ed6:	4318      	orrge	r0, r3
   82ed8:	bfbc      	itt	lt
   82eda:	40d0      	lsrlt	r0, r2
   82edc:	4318      	orrlt	r0, r3
   82ede:	4770      	bx	lr
   82ee0:	f092 0f00 	teq	r2, #0
   82ee4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   82ee8:	bf06      	itte	eq
   82eea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   82eee:	3201      	addeq	r2, #1
   82ef0:	3b01      	subne	r3, #1
   82ef2:	e7b5      	b.n	82e60 <__addsf3+0x58>
   82ef4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82efc:	bf18      	it	ne
   82efe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82f02:	d021      	beq.n	82f48 <__addsf3+0x140>
   82f04:	ea92 0f03 	teq	r2, r3
   82f08:	d004      	beq.n	82f14 <__addsf3+0x10c>
   82f0a:	f092 0f00 	teq	r2, #0
   82f0e:	bf08      	it	eq
   82f10:	4608      	moveq	r0, r1
   82f12:	4770      	bx	lr
   82f14:	ea90 0f01 	teq	r0, r1
   82f18:	bf1c      	itt	ne
   82f1a:	2000      	movne	r0, #0
   82f1c:	4770      	bxne	lr
   82f1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   82f22:	d104      	bne.n	82f2e <__addsf3+0x126>
   82f24:	0040      	lsls	r0, r0, #1
   82f26:	bf28      	it	cs
   82f28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   82f2c:	4770      	bx	lr
   82f2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   82f32:	bf3c      	itt	cc
   82f34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   82f38:	4770      	bxcc	lr
   82f3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82f3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   82f42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82f46:	4770      	bx	lr
   82f48:	ea7f 6222 	mvns.w	r2, r2, asr #24
   82f4c:	bf16      	itet	ne
   82f4e:	4608      	movne	r0, r1
   82f50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   82f54:	4601      	movne	r1, r0
   82f56:	0242      	lsls	r2, r0, #9
   82f58:	bf06      	itte	eq
   82f5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   82f5e:	ea90 0f01 	teqeq	r0, r1
   82f62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   82f66:	4770      	bx	lr

00082f68 <__aeabi_ui2f>:
   82f68:	f04f 0300 	mov.w	r3, #0
   82f6c:	e004      	b.n	82f78 <__aeabi_i2f+0x8>
   82f6e:	bf00      	nop

00082f70 <__aeabi_i2f>:
   82f70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   82f74:	bf48      	it	mi
   82f76:	4240      	negmi	r0, r0
   82f78:	ea5f 0c00 	movs.w	ip, r0
   82f7c:	bf08      	it	eq
   82f7e:	4770      	bxeq	lr
   82f80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   82f84:	4601      	mov	r1, r0
   82f86:	f04f 0000 	mov.w	r0, #0
   82f8a:	e01c      	b.n	82fc6 <__aeabi_l2f+0x2a>

00082f8c <__aeabi_ul2f>:
   82f8c:	ea50 0201 	orrs.w	r2, r0, r1
   82f90:	bf08      	it	eq
   82f92:	4770      	bxeq	lr
   82f94:	f04f 0300 	mov.w	r3, #0
   82f98:	e00a      	b.n	82fb0 <__aeabi_l2f+0x14>
   82f9a:	bf00      	nop

00082f9c <__aeabi_l2f>:
   82f9c:	ea50 0201 	orrs.w	r2, r0, r1
   82fa0:	bf08      	it	eq
   82fa2:	4770      	bxeq	lr
   82fa4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   82fa8:	d502      	bpl.n	82fb0 <__aeabi_l2f+0x14>
   82faa:	4240      	negs	r0, r0
   82fac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82fb0:	ea5f 0c01 	movs.w	ip, r1
   82fb4:	bf02      	ittt	eq
   82fb6:	4684      	moveq	ip, r0
   82fb8:	4601      	moveq	r1, r0
   82fba:	2000      	moveq	r0, #0
   82fbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   82fc0:	bf08      	it	eq
   82fc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   82fc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   82fca:	fabc f28c 	clz	r2, ip
   82fce:	3a08      	subs	r2, #8
   82fd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   82fd4:	db10      	blt.n	82ff8 <__aeabi_l2f+0x5c>
   82fd6:	fa01 fc02 	lsl.w	ip, r1, r2
   82fda:	4463      	add	r3, ip
   82fdc:	fa00 fc02 	lsl.w	ip, r0, r2
   82fe0:	f1c2 0220 	rsb	r2, r2, #32
   82fe4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82fe8:	fa20 f202 	lsr.w	r2, r0, r2
   82fec:	eb43 0002 	adc.w	r0, r3, r2
   82ff0:	bf08      	it	eq
   82ff2:	f020 0001 	biceq.w	r0, r0, #1
   82ff6:	4770      	bx	lr
   82ff8:	f102 0220 	add.w	r2, r2, #32
   82ffc:	fa01 fc02 	lsl.w	ip, r1, r2
   83000:	f1c2 0220 	rsb	r2, r2, #32
   83004:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   83008:	fa21 f202 	lsr.w	r2, r1, r2
   8300c:	eb43 0002 	adc.w	r0, r3, r2
   83010:	bf08      	it	eq
   83012:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   83016:	4770      	bx	lr

00083018 <__aeabi_f2uiz>:
   83018:	0042      	lsls	r2, r0, #1
   8301a:	d20e      	bcs.n	8303a <__aeabi_f2uiz+0x22>
   8301c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   83020:	d30b      	bcc.n	8303a <__aeabi_f2uiz+0x22>
   83022:	f04f 039e 	mov.w	r3, #158	; 0x9e
   83026:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   8302a:	d409      	bmi.n	83040 <__aeabi_f2uiz+0x28>
   8302c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   83030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83034:	fa23 f002 	lsr.w	r0, r3, r2
   83038:	4770      	bx	lr
   8303a:	f04f 0000 	mov.w	r0, #0
   8303e:	4770      	bx	lr
   83040:	f112 0f61 	cmn.w	r2, #97	; 0x61
   83044:	d101      	bne.n	8304a <__aeabi_f2uiz+0x32>
   83046:	0242      	lsls	r2, r0, #9
   83048:	d102      	bne.n	83050 <__aeabi_f2uiz+0x38>
   8304a:	f04f 30ff 	mov.w	r0, #4294967295
   8304e:	4770      	bx	lr
   83050:	f04f 0000 	mov.w	r0, #0
   83054:	4770      	bx	lr
   83056:	bf00      	nop

00083058 <atoi>:
   83058:	2100      	movs	r1, #0
   8305a:	220a      	movs	r2, #10
   8305c:	f000 b9c8 	b.w	833f0 <strtol>

00083060 <__libc_init_array>:
   83060:	b570      	push	{r4, r5, r6, lr}
   83062:	4e0f      	ldr	r6, [pc, #60]	; (830a0 <__libc_init_array+0x40>)
   83064:	4d0f      	ldr	r5, [pc, #60]	; (830a4 <__libc_init_array+0x44>)
   83066:	1b76      	subs	r6, r6, r5
   83068:	10b6      	asrs	r6, r6, #2
   8306a:	bf18      	it	ne
   8306c:	2400      	movne	r4, #0
   8306e:	d005      	beq.n	8307c <__libc_init_array+0x1c>
   83070:	3401      	adds	r4, #1
   83072:	f855 3b04 	ldr.w	r3, [r5], #4
   83076:	4798      	blx	r3
   83078:	42a6      	cmp	r6, r4
   8307a:	d1f9      	bne.n	83070 <__libc_init_array+0x10>
   8307c:	4e0a      	ldr	r6, [pc, #40]	; (830a8 <__libc_init_array+0x48>)
   8307e:	4d0b      	ldr	r5, [pc, #44]	; (830ac <__libc_init_array+0x4c>)
   83080:	f000 fb4a 	bl	83718 <_init>
   83084:	1b76      	subs	r6, r6, r5
   83086:	10b6      	asrs	r6, r6, #2
   83088:	bf18      	it	ne
   8308a:	2400      	movne	r4, #0
   8308c:	d006      	beq.n	8309c <__libc_init_array+0x3c>
   8308e:	3401      	adds	r4, #1
   83090:	f855 3b04 	ldr.w	r3, [r5], #4
   83094:	4798      	blx	r3
   83096:	42a6      	cmp	r6, r4
   83098:	d1f9      	bne.n	8308e <__libc_init_array+0x2e>
   8309a:	bd70      	pop	{r4, r5, r6, pc}
   8309c:	bd70      	pop	{r4, r5, r6, pc}
   8309e:	bf00      	nop
   830a0:	00083724 	.word	0x00083724
   830a4:	00083724 	.word	0x00083724
   830a8:	0008372c 	.word	0x0008372c
   830ac:	00083724 	.word	0x00083724

000830b0 <__itoa>:
   830b0:	1e93      	subs	r3, r2, #2
   830b2:	2b22      	cmp	r3, #34	; 0x22
   830b4:	d810      	bhi.n	830d8 <__itoa+0x28>
   830b6:	2a0a      	cmp	r2, #10
   830b8:	b510      	push	{r4, lr}
   830ba:	d006      	beq.n	830ca <__itoa+0x1a>
   830bc:	2300      	movs	r3, #0
   830be:	460c      	mov	r4, r1
   830c0:	4419      	add	r1, r3
   830c2:	f000 f9a1 	bl	83408 <__utoa>
   830c6:	4620      	mov	r0, r4
   830c8:	bd10      	pop	{r4, pc}
   830ca:	2800      	cmp	r0, #0
   830cc:	daf6      	bge.n	830bc <__itoa+0xc>
   830ce:	232d      	movs	r3, #45	; 0x2d
   830d0:	700b      	strb	r3, [r1, #0]
   830d2:	4240      	negs	r0, r0
   830d4:	2301      	movs	r3, #1
   830d6:	e7f2      	b.n	830be <__itoa+0xe>
   830d8:	2000      	movs	r0, #0
   830da:	7008      	strb	r0, [r1, #0]
   830dc:	4770      	bx	lr
   830de:	bf00      	nop

000830e0 <itoa>:
   830e0:	f7ff bfe6 	b.w	830b0 <__itoa>

000830e4 <memcpy>:
   830e4:	4684      	mov	ip, r0
   830e6:	ea41 0300 	orr.w	r3, r1, r0
   830ea:	f013 0303 	ands.w	r3, r3, #3
   830ee:	d149      	bne.n	83184 <memcpy+0xa0>
   830f0:	3a40      	subs	r2, #64	; 0x40
   830f2:	d323      	bcc.n	8313c <memcpy+0x58>
   830f4:	680b      	ldr	r3, [r1, #0]
   830f6:	6003      	str	r3, [r0, #0]
   830f8:	684b      	ldr	r3, [r1, #4]
   830fa:	6043      	str	r3, [r0, #4]
   830fc:	688b      	ldr	r3, [r1, #8]
   830fe:	6083      	str	r3, [r0, #8]
   83100:	68cb      	ldr	r3, [r1, #12]
   83102:	60c3      	str	r3, [r0, #12]
   83104:	690b      	ldr	r3, [r1, #16]
   83106:	6103      	str	r3, [r0, #16]
   83108:	694b      	ldr	r3, [r1, #20]
   8310a:	6143      	str	r3, [r0, #20]
   8310c:	698b      	ldr	r3, [r1, #24]
   8310e:	6183      	str	r3, [r0, #24]
   83110:	69cb      	ldr	r3, [r1, #28]
   83112:	61c3      	str	r3, [r0, #28]
   83114:	6a0b      	ldr	r3, [r1, #32]
   83116:	6203      	str	r3, [r0, #32]
   83118:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8311a:	6243      	str	r3, [r0, #36]	; 0x24
   8311c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8311e:	6283      	str	r3, [r0, #40]	; 0x28
   83120:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83122:	62c3      	str	r3, [r0, #44]	; 0x2c
   83124:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83126:	6303      	str	r3, [r0, #48]	; 0x30
   83128:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8312a:	6343      	str	r3, [r0, #52]	; 0x34
   8312c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8312e:	6383      	str	r3, [r0, #56]	; 0x38
   83130:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83132:	63c3      	str	r3, [r0, #60]	; 0x3c
   83134:	3040      	adds	r0, #64	; 0x40
   83136:	3140      	adds	r1, #64	; 0x40
   83138:	3a40      	subs	r2, #64	; 0x40
   8313a:	d2db      	bcs.n	830f4 <memcpy+0x10>
   8313c:	3230      	adds	r2, #48	; 0x30
   8313e:	d30b      	bcc.n	83158 <memcpy+0x74>
   83140:	680b      	ldr	r3, [r1, #0]
   83142:	6003      	str	r3, [r0, #0]
   83144:	684b      	ldr	r3, [r1, #4]
   83146:	6043      	str	r3, [r0, #4]
   83148:	688b      	ldr	r3, [r1, #8]
   8314a:	6083      	str	r3, [r0, #8]
   8314c:	68cb      	ldr	r3, [r1, #12]
   8314e:	60c3      	str	r3, [r0, #12]
   83150:	3010      	adds	r0, #16
   83152:	3110      	adds	r1, #16
   83154:	3a10      	subs	r2, #16
   83156:	d2f3      	bcs.n	83140 <memcpy+0x5c>
   83158:	320c      	adds	r2, #12
   8315a:	d305      	bcc.n	83168 <memcpy+0x84>
   8315c:	f851 3b04 	ldr.w	r3, [r1], #4
   83160:	f840 3b04 	str.w	r3, [r0], #4
   83164:	3a04      	subs	r2, #4
   83166:	d2f9      	bcs.n	8315c <memcpy+0x78>
   83168:	3204      	adds	r2, #4
   8316a:	d008      	beq.n	8317e <memcpy+0x9a>
   8316c:	07d2      	lsls	r2, r2, #31
   8316e:	bf1c      	itt	ne
   83170:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83174:	f800 3b01 	strbne.w	r3, [r0], #1
   83178:	d301      	bcc.n	8317e <memcpy+0x9a>
   8317a:	880b      	ldrh	r3, [r1, #0]
   8317c:	8003      	strh	r3, [r0, #0]
   8317e:	4660      	mov	r0, ip
   83180:	4770      	bx	lr
   83182:	bf00      	nop
   83184:	2a08      	cmp	r2, #8
   83186:	d313      	bcc.n	831b0 <memcpy+0xcc>
   83188:	078b      	lsls	r3, r1, #30
   8318a:	d0b1      	beq.n	830f0 <memcpy+0xc>
   8318c:	f010 0303 	ands.w	r3, r0, #3
   83190:	d0ae      	beq.n	830f0 <memcpy+0xc>
   83192:	f1c3 0304 	rsb	r3, r3, #4
   83196:	1ad2      	subs	r2, r2, r3
   83198:	07db      	lsls	r3, r3, #31
   8319a:	bf1c      	itt	ne
   8319c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   831a0:	f800 3b01 	strbne.w	r3, [r0], #1
   831a4:	d3a4      	bcc.n	830f0 <memcpy+0xc>
   831a6:	f831 3b02 	ldrh.w	r3, [r1], #2
   831aa:	f820 3b02 	strh.w	r3, [r0], #2
   831ae:	e79f      	b.n	830f0 <memcpy+0xc>
   831b0:	3a04      	subs	r2, #4
   831b2:	d3d9      	bcc.n	83168 <memcpy+0x84>
   831b4:	3a01      	subs	r2, #1
   831b6:	f811 3b01 	ldrb.w	r3, [r1], #1
   831ba:	f800 3b01 	strb.w	r3, [r0], #1
   831be:	d2f9      	bcs.n	831b4 <memcpy+0xd0>
   831c0:	780b      	ldrb	r3, [r1, #0]
   831c2:	7003      	strb	r3, [r0, #0]
   831c4:	784b      	ldrb	r3, [r1, #1]
   831c6:	7043      	strb	r3, [r0, #1]
   831c8:	788b      	ldrb	r3, [r1, #2]
   831ca:	7083      	strb	r3, [r0, #2]
   831cc:	4660      	mov	r0, ip
   831ce:	4770      	bx	lr

000831d0 <memset>:
   831d0:	b470      	push	{r4, r5, r6}
   831d2:	0784      	lsls	r4, r0, #30
   831d4:	d046      	beq.n	83264 <memset+0x94>
   831d6:	1e54      	subs	r4, r2, #1
   831d8:	2a00      	cmp	r2, #0
   831da:	d041      	beq.n	83260 <memset+0x90>
   831dc:	b2cd      	uxtb	r5, r1
   831de:	4603      	mov	r3, r0
   831e0:	e002      	b.n	831e8 <memset+0x18>
   831e2:	1e62      	subs	r2, r4, #1
   831e4:	b3e4      	cbz	r4, 83260 <memset+0x90>
   831e6:	4614      	mov	r4, r2
   831e8:	f803 5b01 	strb.w	r5, [r3], #1
   831ec:	079a      	lsls	r2, r3, #30
   831ee:	d1f8      	bne.n	831e2 <memset+0x12>
   831f0:	2c03      	cmp	r4, #3
   831f2:	d92e      	bls.n	83252 <memset+0x82>
   831f4:	b2cd      	uxtb	r5, r1
   831f6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   831fa:	2c0f      	cmp	r4, #15
   831fc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83200:	d919      	bls.n	83236 <memset+0x66>
   83202:	4626      	mov	r6, r4
   83204:	f103 0210 	add.w	r2, r3, #16
   83208:	3e10      	subs	r6, #16
   8320a:	2e0f      	cmp	r6, #15
   8320c:	f842 5c10 	str.w	r5, [r2, #-16]
   83210:	f842 5c0c 	str.w	r5, [r2, #-12]
   83214:	f842 5c08 	str.w	r5, [r2, #-8]
   83218:	f842 5c04 	str.w	r5, [r2, #-4]
   8321c:	f102 0210 	add.w	r2, r2, #16
   83220:	d8f2      	bhi.n	83208 <memset+0x38>
   83222:	f1a4 0210 	sub.w	r2, r4, #16
   83226:	f022 020f 	bic.w	r2, r2, #15
   8322a:	f004 040f 	and.w	r4, r4, #15
   8322e:	3210      	adds	r2, #16
   83230:	2c03      	cmp	r4, #3
   83232:	4413      	add	r3, r2
   83234:	d90d      	bls.n	83252 <memset+0x82>
   83236:	461e      	mov	r6, r3
   83238:	4622      	mov	r2, r4
   8323a:	3a04      	subs	r2, #4
   8323c:	2a03      	cmp	r2, #3
   8323e:	f846 5b04 	str.w	r5, [r6], #4
   83242:	d8fa      	bhi.n	8323a <memset+0x6a>
   83244:	1f22      	subs	r2, r4, #4
   83246:	f022 0203 	bic.w	r2, r2, #3
   8324a:	3204      	adds	r2, #4
   8324c:	4413      	add	r3, r2
   8324e:	f004 0403 	and.w	r4, r4, #3
   83252:	b12c      	cbz	r4, 83260 <memset+0x90>
   83254:	b2c9      	uxtb	r1, r1
   83256:	441c      	add	r4, r3
   83258:	f803 1b01 	strb.w	r1, [r3], #1
   8325c:	42a3      	cmp	r3, r4
   8325e:	d1fb      	bne.n	83258 <memset+0x88>
   83260:	bc70      	pop	{r4, r5, r6}
   83262:	4770      	bx	lr
   83264:	4614      	mov	r4, r2
   83266:	4603      	mov	r3, r0
   83268:	e7c2      	b.n	831f0 <memset+0x20>
   8326a:	bf00      	nop

0008326c <strncpy>:
   8326c:	ea40 0301 	orr.w	r3, r0, r1
   83270:	079b      	lsls	r3, r3, #30
   83272:	b470      	push	{r4, r5, r6}
   83274:	d12b      	bne.n	832ce <strncpy+0x62>
   83276:	2a03      	cmp	r2, #3
   83278:	d929      	bls.n	832ce <strncpy+0x62>
   8327a:	460c      	mov	r4, r1
   8327c:	4603      	mov	r3, r0
   8327e:	4621      	mov	r1, r4
   83280:	f854 6b04 	ldr.w	r6, [r4], #4
   83284:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   83288:	ea25 0506 	bic.w	r5, r5, r6
   8328c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   83290:	d105      	bne.n	8329e <strncpy+0x32>
   83292:	3a04      	subs	r2, #4
   83294:	2a03      	cmp	r2, #3
   83296:	f843 6b04 	str.w	r6, [r3], #4
   8329a:	4621      	mov	r1, r4
   8329c:	d8ef      	bhi.n	8327e <strncpy+0x12>
   8329e:	b1a2      	cbz	r2, 832ca <strncpy+0x5e>
   832a0:	780c      	ldrb	r4, [r1, #0]
   832a2:	3a01      	subs	r2, #1
   832a4:	701c      	strb	r4, [r3, #0]
   832a6:	3101      	adds	r1, #1
   832a8:	3301      	adds	r3, #1
   832aa:	b13c      	cbz	r4, 832bc <strncpy+0x50>
   832ac:	b16a      	cbz	r2, 832ca <strncpy+0x5e>
   832ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   832b2:	3a01      	subs	r2, #1
   832b4:	f803 4b01 	strb.w	r4, [r3], #1
   832b8:	2c00      	cmp	r4, #0
   832ba:	d1f7      	bne.n	832ac <strncpy+0x40>
   832bc:	b12a      	cbz	r2, 832ca <strncpy+0x5e>
   832be:	441a      	add	r2, r3
   832c0:	2100      	movs	r1, #0
   832c2:	f803 1b01 	strb.w	r1, [r3], #1
   832c6:	4293      	cmp	r3, r2
   832c8:	d1fb      	bne.n	832c2 <strncpy+0x56>
   832ca:	bc70      	pop	{r4, r5, r6}
   832cc:	4770      	bx	lr
   832ce:	4603      	mov	r3, r0
   832d0:	e7e5      	b.n	8329e <strncpy+0x32>
   832d2:	bf00      	nop

000832d4 <_strtol_r>:
   832d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   832d8:	4c44      	ldr	r4, [pc, #272]	; (833ec <_strtol_r+0x118>)
   832da:	4683      	mov	fp, r0
   832dc:	460e      	mov	r6, r1
   832de:	f8d4 e000 	ldr.w	lr, [r4]
   832e2:	e000      	b.n	832e6 <_strtol_r+0x12>
   832e4:	4626      	mov	r6, r4
   832e6:	4634      	mov	r4, r6
   832e8:	f814 5b01 	ldrb.w	r5, [r4], #1
   832ec:	eb0e 0005 	add.w	r0, lr, r5
   832f0:	7840      	ldrb	r0, [r0, #1]
   832f2:	f000 0008 	and.w	r0, r0, #8
   832f6:	f000 08ff 	and.w	r8, r0, #255	; 0xff
   832fa:	2800      	cmp	r0, #0
   832fc:	d1f2      	bne.n	832e4 <_strtol_r+0x10>
   832fe:	2d2d      	cmp	r5, #45	; 0x2d
   83300:	d04b      	beq.n	8339a <_strtol_r+0xc6>
   83302:	2d2b      	cmp	r5, #43	; 0x2b
   83304:	bf04      	itt	eq
   83306:	7875      	ldrbeq	r5, [r6, #1]
   83308:	1cb4      	addeq	r4, r6, #2
   8330a:	b11b      	cbz	r3, 83314 <_strtol_r+0x40>
   8330c:	2b10      	cmp	r3, #16
   8330e:	d060      	beq.n	833d2 <_strtol_r+0xfe>
   83310:	469a      	mov	sl, r3
   83312:	e003      	b.n	8331c <_strtol_r+0x48>
   83314:	2d30      	cmp	r5, #48	; 0x30
   83316:	d054      	beq.n	833c2 <_strtol_r+0xee>
   83318:	230a      	movs	r3, #10
   8331a:	469a      	mov	sl, r3
   8331c:	f1b8 0f00 	cmp.w	r8, #0
   83320:	bf14      	ite	ne
   83322:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   83326:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8332a:	fbb0 f9fa 	udiv	r9, r0, sl
   8332e:	2700      	movs	r7, #0
   83330:	46bc      	mov	ip, r7
   83332:	fb0a 0019 	mls	r0, sl, r9, r0
   83336:	e00c      	b.n	83352 <_strtol_r+0x7e>
   83338:	3d30      	subs	r5, #48	; 0x30
   8333a:	42ab      	cmp	r3, r5
   8333c:	dd19      	ble.n	83372 <_strtol_r+0x9e>
   8333e:	1c7e      	adds	r6, r7, #1
   83340:	d005      	beq.n	8334e <_strtol_r+0x7a>
   83342:	45cc      	cmp	ip, r9
   83344:	d824      	bhi.n	83390 <_strtol_r+0xbc>
   83346:	d021      	beq.n	8338c <_strtol_r+0xb8>
   83348:	fb0a 5c0c 	mla	ip, sl, ip, r5
   8334c:	2701      	movs	r7, #1
   8334e:	f814 5b01 	ldrb.w	r5, [r4], #1
   83352:	eb0e 0605 	add.w	r6, lr, r5
   83356:	7876      	ldrb	r6, [r6, #1]
   83358:	f016 0f04 	tst.w	r6, #4
   8335c:	d1ec      	bne.n	83338 <_strtol_r+0x64>
   8335e:	f016 0603 	ands.w	r6, r6, #3
   83362:	d006      	beq.n	83372 <_strtol_r+0x9e>
   83364:	2e01      	cmp	r6, #1
   83366:	bf0c      	ite	eq
   83368:	2637      	moveq	r6, #55	; 0x37
   8336a:	2657      	movne	r6, #87	; 0x57
   8336c:	1bad      	subs	r5, r5, r6
   8336e:	42ab      	cmp	r3, r5
   83370:	dce5      	bgt.n	8333e <_strtol_r+0x6a>
   83372:	1c7b      	adds	r3, r7, #1
   83374:	d016      	beq.n	833a4 <_strtol_r+0xd0>
   83376:	f1c8 0000 	rsb	r0, r8, #0
   8337a:	ea8c 0000 	eor.w	r0, ip, r0
   8337e:	4440      	add	r0, r8
   83380:	b14a      	cbz	r2, 83396 <_strtol_r+0xc2>
   83382:	b107      	cbz	r7, 83386 <_strtol_r+0xb2>
   83384:	1e61      	subs	r1, r4, #1
   83386:	6011      	str	r1, [r2, #0]
   83388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8338c:	4285      	cmp	r5, r0
   8338e:	dddb      	ble.n	83348 <_strtol_r+0x74>
   83390:	f04f 37ff 	mov.w	r7, #4294967295
   83394:	e7db      	b.n	8334e <_strtol_r+0x7a>
   83396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8339a:	1cb4      	adds	r4, r6, #2
   8339c:	7875      	ldrb	r5, [r6, #1]
   8339e:	f04f 0801 	mov.w	r8, #1
   833a2:	e7b2      	b.n	8330a <_strtol_r+0x36>
   833a4:	f1b8 0f00 	cmp.w	r8, #0
   833a8:	f04f 0322 	mov.w	r3, #34	; 0x22
   833ac:	bf14      	ite	ne
   833ae:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   833b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   833b6:	f8cb 3000 	str.w	r3, [fp]
   833ba:	2a00      	cmp	r2, #0
   833bc:	d1e2      	bne.n	83384 <_strtol_r+0xb0>
   833be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833c2:	7823      	ldrb	r3, [r4, #0]
   833c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   833c8:	2b58      	cmp	r3, #88	; 0x58
   833ca:	d009      	beq.n	833e0 <_strtol_r+0x10c>
   833cc:	2308      	movs	r3, #8
   833ce:	469a      	mov	sl, r3
   833d0:	e7a4      	b.n	8331c <_strtol_r+0x48>
   833d2:	2d30      	cmp	r5, #48	; 0x30
   833d4:	d19c      	bne.n	83310 <_strtol_r+0x3c>
   833d6:	7820      	ldrb	r0, [r4, #0]
   833d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   833dc:	2858      	cmp	r0, #88	; 0x58
   833de:	d197      	bne.n	83310 <_strtol_r+0x3c>
   833e0:	f04f 0a10 	mov.w	sl, #16
   833e4:	7865      	ldrb	r5, [r4, #1]
   833e6:	4653      	mov	r3, sl
   833e8:	3402      	adds	r4, #2
   833ea:	e797      	b.n	8331c <_strtol_r+0x48>
   833ec:	20070574 	.word	0x20070574

000833f0 <strtol>:
   833f0:	b430      	push	{r4, r5}
   833f2:	460d      	mov	r5, r1
   833f4:	4c03      	ldr	r4, [pc, #12]	; (83404 <strtol+0x14>)
   833f6:	4613      	mov	r3, r2
   833f8:	4601      	mov	r1, r0
   833fa:	462a      	mov	r2, r5
   833fc:	6820      	ldr	r0, [r4, #0]
   833fe:	bc30      	pop	{r4, r5}
   83400:	f7ff bf68 	b.w	832d4 <_strtol_r>
   83404:	20070570 	.word	0x20070570

00083408 <__utoa>:
   83408:	b5f0      	push	{r4, r5, r6, r7, lr}
   8340a:	b08b      	sub	sp, #44	; 0x2c
   8340c:	466f      	mov	r7, sp
   8340e:	4615      	mov	r5, r2
   83410:	f8df e070 	ldr.w	lr, [pc, #112]	; 83484 <__utoa+0x7c>
   83414:	4604      	mov	r4, r0
   83416:	460e      	mov	r6, r1
   83418:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   8341c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   8341e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   83422:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   83424:	e89e 0003 	ldmia.w	lr, {r0, r1}
   83428:	1eab      	subs	r3, r5, #2
   8342a:	f847 0b04 	str.w	r0, [r7], #4
   8342e:	2b22      	cmp	r3, #34	; 0x22
   83430:	7039      	strb	r1, [r7, #0]
   83432:	d822      	bhi.n	8347a <__utoa+0x72>
   83434:	1e71      	subs	r1, r6, #1
   83436:	4608      	mov	r0, r1
   83438:	2300      	movs	r3, #0
   8343a:	e000      	b.n	8343e <__utoa+0x36>
   8343c:	4613      	mov	r3, r2
   8343e:	fbb4 f2f5 	udiv	r2, r4, r5
   83442:	fb05 4412 	mls	r4, r5, r2, r4
   83446:	af0a      	add	r7, sp, #40	; 0x28
   83448:	443c      	add	r4, r7
   8344a:	f814 7c28 	ldrb.w	r7, [r4, #-40]
   8344e:	4614      	mov	r4, r2
   83450:	f800 7f01 	strb.w	r7, [r0, #1]!
   83454:	1c5a      	adds	r2, r3, #1
   83456:	2c00      	cmp	r4, #0
   83458:	d1f0      	bne.n	8343c <__utoa+0x34>
   8345a:	54b4      	strb	r4, [r6, r2]
   8345c:	18f2      	adds	r2, r6, r3
   8345e:	b14b      	cbz	r3, 83474 <__utoa+0x6c>
   83460:	3401      	adds	r4, #1
   83462:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   83466:	7817      	ldrb	r7, [r2, #0]
   83468:	1b18      	subs	r0, r3, r4
   8346a:	4284      	cmp	r4, r0
   8346c:	700f      	strb	r7, [r1, #0]
   8346e:	f802 5901 	strb.w	r5, [r2], #-1
   83472:	dbf5      	blt.n	83460 <__utoa+0x58>
   83474:	4630      	mov	r0, r6
   83476:	b00b      	add	sp, #44	; 0x2c
   83478:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8347a:	2000      	movs	r0, #0
   8347c:	7030      	strb	r0, [r6, #0]
   8347e:	b00b      	add	sp, #44	; 0x2c
   83480:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83482:	bf00      	nop
   83484:	000835ec 	.word	0x000835ec

00083488 <register_fini>:
   83488:	4b02      	ldr	r3, [pc, #8]	; (83494 <register_fini+0xc>)
   8348a:	b113      	cbz	r3, 83492 <register_fini+0xa>
   8348c:	4802      	ldr	r0, [pc, #8]	; (83498 <register_fini+0x10>)
   8348e:	f000 b805 	b.w	8349c <atexit>
   83492:	4770      	bx	lr
   83494:	00000000 	.word	0x00000000
   83498:	000834a9 	.word	0x000834a9

0008349c <atexit>:
   8349c:	4601      	mov	r1, r0
   8349e:	2000      	movs	r0, #0
   834a0:	4602      	mov	r2, r0
   834a2:	4603      	mov	r3, r0
   834a4:	f000 b816 	b.w	834d4 <__register_exitproc>

000834a8 <__libc_fini_array>:
   834a8:	b538      	push	{r3, r4, r5, lr}
   834aa:	4b08      	ldr	r3, [pc, #32]	; (834cc <__libc_fini_array+0x24>)
   834ac:	4d08      	ldr	r5, [pc, #32]	; (834d0 <__libc_fini_array+0x28>)
   834ae:	1aed      	subs	r5, r5, r3
   834b0:	10ac      	asrs	r4, r5, #2
   834b2:	bf18      	it	ne
   834b4:	18ed      	addne	r5, r5, r3
   834b6:	d005      	beq.n	834c4 <__libc_fini_array+0x1c>
   834b8:	3c01      	subs	r4, #1
   834ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   834be:	4798      	blx	r3
   834c0:	2c00      	cmp	r4, #0
   834c2:	d1f9      	bne.n	834b8 <__libc_fini_array+0x10>
   834c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   834c8:	f000 b930 	b.w	8372c <_fini>
   834cc:	00083738 	.word	0x00083738
   834d0:	0008373c 	.word	0x0008373c

000834d4 <__register_exitproc>:
   834d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   834d8:	4c25      	ldr	r4, [pc, #148]	; (83570 <__register_exitproc+0x9c>)
   834da:	4606      	mov	r6, r0
   834dc:	6825      	ldr	r5, [r4, #0]
   834de:	4688      	mov	r8, r1
   834e0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   834e4:	4692      	mov	sl, r2
   834e6:	4699      	mov	r9, r3
   834e8:	b3c4      	cbz	r4, 8355c <__register_exitproc+0x88>
   834ea:	6860      	ldr	r0, [r4, #4]
   834ec:	281f      	cmp	r0, #31
   834ee:	dc17      	bgt.n	83520 <__register_exitproc+0x4c>
   834f0:	1c41      	adds	r1, r0, #1
   834f2:	b176      	cbz	r6, 83512 <__register_exitproc+0x3e>
   834f4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   834f8:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   834fc:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   83500:	2201      	movs	r2, #1
   83502:	4082      	lsls	r2, r0
   83504:	4315      	orrs	r5, r2
   83506:	2e02      	cmp	r6, #2
   83508:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   8350c:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   83510:	d01e      	beq.n	83550 <__register_exitproc+0x7c>
   83512:	1c83      	adds	r3, r0, #2
   83514:	6061      	str	r1, [r4, #4]
   83516:	2000      	movs	r0, #0
   83518:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   8351c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83520:	4b14      	ldr	r3, [pc, #80]	; (83574 <__register_exitproc+0xa0>)
   83522:	b303      	cbz	r3, 83566 <__register_exitproc+0x92>
   83524:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83528:	f3af 8000 	nop.w
   8352c:	4604      	mov	r4, r0
   8352e:	b1d0      	cbz	r0, 83566 <__register_exitproc+0x92>
   83530:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   83534:	2700      	movs	r7, #0
   83536:	e884 0088 	stmia.w	r4, {r3, r7}
   8353a:	4638      	mov	r0, r7
   8353c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83540:	2101      	movs	r1, #1
   83542:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   83546:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8354a:	2e00      	cmp	r6, #0
   8354c:	d0e1      	beq.n	83512 <__register_exitproc+0x3e>
   8354e:	e7d1      	b.n	834f4 <__register_exitproc+0x20>
   83550:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83554:	431a      	orrs	r2, r3
   83556:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8355a:	e7da      	b.n	83512 <__register_exitproc+0x3e>
   8355c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   83560:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83564:	e7c1      	b.n	834ea <__register_exitproc+0x16>
   83566:	f04f 30ff 	mov.w	r0, #4294967295
   8356a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8356e:	bf00      	nop
   83570:	000835e8 	.word	0x000835e8
   83574:	00000000 	.word	0x00000000
   83578:	00000001 	.word	0x00000001
   8357c:	00000002 	.word	0x00000002
   83580:	00000004 	.word	0x00000004
   83584:	00000008 	.word	0x00000008
   83588:	00000010 	.word	0x00000010
   8358c:	00000020 	.word	0x00000020
   83590:	00000040 	.word	0x00000040
   83594:	00000080 	.word	0x00000080
   83598:	00000100 	.word	0x00000100
   8359c:	00000200 	.word	0x00000200
   835a0:	00000400 	.word	0x00000400
   835a4:	656c6449 	.word	0x656c6449
   835a8:	00000000 	.word	0x00000000
   835ac:	006d6f43 	.word	0x006d6f43
   835b0:	75676552 	.word	0x75676552
   835b4:	6574616c 	.word	0x6574616c
   835b8:	00000000 	.word	0x00000000
   835bc:	09097325 	.word	0x09097325
   835c0:	25096325 	.word	0x25096325
   835c4:	75250975 	.word	0x75250975
   835c8:	0d752509 	.word	0x0d752509
   835cc:	0000000a 	.word	0x0000000a
   835d0:	454c4449 	.word	0x454c4449
   835d4:	00000000 	.word	0x00000000
   835d8:	00000a0d 	.word	0x00000a0d
   835dc:	20726d54 	.word	0x20726d54
   835e0:	00637653 	.word	0x00637653
   835e4:	00000043 	.word	0x00000043

000835e8 <_global_impure_ptr>:
   835e8:	20070148 33323130 37363534 62613938     H.. 0123456789ab
   835f8:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
   83608:	76757473 7a797877 00000000              stuvwxyz....

00083614 <_ctype_>:
   83614:	20202000 20202020 28282020 20282828     .         ((((( 
   83624:	20202020 20202020 20202020 20202020                     
   83634:	10108820 10101010 10101010 10101010      ...............
   83644:	04040410 04040404 10040404 10101010     ................
   83654:	41411010 41414141 01010101 01010101     ..AAAAAA........
   83664:	01010101 01010101 01010101 10101010     ................
   83674:	42421010 42424242 02020202 02020202     ..BBBBBB........
   83684:	02020202 02020202 02020202 10101010     ................
   83694:	00000020 00000000 00000000 00000000      ...............
	...

00083718 <_init>:
   83718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8371a:	bf00      	nop
   8371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8371e:	bc08      	pop	{r3}
   83720:	469e      	mov	lr, r3
   83722:	4770      	bx	lr

00083724 <__init_array_start>:
   83724:	00083489 	.word	0x00083489

00083728 <__frame_dummy_init_array_entry>:
   83728:	00080119                                ....

0008372c <_fini>:
   8372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8372e:	bf00      	nop
   83730:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83732:	bc08      	pop	{r3}
   83734:	469e      	mov	lr, r3
   83736:	4770      	bx	lr

00083738 <__fini_array_start>:
   83738:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070144 	.word	0x20070144

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <p_adc_distance>:
2007012c:	20070594                                ... 

20070130 <sync>:
20070130:	00000001                                ....

20070134 <timer>:
20070134:	00000032                                2...

20070138 <uxCriticalNesting>:
20070138:	aaaaaaaa                                ....

2007013c <xFreeBytesRemaining>:
2007013c:	00008000                                ....

20070140 <xNextTaskUnblockTime>:
20070140:	0000ffff                                ....

20070144 <SystemCoreClock>:
20070144:	003d0900                                ..=.

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	000835e4 00000000 00000000 00000000     .5..............
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <_impure_ptr>:
20070570:	20070148                                H.. 

20070574 <__ctype_ptr__>:
20070574:	00083614                                .6..
