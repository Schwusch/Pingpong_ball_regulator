
examinationsprojekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065cc  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000865cc  000865cc  0000e5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a08  20070000  000865d4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00008434  20070a08  00086fe0  00010a08  2**3
                  ALLOC
  4 .stack        00002004  20078e3c  0008f414  00010a08  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010a08  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010a31  2**0
                  CONTENTS, READONLY
  7 .debug_info   00018492  00000000  00000000  00010a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000422a  00000000  00000000  00028f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009044  00000000  00000000  0002d148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000010a0  00000000  00000000  0003618c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f70  00000000  00000000  0003722c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d0df  00000000  00000000  0003819c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018d03  00000000  00000000  0005527b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006a909  00000000  00000000  0006df7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000340c  00000000  00000000  000d8888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ae40 	.word	0x2007ae40
   80004:	000828c5 	.word	0x000828c5
   80008:	000828c1 	.word	0x000828c1
   8000c:	000828c1 	.word	0x000828c1
   80010:	000828c1 	.word	0x000828c1
   80014:	000828c1 	.word	0x000828c1
   80018:	000828c1 	.word	0x000828c1
	...
   8002c:	00080eb1 	.word	0x00080eb1
   80030:	000828c1 	.word	0x000828c1
   80034:	00000000 	.word	0x00000000
   80038:	00080f2d 	.word	0x00080f2d
   8003c:	00080f69 	.word	0x00080f69
   80040:	000828c1 	.word	0x000828c1
   80044:	000828c1 	.word	0x000828c1
   80048:	000828c1 	.word	0x000828c1
   8004c:	000828c1 	.word	0x000828c1
   80050:	000828c1 	.word	0x000828c1
   80054:	000828c1 	.word	0x000828c1
   80058:	000828c1 	.word	0x000828c1
   8005c:	000828c1 	.word	0x000828c1
   80060:	000828c1 	.word	0x000828c1
   80064:	000828c1 	.word	0x000828c1
   80068:	00000000 	.word	0x00000000
   8006c:	00082731 	.word	0x00082731
   80070:	00082745 	.word	0x00082745
   80074:	00082759 	.word	0x00082759
   80078:	0008276d 	.word	0x0008276d
	...
   80084:	0008021d 	.word	0x0008021d
   80088:	000828c1 	.word	0x000828c1
   8008c:	000828c1 	.word	0x000828c1
   80090:	000828c1 	.word	0x000828c1
   80094:	000828c1 	.word	0x000828c1
   80098:	000828c1 	.word	0x000828c1
   8009c:	000828c1 	.word	0x000828c1
   800a0:	000828c1 	.word	0x000828c1
   800a4:	00000000 	.word	0x00000000
   800a8:	000828c1 	.word	0x000828c1
   800ac:	000828c1 	.word	0x000828c1
   800b0:	000828c1 	.word	0x000828c1
   800b4:	000828c1 	.word	0x000828c1
   800b8:	000828c1 	.word	0x000828c1
   800bc:	000828c1 	.word	0x000828c1
   800c0:	000828c1 	.word	0x000828c1
   800c4:	000828c1 	.word	0x000828c1
   800c8:	000828c1 	.word	0x000828c1
   800cc:	000828c1 	.word	0x000828c1
   800d0:	000828c1 	.word	0x000828c1
   800d4:	000828c1 	.word	0x000828c1
   800d8:	000828c1 	.word	0x000828c1
   800dc:	000828c1 	.word	0x000828c1
   800e0:	000828c1 	.word	0x000828c1
   800e4:	000828c1 	.word	0x000828c1
   800e8:	000828c1 	.word	0x000828c1
   800ec:	000828c1 	.word	0x000828c1
   800f0:	000828c1 	.word	0x000828c1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a08 	.word	0x20070a08
   80110:	00000000 	.word	0x00000000
   80114:	000865d4 	.word	0x000865d4

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	000865d4 	.word	0x000865d4
   80144:	20070a0c 	.word	0x20070a0c
   80148:	000865d4 	.word	0x000865d4
   8014c:	00000000 	.word	0x00000000

00080150 <adc_config>:

#include <asf.h>
#include "adc_func.h"

void adc_config(void)
{
   80150:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80152:	2025      	movs	r0, #37	; 0x25
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <adc_config+0x40>)
   80156:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);
   80158:	4c0e      	ldr	r4, [pc, #56]	; (80194 <adc_config+0x44>)
   8015a:	4620      	mov	r0, r4
   8015c:	490e      	ldr	r1, [pc, #56]	; (80198 <adc_config+0x48>)
   8015e:	4a0f      	ldr	r2, [pc, #60]	; (8019c <adc_config+0x4c>)
   80160:	2300      	movs	r3, #0
   80162:	4d0f      	ldr	r5, [pc, #60]	; (801a0 <adc_config+0x50>)
   80164:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   80166:	4620      	mov	r0, r4
   80168:	2100      	movs	r1, #0
   8016a:	460a      	mov	r2, r1
   8016c:	460b      	mov	r3, r1
   8016e:	4d0d      	ldr	r5, [pc, #52]	; (801a4 <adc_config+0x54>)
   80170:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES);
   80172:	4620      	mov	r0, r4
   80174:	2110      	movs	r1, #16
   80176:	4b0c      	ldr	r3, [pc, #48]	; (801a8 <adc_config+0x58>)
   80178:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);
   8017a:	4620      	mov	r0, r4
   8017c:	210a      	movs	r1, #10
   8017e:	4b0b      	ldr	r3, [pc, #44]	; (801ac <adc_config+0x5c>)
   80180:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   80182:	4620      	mov	r0, r4
   80184:	2100      	movs	r1, #0
   80186:	460a      	mov	r2, r1
   80188:	4b09      	ldr	r3, [pc, #36]	; (801b0 <adc_config+0x60>)
   8018a:	4798      	blx	r3
   8018c:	bd38      	pop	{r3, r4, r5, pc}
   8018e:	bf00      	nop
   80190:	0008286d 	.word	0x0008286d
   80194:	400c0000 	.word	0x400c0000
   80198:	0a037a00 	.word	0x0a037a00
   8019c:	01312d00 	.word	0x01312d00
   801a0:	00080621 	.word	0x00080621
   801a4:	00080675 	.word	0x00080675
   801a8:	00080655 	.word	0x00080655
   801ac:	0008069d 	.word	0x0008069d
   801b0:	00080665 	.word	0x00080665

000801b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   801b4:	b9a8      	cbnz	r0, 801e2 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801ba:	460c      	mov	r4, r1
   801bc:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801be:	2a00      	cmp	r2, #0
   801c0:	dd0a      	ble.n	801d8 <_read+0x24>
   801c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801c4:	4e08      	ldr	r6, [pc, #32]	; (801e8 <_read+0x34>)
   801c6:	4d09      	ldr	r5, [pc, #36]	; (801ec <_read+0x38>)
   801c8:	6830      	ldr	r0, [r6, #0]
   801ca:	4621      	mov	r1, r4
   801cc:	682b      	ldr	r3, [r5, #0]
   801ce:	4798      	blx	r3
		ptr++;
   801d0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801d2:	42bc      	cmp	r4, r7
   801d4:	d1f8      	bne.n	801c8 <_read+0x14>
   801d6:	e001      	b.n	801dc <_read+0x28>
   801d8:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   801dc:	4640      	mov	r0, r8
   801de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   801e2:	f04f 30ff 	mov.w	r0, #4294967295
   801e6:	4770      	bx	lr
   801e8:	20078e18 	.word	0x20078e18
   801ec:	20078e10 	.word	0x20078e10

000801f0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   801f0:	6943      	ldr	r3, [r0, #20]
   801f2:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   801f6:	bf1d      	ittte	ne
   801f8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   801fc:	61c1      	strne	r1, [r0, #28]
	return 0;
   801fe:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80200:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80202:	4770      	bx	lr

00080204 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80204:	6943      	ldr	r3, [r0, #20]
   80206:	f013 0f01 	tst.w	r3, #1
   8020a:	d005      	beq.n	80218 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8020c:	6983      	ldr	r3, [r0, #24]
   8020e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80212:	600b      	str	r3, [r1, #0]

	return 0;
   80214:	2000      	movs	r0, #0
   80216:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80218:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8021a:	4770      	bx	lr

0008021c <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   8021c:	b500      	push	{lr}
   8021e:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80220:	4811      	ldr	r0, [pc, #68]	; (80268 <USART0_Handler+0x4c>)
   80222:	f10d 0107 	add.w	r1, sp, #7
   80226:	2201      	movs	r2, #1
   80228:	4b10      	ldr	r3, [pc, #64]	; (8026c <USART0_Handler+0x50>)
   8022a:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8022c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8022e:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80232:	2200      	movs	r2, #0
   80234:	4b0e      	ldr	r3, [pc, #56]	; (80270 <USART0_Handler+0x54>)
   80236:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80238:	4b0e      	ldr	r3, [pc, #56]	; (80274 <USART0_Handler+0x58>)
   8023a:	781b      	ldrb	r3, [r3, #0]
   8023c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80240:	4a0d      	ldr	r2, [pc, #52]	; (80278 <USART0_Handler+0x5c>)
   80242:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80244:	2b9b      	cmp	r3, #155	; 0x9b
   80246:	d103      	bne.n	80250 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80248:	2200      	movs	r2, #0
   8024a:	4b0a      	ldr	r3, [pc, #40]	; (80274 <USART0_Handler+0x58>)
   8024c:	701a      	strb	r2, [r3, #0]
   8024e:	e002      	b.n	80256 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   80250:	3301      	adds	r3, #1
   80252:	4a08      	ldr	r2, [pc, #32]	; (80274 <USART0_Handler+0x58>)
   80254:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80256:	2201      	movs	r2, #1
   80258:	4b05      	ldr	r3, [pc, #20]	; (80270 <USART0_Handler+0x54>)
   8025a:	701a      	strb	r2, [r3, #0]
   8025c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80260:	b662      	cpsie	i
}
   80262:	b003      	add	sp, #12
   80264:	f85d fb04 	ldr.w	pc, [sp], #4
   80268:	40098000 	.word	0x40098000
   8026c:	0008055d 	.word	0x0008055d
   80270:	20070196 	.word	0x20070196
   80274:	20070ac0 	.word	0x20070ac0
   80278:	20070a24 	.word	0x20070a24

0008027c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8027c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8027e:	b083      	sub	sp, #12
   80280:	4604      	mov	r4, r0
   80282:	460d      	mov	r5, r1
	uint32_t val = 0;
   80284:	2300      	movs	r3, #0
   80286:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80288:	4b1f      	ldr	r3, [pc, #124]	; (80308 <usart_serial_getchar+0x8c>)
   8028a:	4298      	cmp	r0, r3
   8028c:	d107      	bne.n	8029e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8028e:	461f      	mov	r7, r3
   80290:	4e1e      	ldr	r6, [pc, #120]	; (8030c <usart_serial_getchar+0x90>)
   80292:	4638      	mov	r0, r7
   80294:	4629      	mov	r1, r5
   80296:	47b0      	blx	r6
   80298:	2800      	cmp	r0, #0
   8029a:	d1fa      	bne.n	80292 <usart_serial_getchar+0x16>
   8029c:	e019      	b.n	802d2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8029e:	4b1c      	ldr	r3, [pc, #112]	; (80310 <usart_serial_getchar+0x94>)
   802a0:	4298      	cmp	r0, r3
   802a2:	d109      	bne.n	802b8 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   802a4:	461f      	mov	r7, r3
   802a6:	4e1b      	ldr	r6, [pc, #108]	; (80314 <usart_serial_getchar+0x98>)
   802a8:	4638      	mov	r0, r7
   802aa:	a901      	add	r1, sp, #4
   802ac:	47b0      	blx	r6
   802ae:	2800      	cmp	r0, #0
   802b0:	d1fa      	bne.n	802a8 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   802b2:	9b01      	ldr	r3, [sp, #4]
   802b4:	702b      	strb	r3, [r5, #0]
   802b6:	e019      	b.n	802ec <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   802b8:	4b17      	ldr	r3, [pc, #92]	; (80318 <usart_serial_getchar+0x9c>)
   802ba:	4298      	cmp	r0, r3
   802bc:	d109      	bne.n	802d2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   802be:	461e      	mov	r6, r3
   802c0:	4c14      	ldr	r4, [pc, #80]	; (80314 <usart_serial_getchar+0x98>)
   802c2:	4630      	mov	r0, r6
   802c4:	a901      	add	r1, sp, #4
   802c6:	47a0      	blx	r4
   802c8:	2800      	cmp	r0, #0
   802ca:	d1fa      	bne.n	802c2 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   802cc:	9b01      	ldr	r3, [sp, #4]
   802ce:	702b      	strb	r3, [r5, #0]
   802d0:	e018      	b.n	80304 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   802d2:	4b12      	ldr	r3, [pc, #72]	; (8031c <usart_serial_getchar+0xa0>)
   802d4:	429c      	cmp	r4, r3
   802d6:	d109      	bne.n	802ec <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   802d8:	461e      	mov	r6, r3
   802da:	4c0e      	ldr	r4, [pc, #56]	; (80314 <usart_serial_getchar+0x98>)
   802dc:	4630      	mov	r0, r6
   802de:	a901      	add	r1, sp, #4
   802e0:	47a0      	blx	r4
   802e2:	2800      	cmp	r0, #0
   802e4:	d1fa      	bne.n	802dc <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   802e6:	9b01      	ldr	r3, [sp, #4]
   802e8:	702b      	strb	r3, [r5, #0]
   802ea:	e00b      	b.n	80304 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   802ec:	4b0c      	ldr	r3, [pc, #48]	; (80320 <usart_serial_getchar+0xa4>)
   802ee:	429c      	cmp	r4, r3
   802f0:	d108      	bne.n	80304 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   802f2:	461e      	mov	r6, r3
   802f4:	4c07      	ldr	r4, [pc, #28]	; (80314 <usart_serial_getchar+0x98>)
   802f6:	4630      	mov	r0, r6
   802f8:	a901      	add	r1, sp, #4
   802fa:	47a0      	blx	r4
   802fc:	2800      	cmp	r0, #0
   802fe:	d1fa      	bne.n	802f6 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80300:	9b01      	ldr	r3, [sp, #4]
   80302:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80304:	b003      	add	sp, #12
   80306:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80308:	400e0800 	.word	0x400e0800
   8030c:	00080dc5 	.word	0x00080dc5
   80310:	40098000 	.word	0x40098000
   80314:	00080205 	.word	0x00080205
   80318:	4009c000 	.word	0x4009c000
   8031c:	400a0000 	.word	0x400a0000
   80320:	400a4000 	.word	0x400a4000

00080324 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80324:	b570      	push	{r4, r5, r6, lr}
   80326:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80328:	4b1e      	ldr	r3, [pc, #120]	; (803a4 <usart_serial_putchar+0x80>)
   8032a:	4298      	cmp	r0, r3
   8032c:	d108      	bne.n	80340 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   8032e:	461e      	mov	r6, r3
   80330:	4d1d      	ldr	r5, [pc, #116]	; (803a8 <usart_serial_putchar+0x84>)
   80332:	4630      	mov	r0, r6
   80334:	4621      	mov	r1, r4
   80336:	47a8      	blx	r5
   80338:	2800      	cmp	r0, #0
   8033a:	d1fa      	bne.n	80332 <usart_serial_putchar+0xe>
		return 1;
   8033c:	2001      	movs	r0, #1
   8033e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80340:	4b1a      	ldr	r3, [pc, #104]	; (803ac <usart_serial_putchar+0x88>)
   80342:	4298      	cmp	r0, r3
   80344:	d108      	bne.n	80358 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   80346:	461e      	mov	r6, r3
   80348:	4d19      	ldr	r5, [pc, #100]	; (803b0 <usart_serial_putchar+0x8c>)
   8034a:	4630      	mov	r0, r6
   8034c:	4621      	mov	r1, r4
   8034e:	47a8      	blx	r5
   80350:	2800      	cmp	r0, #0
   80352:	d1fa      	bne.n	8034a <usart_serial_putchar+0x26>
		return 1;
   80354:	2001      	movs	r0, #1
   80356:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80358:	4b16      	ldr	r3, [pc, #88]	; (803b4 <usart_serial_putchar+0x90>)
   8035a:	4298      	cmp	r0, r3
   8035c:	d108      	bne.n	80370 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   8035e:	461e      	mov	r6, r3
   80360:	4d13      	ldr	r5, [pc, #76]	; (803b0 <usart_serial_putchar+0x8c>)
   80362:	4630      	mov	r0, r6
   80364:	4621      	mov	r1, r4
   80366:	47a8      	blx	r5
   80368:	2800      	cmp	r0, #0
   8036a:	d1fa      	bne.n	80362 <usart_serial_putchar+0x3e>
		return 1;
   8036c:	2001      	movs	r0, #1
   8036e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80370:	4b11      	ldr	r3, [pc, #68]	; (803b8 <usart_serial_putchar+0x94>)
   80372:	4298      	cmp	r0, r3
   80374:	d108      	bne.n	80388 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80376:	461e      	mov	r6, r3
   80378:	4d0d      	ldr	r5, [pc, #52]	; (803b0 <usart_serial_putchar+0x8c>)
   8037a:	4630      	mov	r0, r6
   8037c:	4621      	mov	r1, r4
   8037e:	47a8      	blx	r5
   80380:	2800      	cmp	r0, #0
   80382:	d1fa      	bne.n	8037a <usart_serial_putchar+0x56>
		return 1;
   80384:	2001      	movs	r0, #1
   80386:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80388:	4b0c      	ldr	r3, [pc, #48]	; (803bc <usart_serial_putchar+0x98>)
   8038a:	4298      	cmp	r0, r3
   8038c:	d108      	bne.n	803a0 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   8038e:	461e      	mov	r6, r3
   80390:	4d07      	ldr	r5, [pc, #28]	; (803b0 <usart_serial_putchar+0x8c>)
   80392:	4630      	mov	r0, r6
   80394:	4621      	mov	r1, r4
   80396:	47a8      	blx	r5
   80398:	2800      	cmp	r0, #0
   8039a:	d1fa      	bne.n	80392 <usart_serial_putchar+0x6e>
		return 1;
   8039c:	2001      	movs	r0, #1
   8039e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   803a0:	2000      	movs	r0, #0
}
   803a2:	bd70      	pop	{r4, r5, r6, pc}
   803a4:	400e0800 	.word	0x400e0800
   803a8:	00080db5 	.word	0x00080db5
   803ac:	40098000 	.word	0x40098000
   803b0:	000801f1 	.word	0x000801f1
   803b4:	4009c000 	.word	0x4009c000
   803b8:	400a0000 	.word	0x400a0000
   803bc:	400a4000 	.word	0x400a4000

000803c0 <matlab_recieve_values>:
#include <asf.h>
#include "sync.h"
#include "uart_recieve_values.h"

void matlab_recieve_values(void)
{
   803c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   803c2:	b085      	sub	sp, #20
	/* Buffer for receiving a string */
	uint8_t buffer[BUF_LEN] = {0};
   803c4:	2300      	movs	r3, #0
   803c6:	9300      	str	r3, [sp, #0]
   803c8:	9301      	str	r3, [sp, #4]
   803ca:	9302      	str	r3, [sp, #8]
   803cc:	9303      	str	r3, [sp, #12]
   803ce:	4c23      	ldr	r4, [pc, #140]	; (8045c <matlab_recieve_values+0x9c>)
   803d0:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
	
	/* Receive the conversion array */
	for (int i = 0; i < CONV_ARR_LENGTH; i++)
	{
		gets(buffer);
   803d4:	4e22      	ldr	r6, [pc, #136]	; (80460 <matlab_recieve_values+0xa0>)
		adc_to_mm[i] = atoi(buffer);
   803d6:	4d23      	ldr	r5, [pc, #140]	; (80464 <matlab_recieve_values+0xa4>)
	uint8_t buffer[BUF_LEN] = {0};
	
	/* Receive the conversion array */
	for (int i = 0; i < CONV_ARR_LENGTH; i++)
	{
		gets(buffer);
   803d8:	4668      	mov	r0, sp
   803da:	47b0      	blx	r6
		adc_to_mm[i] = atoi(buffer);
   803dc:	4668      	mov	r0, sp
   803de:	47a8      	blx	r5
   803e0:	f824 0f02 	strh.w	r0, [r4, #2]!
{
	/* Buffer for receiving a string */
	uint8_t buffer[BUF_LEN] = {0};
	
	/* Receive the conversion array */
	for (int i = 0; i < CONV_ARR_LENGTH; i++)
   803e4:	42bc      	cmp	r4, r7
   803e6:	d1f7      	bne.n	803d8 <matlab_recieve_values+0x18>
	{
		gets(buffer);
		adc_to_mm[i] = atoi(buffer);
	}		
	gets(buffer);
   803e8:	4668      	mov	r0, sp
   803ea:	4d1d      	ldr	r5, [pc, #116]	; (80460 <matlab_recieve_values+0xa0>)
   803ec:	47a8      	blx	r5
	prop_gain = (float)atoi(buffer) / 1000;	
   803ee:	4668      	mov	r0, sp
   803f0:	4c1c      	ldr	r4, [pc, #112]	; (80464 <matlab_recieve_values+0xa4>)
   803f2:	47a0      	blx	r4
   803f4:	4f1c      	ldr	r7, [pc, #112]	; (80468 <matlab_recieve_values+0xa8>)
   803f6:	47b8      	blx	r7
   803f8:	4e1c      	ldr	r6, [pc, #112]	; (8046c <matlab_recieve_values+0xac>)
   803fa:	491d      	ldr	r1, [pc, #116]	; (80470 <matlab_recieve_values+0xb0>)
   803fc:	47b0      	blx	r6
   803fe:	4b1d      	ldr	r3, [pc, #116]	; (80474 <matlab_recieve_values+0xb4>)
   80400:	6018      	str	r0, [r3, #0]
	gets(buffer);
   80402:	4668      	mov	r0, sp
   80404:	47a8      	blx	r5
	int_gain = (float)atoi(buffer) / 1000;	
   80406:	4668      	mov	r0, sp
   80408:	47a0      	blx	r4
   8040a:	47b8      	blx	r7
   8040c:	4918      	ldr	r1, [pc, #96]	; (80470 <matlab_recieve_values+0xb0>)
   8040e:	47b0      	blx	r6
   80410:	4b19      	ldr	r3, [pc, #100]	; (80478 <matlab_recieve_values+0xb8>)
   80412:	6018      	str	r0, [r3, #0]
	gets(buffer);
   80414:	4668      	mov	r0, sp
   80416:	47a8      	blx	r5
	der_gain = (float)atoi(buffer) / 1000;	
   80418:	4668      	mov	r0, sp
   8041a:	47a0      	blx	r4
   8041c:	47b8      	blx	r7
   8041e:	4914      	ldr	r1, [pc, #80]	; (80470 <matlab_recieve_values+0xb0>)
   80420:	47b0      	blx	r6
   80422:	4b16      	ldr	r3, [pc, #88]	; (8047c <matlab_recieve_values+0xbc>)
   80424:	6018      	str	r0, [r3, #0]
	gets(buffer);
   80426:	4668      	mov	r0, sp
   80428:	47a8      	blx	r5
	set_point = atoi(buffer);	
   8042a:	4668      	mov	r0, sp
   8042c:	47a0      	blx	r4
   8042e:	4b14      	ldr	r3, [pc, #80]	; (80480 <matlab_recieve_values+0xc0>)
   80430:	8018      	strh	r0, [r3, #0]
	gets(buffer);
   80432:	4668      	mov	r0, sp
   80434:	47a8      	blx	r5
	offset = atoi(buffer);	
   80436:	4668      	mov	r0, sp
   80438:	47a0      	blx	r4
   8043a:	4b12      	ldr	r3, [pc, #72]	; (80484 <matlab_recieve_values+0xc4>)
   8043c:	6018      	str	r0, [r3, #0]
	gets(buffer);
   8043e:	4668      	mov	r0, sp
   80440:	47a8      	blx	r5
	antiwindup = atoi(buffer);	
   80442:	4668      	mov	r0, sp
   80444:	47a0      	blx	r4
   80446:	4b10      	ldr	r3, [pc, #64]	; (80488 <matlab_recieve_values+0xc8>)
   80448:	6018      	str	r0, [r3, #0]
	gets(buffer);
   8044a:	4668      	mov	r0, sp
   8044c:	47a8      	blx	r5
	timer = atoi(buffer);	
   8044e:	4668      	mov	r0, sp
   80450:	47a0      	blx	r4
   80452:	4b0e      	ldr	r3, [pc, #56]	; (8048c <matlab_recieve_values+0xcc>)
   80454:	8018      	strh	r0, [r3, #0]
}
   80456:	b005      	add	sp, #20
   80458:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8045a:	bf00      	nop
   8045c:	20070ac6 	.word	0x20070ac6
   80460:	0008303d 	.word	0x0008303d
   80464:	00082fe9 	.word	0x00082fe9
   80468:	00082c55 	.word	0x00082c55
   8046c:	00082e65 	.word	0x00082e65
   80470:	447a0000 	.word	0x447a0000
   80474:	20078e30 	.word	0x20078e30
   80478:	20078e1c 	.word	0x20078e1c
   8047c:	20078e24 	.word	0x20078e24
   80480:	20078e28 	.word	0x20078e28
   80484:	20078e34 	.word	0x20078e34
   80488:	20078e2c 	.word	0x20078e2c
   8048c:	20078e20 	.word	0x20078e20

00080490 <configure_console>:

void configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   80490:	b530      	push	{r4, r5, lr}
   80492:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80494:	2008      	movs	r0, #8
   80496:	4d12      	ldr	r5, [pc, #72]	; (804e0 <configure_console+0x50>)
   80498:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8049a:	4c12      	ldr	r4, [pc, #72]	; (804e4 <configure_console+0x54>)
   8049c:	4b12      	ldr	r3, [pc, #72]	; (804e8 <configure_console+0x58>)
   8049e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   804a0:	4a12      	ldr	r2, [pc, #72]	; (804ec <configure_console+0x5c>)
   804a2:	4b13      	ldr	r3, [pc, #76]	; (804f0 <configure_console+0x60>)
   804a4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   804a6:	4a13      	ldr	r2, [pc, #76]	; (804f4 <configure_console+0x64>)
   804a8:	4b13      	ldr	r3, [pc, #76]	; (804f8 <configure_console+0x68>)
   804aa:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   804ac:	4b13      	ldr	r3, [pc, #76]	; (804fc <configure_console+0x6c>)
   804ae:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   804b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   804b4:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   804b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   804ba:	9303      	str	r3, [sp, #12]
   804bc:	2008      	movs	r0, #8
   804be:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   804c0:	4620      	mov	r0, r4
   804c2:	a901      	add	r1, sp, #4
   804c4:	4b0e      	ldr	r3, [pc, #56]	; (80500 <configure_console+0x70>)
   804c6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   804c8:	4d0e      	ldr	r5, [pc, #56]	; (80504 <configure_console+0x74>)
   804ca:	682b      	ldr	r3, [r5, #0]
   804cc:	6898      	ldr	r0, [r3, #8]
   804ce:	2100      	movs	r1, #0
   804d0:	4c0d      	ldr	r4, [pc, #52]	; (80508 <configure_console+0x78>)
   804d2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   804d4:	682b      	ldr	r3, [r5, #0]
   804d6:	6858      	ldr	r0, [r3, #4]
   804d8:	2100      	movs	r1, #0
   804da:	47a0      	blx	r4
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}
   804dc:	b005      	add	sp, #20
   804de:	bd30      	pop	{r4, r5, pc}
   804e0:	0008286d 	.word	0x0008286d
   804e4:	400e0800 	.word	0x400e0800
   804e8:	20078e18 	.word	0x20078e18
   804ec:	00080325 	.word	0x00080325
   804f0:	20078e14 	.word	0x20078e14
   804f4:	0008027d 	.word	0x0008027d
   804f8:	20078e10 	.word	0x20078e10
   804fc:	0501bd00 	.word	0x0501bd00
   80500:	00080d7d 	.word	0x00080d7d
   80504:	200705c8 	.word	0x200705c8
   80508:	000832b5 	.word	0x000832b5

0008050c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8050c:	3801      	subs	r0, #1
   8050e:	2802      	cmp	r0, #2
   80510:	d818      	bhi.n	80544 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80516:	460e      	mov	r6, r1
   80518:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8051a:	b182      	cbz	r2, 8053e <_write+0x32>
   8051c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8051e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80558 <_write+0x4c>
   80522:	4f0c      	ldr	r7, [pc, #48]	; (80554 <_write+0x48>)
   80524:	f8d8 0000 	ldr.w	r0, [r8]
   80528:	f815 1b01 	ldrb.w	r1, [r5], #1
   8052c:	683b      	ldr	r3, [r7, #0]
   8052e:	4798      	blx	r3
   80530:	2800      	cmp	r0, #0
   80532:	db0a      	blt.n	8054a <_write+0x3e>
   80534:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80536:	3c01      	subs	r4, #1
   80538:	d1f4      	bne.n	80524 <_write+0x18>
   8053a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8053e:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   80540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80544:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   80548:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8054a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8054e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80552:	bf00      	nop
   80554:	20078e14 	.word	0x20078e14
   80558:	20078e18 	.word	0x20078e18

0008055c <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   8055c:	2a00      	cmp	r2, #0
   8055e:	d04e      	beq.n	805fe <usart_serial_read_packet+0xa2>
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80564:	b085      	sub	sp, #20
   80566:	4606      	mov	r6, r0
   80568:	460d      	mov	r5, r1
   8056a:	4617      	mov	r7, r2

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8056c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 80614 <usart_serial_read_packet+0xb8>
		while (uart_read((Uart*)p_usart, data));
   80570:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80618 <usart_serial_read_packet+0xbc>
   80574:	f8cd a000 	str.w	sl, [sp]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80578:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8061c <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
   8057c:	4c21      	ldr	r4, [pc, #132]	; (80604 <usart_serial_read_packet+0xa8>)
   8057e:	f8cd b004 	str.w	fp, [sp, #4]
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80582:	2300      	movs	r3, #0
   80584:	9303      	str	r3, [sp, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80586:	4556      	cmp	r6, sl
   80588:	d105      	bne.n	80596 <usart_serial_read_packet+0x3a>
		while (uart_read((Uart*)p_usart, data));
   8058a:	9800      	ldr	r0, [sp, #0]
   8058c:	4629      	mov	r1, r5
   8058e:	47c8      	blx	r9
   80590:	2800      	cmp	r0, #0
   80592:	d1fa      	bne.n	8058a <usart_serial_read_packet+0x2e>
   80594:	e015      	b.n	805c2 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80596:	455e      	cmp	r6, fp
   80598:	d107      	bne.n	805aa <usart_serial_read_packet+0x4e>
		while (usart_read(p_usart, &val));
   8059a:	9801      	ldr	r0, [sp, #4]
   8059c:	a903      	add	r1, sp, #12
   8059e:	47a0      	blx	r4
   805a0:	2800      	cmp	r0, #0
   805a2:	d1fa      	bne.n	8059a <usart_serial_read_packet+0x3e>
		*data = (uint8_t)(val & 0xFF);
   805a4:	9b03      	ldr	r3, [sp, #12]
   805a6:	702b      	strb	r3, [r5, #0]
   805a8:	e017      	b.n	805da <usart_serial_read_packet+0x7e>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   805aa:	4b17      	ldr	r3, [pc, #92]	; (80608 <usart_serial_read_packet+0xac>)
   805ac:	429e      	cmp	r6, r3
   805ae:	d108      	bne.n	805c2 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
   805b0:	4698      	mov	r8, r3
   805b2:	4640      	mov	r0, r8
   805b4:	a903      	add	r1, sp, #12
   805b6:	47a0      	blx	r4
   805b8:	2800      	cmp	r0, #0
   805ba:	d1fa      	bne.n	805b2 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
   805bc:	9b03      	ldr	r3, [sp, #12]
   805be:	702b      	strb	r3, [r5, #0]
   805c0:	e016      	b.n	805f0 <usart_serial_read_packet+0x94>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   805c2:	4b12      	ldr	r3, [pc, #72]	; (8060c <usart_serial_read_packet+0xb0>)
   805c4:	429e      	cmp	r6, r3
   805c6:	d108      	bne.n	805da <usart_serial_read_packet+0x7e>
		while (usart_read(p_usart, &val));
   805c8:	4698      	mov	r8, r3
   805ca:	4640      	mov	r0, r8
   805cc:	a903      	add	r1, sp, #12
   805ce:	47a0      	blx	r4
   805d0:	2800      	cmp	r0, #0
   805d2:	d1fa      	bne.n	805ca <usart_serial_read_packet+0x6e>
		*data = (uint8_t)(val & 0xFF);
   805d4:	9b03      	ldr	r3, [sp, #12]
   805d6:	702b      	strb	r3, [r5, #0]
   805d8:	e00a      	b.n	805f0 <usart_serial_read_packet+0x94>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   805da:	4b0d      	ldr	r3, [pc, #52]	; (80610 <usart_serial_read_packet+0xb4>)
   805dc:	429e      	cmp	r6, r3
   805de:	d107      	bne.n	805f0 <usart_serial_read_packet+0x94>
		while (usart_read(p_usart, &val));
   805e0:	4698      	mov	r8, r3
   805e2:	4640      	mov	r0, r8
   805e4:	a903      	add	r1, sp, #12
   805e6:	47a0      	blx	r4
   805e8:	2800      	cmp	r0, #0
   805ea:	d1fa      	bne.n	805e2 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   805ec:	9b03      	ldr	r3, [sp, #12]
   805ee:	702b      	strb	r3, [r5, #0]
	while (len) {
		usart_serial_getchar(usart, data);
		len--;
		data++;
   805f0:	3501      	adds	r5, #1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   805f2:	3f01      	subs	r7, #1
   805f4:	d1c5      	bne.n	80582 <usart_serial_read_packet+0x26>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   805f6:	2000      	movs	r0, #0
   805f8:	b005      	add	sp, #20
   805fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   805fe:	2000      	movs	r0, #0
   80600:	4770      	bx	lr
   80602:	bf00      	nop
   80604:	00080205 	.word	0x00080205
   80608:	4009c000 	.word	0x4009c000
   8060c:	400a0000 	.word	0x400a0000
   80610:	400a4000 	.word	0x400a4000
   80614:	400e0800 	.word	0x400e0800
   80618:	00080dc5 	.word	0x00080dc5
   8061c:	40098000 	.word	0x40098000

00080620 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80620:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80622:	2401      	movs	r4, #1
   80624:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80626:	2400      	movs	r4, #0
   80628:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8062a:	f240 2502 	movw	r5, #514	; 0x202
   8062e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80632:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80636:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8063a:	6845      	ldr	r5, [r0, #4]
   8063c:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8063e:	0052      	lsls	r2, r2, #1
   80640:	fbb1 f1f2 	udiv	r1, r1, r2
   80644:	1e4a      	subs	r2, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80646:	0212      	lsls	r2, r2, #8
   80648:	b292      	uxth	r2, r2
   8064a:	4313      	orrs	r3, r2
   8064c:	6043      	str	r3, [r0, #4]
	return 0;
}
   8064e:	4620      	mov	r0, r4
   80650:	bc30      	pop	{r4, r5}
   80652:	4770      	bx	lr

00080654 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80654:	6843      	ldr	r3, [r0, #4]
   80656:	f023 0310 	bic.w	r3, r3, #16
   8065a:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   8065c:	6843      	ldr	r3, [r0, #4]
   8065e:	4319      	orrs	r1, r3
   80660:	6041      	str	r1, [r0, #4]
   80662:	4770      	bx	lr

00080664 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80664:	6843      	ldr	r3, [r0, #4]
   80666:	4319      	orrs	r1, r3
   80668:	01d2      	lsls	r2, r2, #7
   8066a:	b2d2      	uxtb	r2, r2
   8066c:	4311      	orrs	r1, r2
   8066e:	6041      	str	r1, [r0, #4]
   80670:	4770      	bx	lr
   80672:	bf00      	nop

00080674 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80674:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80676:	6844      	ldr	r4, [r0, #4]
   80678:	4322      	orrs	r2, r4
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   8067a:	0609      	lsls	r1, r1, #24
   8067c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
   80680:	430a      	orrs	r2, r1
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80682:	071b      	lsls	r3, r3, #28
   80684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   80688:	4313      	orrs	r3, r2
   8068a:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   8068c:	f85d 4b04 	ldr.w	r4, [sp], #4
   80690:	4770      	bx	lr
   80692:	bf00      	nop

00080694 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80694:	2302      	movs	r3, #2
   80696:	6003      	str	r3, [r0, #0]
   80698:	4770      	bx	lr
   8069a:	bf00      	nop

0008069c <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   8069c:	2301      	movs	r3, #1
   8069e:	408b      	lsls	r3, r1
   806a0:	6103      	str	r3, [r0, #16]
   806a2:	4770      	bx	lr

000806a4 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   806a4:	6a00      	ldr	r0, [r0, #32]
}
   806a6:	4770      	bx	lr

000806a8 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   806a8:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   806aa:	4770      	bx	lr

000806ac <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   806ac:	b4f0      	push	{r4, r5, r6, r7}
   806ae:	b08c      	sub	sp, #48	; 0x30
   806b0:	4607      	mov	r7, r0
   806b2:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   806b4:	ac01      	add	r4, sp, #4
   806b6:	4d11      	ldr	r5, [pc, #68]	; (806fc <pwm_clocks_generate+0x50>)
   806b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   806ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   806bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   806be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   806c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   806c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   806c8:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   806ca:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   806cc:	f852 3b04 	ldr.w	r3, [r2], #4
   806d0:	fbb6 f3f3 	udiv	r3, r6, r3
   806d4:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   806d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   806dc:	d905      	bls.n	806ea <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
   806de:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   806e0:	280b      	cmp	r0, #11
   806e2:	d1f3      	bne.n	806cc <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   806e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   806e8:	e005      	b.n	806f6 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   806ea:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
   806ec:	bf94      	ite	ls
   806ee:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
   806f2:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
   806f6:	b00c      	add	sp, #48	; 0x30
   806f8:	bcf0      	pop	{r4, r5, r6, r7}
   806fa:	4770      	bx	lr
   806fc:	000863c0 	.word	0x000863c0

00080700 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80700:	b570      	push	{r4, r5, r6, lr}
   80702:	4606      	mov	r6, r0
   80704:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80706:	6808      	ldr	r0, [r1, #0]
   80708:	b140      	cbz	r0, 8071c <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8070a:	6889      	ldr	r1, [r1, #8]
   8070c:	4b0e      	ldr	r3, [pc, #56]	; (80748 <pwm_init+0x48>)
   8070e:	4798      	blx	r3
   80710:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80712:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80716:	4298      	cmp	r0, r3
   80718:	d101      	bne.n	8071e <pwm_init+0x1e>
   8071a:	e00e      	b.n	8073a <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   8071c:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   8071e:	6860      	ldr	r0, [r4, #4]
   80720:	b140      	cbz	r0, 80734 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80722:	68a1      	ldr	r1, [r4, #8]
   80724:	4b08      	ldr	r3, [pc, #32]	; (80748 <pwm_init+0x48>)
   80726:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80728:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8072c:	4298      	cmp	r0, r3
   8072e:	d007      	beq.n	80740 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
   80730:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80734:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80736:	2000      	movs	r0, #0
   80738:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   8073a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8073e:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   80740:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
   80744:	bd70      	pop	{r4, r5, r6, pc}
   80746:	bf00      	nop
   80748:	000806ad 	.word	0x000806ad

0008074c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   8074c:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8074e:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80750:	8a8a      	ldrh	r2, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80752:	684c      	ldr	r4, [r1, #4]
   80754:	f004 040f 	and.w	r4, r4, #15
   80758:	4322      	orrs	r2, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   8075a:	890c      	ldrh	r4, [r1, #8]
   8075c:	4322      	orrs	r2, r4
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   8075e:	7a8c      	ldrb	r4, [r1, #10]
   80760:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
   80764:	7d8c      	ldrb	r4, [r1, #22]
   80766:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   8076a:	7dcc      	ldrb	r4, [r1, #23]
   8076c:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80770:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80772:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
   80776:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   8077a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8077e:	68ca      	ldr	r2, [r1, #12]
   80780:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80784:	690a      	ldr	r2, [r1, #16]
   80786:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   8078a:	7d8a      	ldrb	r2, [r1, #22]
   8078c:	b13a      	cbz	r2, 8079e <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   8078e:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80790:	8b4a      	ldrh	r2, [r1, #26]
   80792:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80796:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   8079a:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   8079e:	6c84      	ldr	r4, [r0, #72]	; 0x48
   807a0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   807a4:	409a      	lsls	r2, r3
   807a6:	43d2      	mvns	r2, r2
   807a8:	ea02 0504 	and.w	r5, r2, r4
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   807ac:	7fcc      	ldrb	r4, [r1, #31]
   807ae:	fa04 f603 	lsl.w	r6, r4, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   807b2:	7f8c      	ldrb	r4, [r1, #30]
   807b4:	409c      	lsls	r4, r3
   807b6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   807ba:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   807bc:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   807be:	6c44      	ldr	r4, [r0, #68]	; 0x44
   807c0:	4014      	ands	r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   807c2:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
   807c6:	fa02 f503 	lsl.w	r5, r2, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   807ca:	f891 2020 	ldrb.w	r2, [r1, #32]
   807ce:	409a      	lsls	r2, r3
   807d0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   807d4:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   807d6:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   807d8:	2201      	movs	r2, #1
   807da:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   807dc:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   807e0:	b11c      	cbz	r4, 807ea <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
   807e2:	6a04      	ldr	r4, [r0, #32]
   807e4:	4314      	orrs	r4, r2
   807e6:	6204      	str	r4, [r0, #32]
   807e8:	e003      	b.n	807f2 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   807ea:	6a04      	ldr	r4, [r0, #32]
   807ec:	ea24 0402 	bic.w	r4, r4, r2
   807f0:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   807f2:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   807f6:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   807f8:	6e84      	ldr	r4, [r0, #104]	; 0x68
   807fa:	bf0c      	ite	eq
   807fc:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   807fe:	4394      	bicne	r4, r2
   80800:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80802:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80806:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80808:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8080a:	bf0c      	ite	eq
   8080c:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80810:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80814:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80816:	2b03      	cmp	r3, #3
   80818:	d80b      	bhi.n	80832 <pwm_channel_init+0xe6>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8081a:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8081c:	00dd      	lsls	r5, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   8081e:	22ff      	movs	r2, #255	; 0xff
   80820:	40aa      	lsls	r2, r5
   80822:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80826:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   8082a:	40ab      	lsls	r3, r5
   8082c:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8082e:	66c3      	str	r3, [r0, #108]	; 0x6c
   80830:	e00c      	b.n	8084c <pwm_channel_init+0x100>
	} else {
		ch_num -= 4;
   80832:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80834:	6f02      	ldr	r2, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80836:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80838:	24ff      	movs	r4, #255	; 0xff
   8083a:	409c      	lsls	r4, r3
   8083c:	ea22 0404 	bic.w	r4, r2, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80840:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   80844:	fa02 f303 	lsl.w	r3, r2, r3
   80848:	4323      	orrs	r3, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8084a:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   8084c:	2000      	movs	r0, #0
   8084e:	bc70      	pop	{r4, r5, r6}
   80850:	4770      	bx	lr
   80852:	bf00      	nop

00080854 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80854:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   80856:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80858:	690b      	ldr	r3, [r1, #16]
   8085a:	4293      	cmp	r3, r2
   8085c:	d306      	bcc.n	8086c <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   8085e:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80860:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80864:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   80868:	2000      	movs	r0, #0
   8086a:	e001      	b.n	80870 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   8086c:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80870:	f85d 4b04 	ldr.w	r4, [sp], #4
   80874:	4770      	bx	lr
   80876:	bf00      	nop

00080878 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80878:	2301      	movs	r3, #1
   8087a:	408b      	lsls	r3, r1
   8087c:	6043      	str	r3, [r0, #4]
   8087e:	4770      	bx	lr

00080880 <main>:
int offset;
int antiwindup;
uint16_t set_point;

int main (void)
{
   80880:	b530      	push	{r4, r5, lr}
   80882:	b085      	sub	sp, #20
	sysclk_init();
   80884:	4b26      	ldr	r3, [pc, #152]	; (80920 <main+0xa0>)
   80886:	4798      	blx	r3
	board_init();
   80888:	4b26      	ldr	r3, [pc, #152]	; (80924 <main+0xa4>)
   8088a:	4798      	blx	r3
	configure_console();
   8088c:	4b26      	ldr	r3, [pc, #152]	; (80928 <main+0xa8>)
   8088e:	4798      	blx	r3
   80890:	200b      	movs	r0, #11
   80892:	4c26      	ldr	r4, [pc, #152]	; (8092c <main+0xac>)
   80894:	47a0      	blx	r4
   80896:	200c      	movs	r0, #12
   80898:	47a0      	blx	r4
   8089a:	200d      	movs	r0, #13
   8089c:	47a0      	blx	r4
   8089e:	200e      	movs	r0, #14
   808a0:	47a0      	blx	r4
	ioport_init();	
	motorshield_init();	
   808a2:	4b23      	ldr	r3, [pc, #140]	; (80930 <main+0xb0>)
   808a4:	4798      	blx	r3
	adc_config();
   808a6:	4b23      	ldr	r3, [pc, #140]	; (80934 <main+0xb4>)
   808a8:	4798      	blx	r3
	pwm_config();
   808aa:	4b23      	ldr	r3, [pc, #140]	; (80938 <main+0xb8>)
   808ac:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   808ae:	4b23      	ldr	r3, [pc, #140]	; (8093c <main+0xbc>)
   808b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808b4:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   808b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   808ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   808be:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   808c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	delay_init(sysclk_get_cpu_hz());
	
	ioport_set_pin_dir(PIO_PB26_IDX, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(PIO_PB14_IDX, IOPORT_DIR_OUTPUT);
	
	matlab_recieve_values();
   808c4:	4b1e      	ldr	r3, [pc, #120]	; (80940 <main+0xc0>)
   808c6:	4798      	blx	r3
	regulate_init();
   808c8:	4b1e      	ldr	r3, [pc, #120]	; (80944 <main+0xc4>)
   808ca:	4798      	blx	r3
	
	vSemaphoreCreateBinary(sync);
   808cc:	2001      	movs	r0, #1
   808ce:	2100      	movs	r1, #0
   808d0:	2203      	movs	r2, #3
   808d2:	4b1d      	ldr	r3, [pc, #116]	; (80948 <main+0xc8>)
   808d4:	4798      	blx	r3
   808d6:	4b1d      	ldr	r3, [pc, #116]	; (8094c <main+0xcc>)
   808d8:	6018      	str	r0, [r3, #0]
   808da:	b120      	cbz	r0, 808e6 <main+0x66>
   808dc:	2100      	movs	r1, #0
   808de:	460a      	mov	r2, r1
   808e0:	460b      	mov	r3, r1
   808e2:	4c1b      	ldr	r4, [pc, #108]	; (80950 <main+0xd0>)
   808e4:	47a0      	blx	r4
	xTaskCreate(task_com, (const signed char * const) "Com", TASK_COM_STACKSIZE, NULL, 1, NULL);	
   808e6:	2301      	movs	r3, #1
   808e8:	9300      	str	r3, [sp, #0]
   808ea:	2400      	movs	r4, #0
   808ec:	9401      	str	r4, [sp, #4]
   808ee:	9402      	str	r4, [sp, #8]
   808f0:	9403      	str	r4, [sp, #12]
   808f2:	4818      	ldr	r0, [pc, #96]	; (80954 <main+0xd4>)
   808f4:	4918      	ldr	r1, [pc, #96]	; (80958 <main+0xd8>)
   808f6:	f44f 7200 	mov.w	r2, #512	; 0x200
   808fa:	4623      	mov	r3, r4
   808fc:	4d17      	ldr	r5, [pc, #92]	; (8095c <main+0xdc>)
   808fe:	47a8      	blx	r5
	xTaskCreate(task_regulate, (const signed char * const) "Regulate", TASK_COM_STACKSIZE,NULL,2,NULL);
   80900:	2302      	movs	r3, #2
   80902:	9300      	str	r3, [sp, #0]
   80904:	9401      	str	r4, [sp, #4]
   80906:	9402      	str	r4, [sp, #8]
   80908:	9403      	str	r4, [sp, #12]
   8090a:	4815      	ldr	r0, [pc, #84]	; (80960 <main+0xe0>)
   8090c:	4915      	ldr	r1, [pc, #84]	; (80964 <main+0xe4>)
   8090e:	f44f 7200 	mov.w	r2, #512	; 0x200
   80912:	4623      	mov	r3, r4
   80914:	47a8      	blx	r5
	
	vTaskStartScheduler();	
   80916:	4b14      	ldr	r3, [pc, #80]	; (80968 <main+0xe8>)
   80918:	4798      	blx	r3
}
   8091a:	4620      	mov	r0, r4
   8091c:	b005      	add	sp, #20
   8091e:	bd30      	pop	{r4, r5, pc}
   80920:	000823f5 	.word	0x000823f5
   80924:	00082459 	.word	0x00082459
   80928:	00080491 	.word	0x00080491
   8092c:	0008286d 	.word	0x0008286d
   80930:	0008096d 	.word	0x0008096d
   80934:	00080151 	.word	0x00080151
   80938:	000809b9 	.word	0x000809b9
   8093c:	400e1000 	.word	0x400e1000
   80940:	000803c1 	.word	0x000803c1
   80944:	00080d59 	.word	0x00080d59
   80948:	000812d5 	.word	0x000812d5
   8094c:	20070138 	.word	0x20070138
   80950:	0008132d 	.word	0x0008132d
   80954:	00080a41 	.word	0x00080a41
   80958:	000863ec 	.word	0x000863ec
   8095c:	000816f1 	.word	0x000816f1
   80960:	00080b0d 	.word	0x00080b0d
   80964:	000863f0 	.word	0x000863f0
   80968:	000818f5 	.word	0x000818f5

0008096c <motorshield_init>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8096c:	4b09      	ldr	r3, [pc, #36]	; (80994 <motorshield_init+0x28>)
   8096e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80972:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80974:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80978:	4a07      	ldr	r2, [pc, #28]	; (80998 <motorshield_init+0x2c>)
   8097a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   8097e:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80980:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80984:	6351      	str	r1, [r2, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80986:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8098a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8098c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80990:	631a      	str	r2, [r3, #48]	; 0x30
   80992:	4770      	bx	lr
   80994:	400e1000 	.word	0x400e1000
   80998:	400e1200 	.word	0x400e1200

0008099c <pwm_set_duty_cycle>:
		pwm_set_duty_cycle(0);		
	}
}

void pwm_set_duty_cycle(uint32_t dutycycle)
{
   8099c:	b508      	push	{r3, lr}
   8099e:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_instance, dutycycle);
   809a0:	4802      	ldr	r0, [pc, #8]	; (809ac <pwm_set_duty_cycle+0x10>)
   809a2:	4903      	ldr	r1, [pc, #12]	; (809b0 <pwm_set_duty_cycle+0x14>)
   809a4:	4b03      	ldr	r3, [pc, #12]	; (809b4 <pwm_set_duty_cycle+0x18>)
   809a6:	4798      	blx	r3
   809a8:	bd08      	pop	{r3, pc}
   809aa:	bf00      	nop
   809ac:	40094000 	.word	0x40094000
   809b0:	20070b94 	.word	0x20070b94
   809b4:	00080855 	.word	0x00080855

000809b8 <pwm_config>:
#include "pwm_func.h"

static pwm_channel_t pwm_instance;

void pwm_config(void)
{
   809b8:	b530      	push	{r4, r5, lr}
   809ba:	b085      	sub	sp, #20
	if(pmc_enable_periph_clk(ID_PWM) == 0) {		
   809bc:	2024      	movs	r0, #36	; 0x24
   809be:	4b15      	ldr	r3, [pc, #84]	; (80a14 <pwm_config+0x5c>)
   809c0:	4798      	blx	r3
   809c2:	bb28      	cbnz	r0, 80a10 <pwm_config+0x58>
		pwm_clock_t pwmclock = {
   809c4:	4b14      	ldr	r3, [pc, #80]	; (80a18 <pwm_config+0x60>)
   809c6:	9301      	str	r3, [sp, #4]
   809c8:	2400      	movs	r4, #0
   809ca:	9402      	str	r4, [sp, #8]
   809cc:	4b13      	ldr	r3, [pc, #76]	; (80a1c <pwm_config+0x64>)
   809ce:	9303      	str	r3, [sp, #12]
			.ul_clka = PWM_FREQUENCY * PWM_RESOLUTION,
			.ul_clkb = 0,
			.ul_mck = sysclk_get_cpu_hz()
		};
		pwm_init(PWM, &pwmclock);
   809d0:	4d13      	ldr	r5, [pc, #76]	; (80a20 <pwm_config+0x68>)
   809d2:	4628      	mov	r0, r5
   809d4:	a901      	add	r1, sp, #4
   809d6:	4b13      	ldr	r3, [pc, #76]	; (80a24 <pwm_config+0x6c>)
   809d8:	4798      	blx	r3
		pwm_instance.alignment = PWM_ALIGN_LEFT;
   809da:	4913      	ldr	r1, [pc, #76]	; (80a28 <pwm_config+0x70>)
   809dc:	810c      	strh	r4, [r1, #8]
		pwm_instance.polarity = PWM_LOW;
   809de:	728c      	strb	r4, [r1, #10]
		pwm_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
   809e0:	230b      	movs	r3, #11
   809e2:	604b      	str	r3, [r1, #4]
		pwm_instance.ul_period = PWM_RESOLUTION;
   809e4:	f240 33e7 	movw	r3, #999	; 0x3e7
   809e8:	610b      	str	r3, [r1, #16]
		pwm_instance.ul_duty = 0;
   809ea:	60cc      	str	r4, [r1, #12]
		pwm_instance.channel = PWM_CHANNEL_0;
   809ec:	600c      	str	r4, [r1, #0]
		pwm_channel_init(PWM, &pwm_instance);		
   809ee:	4628      	mov	r0, r5
   809f0:	4b0e      	ldr	r3, [pc, #56]	; (80a2c <pwm_config+0x74>)
   809f2:	4798      	blx	r3
		pio_set_peripheral(PWM_PIO, PWM_PIO_PERIPHERAL, PWM_PIO_PIN);
   809f4:	480e      	ldr	r0, [pc, #56]	; (80a30 <pwm_config+0x78>)
   809f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   809fe:	4b0d      	ldr	r3, [pc, #52]	; (80a34 <pwm_config+0x7c>)
   80a00:	4798      	blx	r3
		pwm_channel_enable(PWM, PWM_CHANNEL_0);
   80a02:	4628      	mov	r0, r5
   80a04:	4621      	mov	r1, r4
   80a06:	4b0c      	ldr	r3, [pc, #48]	; (80a38 <pwm_config+0x80>)
   80a08:	4798      	blx	r3
		pwm_set_duty_cycle(0);		
   80a0a:	4620      	mov	r0, r4
   80a0c:	4b0b      	ldr	r3, [pc, #44]	; (80a3c <pwm_config+0x84>)
   80a0e:	4798      	blx	r3
	}
}
   80a10:	b005      	add	sp, #20
   80a12:	bd30      	pop	{r4, r5, pc}
   80a14:	0008286d 	.word	0x0008286d
   80a18:	000f3e58 	.word	0x000f3e58
   80a1c:	0501bd00 	.word	0x0501bd00
   80a20:	40094000 	.word	0x40094000
   80a24:	00080701 	.word	0x00080701
   80a28:	20070b94 	.word	0x20070b94
   80a2c:	0008074d 	.word	0x0008074d
   80a30:	400e1000 	.word	0x400e1000
   80a34:	000824c9 	.word	0x000824c9
   80a38:	00080879 	.word	0x00080879
   80a3c:	0008099d 	.word	0x0008099d

00080a40 <task_com>:
 */ 
#include <asf.h>
#include "sync.h"

void task_com(void *pvParameters)
{	
   80a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80a44:	b089      	sub	sp, #36	; 0x24
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = timer;
   80a46:	4b24      	ldr	r3, [pc, #144]	; (80ad8 <task_com+0x98>)
   80a48:	881b      	ldrh	r3, [r3, #0]
   80a4a:	9301      	str	r3, [sp, #4]
	
	xLastWakeTime = xTaskGetTickCount();
   80a4c:	4b23      	ldr	r3, [pc, #140]	; (80adc <task_com+0x9c>)
   80a4e:	4798      	blx	r3
   80a50:	f8ad 001e 	strh.w	r0, [sp, #30]
	uint8_t str[BUF_LEN] = {0};
   80a54:	2300      	movs	r3, #0
   80a56:	9303      	str	r3, [sp, #12]
   80a58:	9304      	str	r3, [sp, #16]
   80a5a:	9305      	str	r3, [sp, #20]
   80a5c:	9306      	str	r3, [sp, #24]
   80a5e:	4d20      	ldr	r5, [pc, #128]	; (80ae0 <task_com+0xa0>)
   80a60:	f04f 6980 	mov.w	r9, #67108864	; 0x4000000
   80a64:	46cb      	mov	fp, r9
	while(1)
	{	
		/*	Set pin high for performance measurement	 */
		ioport_set_pin_level(PIO_PB26_IDX,HIGH);
		
		if(xSemaphoreTake(sync, portMAX_DELAY)){
   80a66:	4e1f      	ldr	r6, [pc, #124]	; (80ae4 <task_com+0xa4>)
   80a68:	f8df a098 	ldr.w	sl, [pc, #152]	; 80b04 <task_com+0xc4>
   80a6c:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
   80a70:	6830      	ldr	r0, [r6, #0]
   80a72:	2100      	movs	r1, #0
   80a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80a78:	460b      	mov	r3, r1
   80a7a:	47d0      	blx	sl
   80a7c:	b320      	cbz	r0, 80ac8 <task_com+0x88>
			itoa(meas_distance, str, 10);
   80a7e:	4b1a      	ldr	r3, [pc, #104]	; (80ae8 <task_com+0xa8>)
   80a80:	8818      	ldrh	r0, [r3, #0]
   80a82:	a903      	add	r1, sp, #12
   80a84:	220a      	movs	r2, #10
   80a86:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80b08 <task_com+0xc8>
   80a8a:	47c0      	blx	r8
			printf(str);
   80a8c:	a803      	add	r0, sp, #12
   80a8e:	4c17      	ldr	r4, [pc, #92]	; (80aec <task_com+0xac>)
   80a90:	47a0      	blx	r4
			printf("\n");
   80a92:	4f17      	ldr	r7, [pc, #92]	; (80af0 <task_com+0xb0>)
   80a94:	4638      	mov	r0, r7
   80a96:	47a0      	blx	r4
			
			itoa(err, str, 10);
   80a98:	4b16      	ldr	r3, [pc, #88]	; (80af4 <task_com+0xb4>)
   80a9a:	6818      	ldr	r0, [r3, #0]
   80a9c:	a903      	add	r1, sp, #12
   80a9e:	220a      	movs	r2, #10
   80aa0:	47c0      	blx	r8
			printf(str);
   80aa2:	a803      	add	r0, sp, #12
   80aa4:	47a0      	blx	r4
			printf("\n");
   80aa6:	4638      	mov	r0, r7
   80aa8:	47a0      	blx	r4
			
			itoa(output, str, 10);
   80aaa:	4b13      	ldr	r3, [pc, #76]	; (80af8 <task_com+0xb8>)
   80aac:	8818      	ldrh	r0, [r3, #0]
   80aae:	a903      	add	r1, sp, #12
   80ab0:	220a      	movs	r2, #10
   80ab2:	47c0      	blx	r8
			printf(str);
   80ab4:	a803      	add	r0, sp, #12
   80ab6:	47a0      	blx	r4
			printf("\n");
   80ab8:	4638      	mov	r0, r7
   80aba:	47a0      	blx	r4
			xSemaphoreGive(sync);
   80abc:	6830      	ldr	r0, [r6, #0]
   80abe:	2100      	movs	r1, #0
   80ac0:	460a      	mov	r2, r1
   80ac2:	460b      	mov	r3, r1
   80ac4:	4c0d      	ldr	r4, [pc, #52]	; (80afc <task_com+0xbc>)
   80ac6:	47a0      	blx	r4
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80ac8:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
		}
		/*	Set pin low for performance measurement	 */
		ioport_set_pin_level(PIO_PB26_IDX,LOW);
		
		/* Sleep for some time */
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);		
   80acc:	f10d 001e 	add.w	r0, sp, #30
   80ad0:	9901      	ldr	r1, [sp, #4]
   80ad2:	4b0b      	ldr	r3, [pc, #44]	; (80b00 <task_com+0xc0>)
   80ad4:	4798      	blx	r3
	}
   80ad6:	e7c9      	b.n	80a6c <task_com+0x2c>
   80ad8:	20078e20 	.word	0x20078e20
   80adc:	00081971 	.word	0x00081971
   80ae0:	400e1000 	.word	0x400e1000
   80ae4:	20070138 	.word	0x20070138
   80ae8:	20070b92 	.word	0x20070b92
   80aec:	0008309d 	.word	0x0008309d
   80af0:	0008640c 	.word	0x0008640c
   80af4:	20070ac4 	.word	0x20070ac4
   80af8:	20070b90 	.word	0x20070b90
   80afc:	0008132d 	.word	0x0008132d
   80b00:	00081bc1 	.word	0x00081bc1
   80b04:	000814e5 	.word	0x000814e5
   80b08:	000830f5 	.word	0x000830f5

00080b0c <task_regulate>:
#include "pwm_func.h"
#include "sync.h"
#include "fdacoefs.h"

void task_regulate(void *pvParameters)
{
   80b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b10:	b09f      	sub	sp, #124	; 0x7c
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = timer;
   80b12:	4c71      	ldr	r4, [pc, #452]	; (80cd8 <task_regulate+0x1cc>)
   80b14:	8823      	ldrh	r3, [r4, #0]
   80b16:	9306      	str	r3, [sp, #24]
	xLastWakeTime = xTaskGetTickCount();
   80b18:	4b70      	ldr	r3, [pc, #448]	; (80cdc <task_regulate+0x1d0>)
   80b1a:	4798      	blx	r3
   80b1c:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
	int old_error = 0;
	int new_error = 0;
	int delta_error = 0;
	int calc_output = 0;
	int calc_distance = 0;
	float dT = (float) timer/1000;
   80b20:	8820      	ldrh	r0, [r4, #0]
   80b22:	4b6f      	ldr	r3, [pc, #444]	; (80ce0 <task_regulate+0x1d4>)
   80b24:	4798      	blx	r3
   80b26:	496f      	ldr	r1, [pc, #444]	; (80ce4 <task_regulate+0x1d8>)
   80b28:	4b6f      	ldr	r3, [pc, #444]	; (80ce8 <task_regulate+0x1dc>)
   80b2a:	4798      	blx	r3
   80b2c:	9003      	str	r0, [sp, #12]
	
	int xbuff[BL] = {0};
   80b2e:	a809      	add	r0, sp, #36	; 0x24
   80b30:	2100      	movs	r1, #0
   80b32:	2250      	movs	r2, #80	; 0x50
   80b34:	4b6d      	ldr	r3, [pc, #436]	; (80cec <task_regulate+0x1e0>)
   80b36:	4798      	blx	r3
	const portTickType xTimeIncrement = timer;
	xLastWakeTime = xTaskGetTickCount();
	
	int invalue = 0;
	int int_sum = 0;
	int old_error = 0;
   80b38:	2300      	movs	r3, #0
   80b3a:	9302      	str	r3, [sp, #8]
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = timer;
	xLastWakeTime = xTaskGetTickCount();
	
	int invalue = 0;
	int int_sum = 0;
   80b3c:	9301      	str	r3, [sp, #4]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80b3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   80b42:	9307      	str	r3, [sp, #28]
		/* Set pin high for performance measurement */
		ioport_set_pin_level(PIO_PB14_IDX,HIGH);
		
		/*Start ADC and read the value */
		adc_start(ADC);
		while ((adc_get_status(ADC) & 0x1<<24) == 0);
   80b44:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80d54 <task_regulate+0x248>
   80b48:	4b69      	ldr	r3, [pc, #420]	; (80cf0 <task_regulate+0x1e4>)
   80b4a:	9a07      	ldr	r2, [sp, #28]
   80b4c:	631a      	str	r2, [r3, #48]	; 0x30
	while(1){
		/* Set pin high for performance measurement */
		ioport_set_pin_level(PIO_PB14_IDX,HIGH);
		
		/*Start ADC and read the value */
		adc_start(ADC);
   80b4e:	4869      	ldr	r0, [pc, #420]	; (80cf4 <task_regulate+0x1e8>)
   80b50:	4b69      	ldr	r3, [pc, #420]	; (80cf8 <task_regulate+0x1ec>)
   80b52:	4798      	blx	r3
		while ((adc_get_status(ADC) & 0x1<<24) == 0);
   80b54:	4867      	ldr	r0, [pc, #412]	; (80cf4 <task_regulate+0x1e8>)
   80b56:	47d8      	blx	fp
   80b58:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80b5c:	d0fa      	beq.n	80b54 <task_regulate+0x48>
		invalue = adc_get_latest_value(ADC);
   80b5e:	4865      	ldr	r0, [pc, #404]	; (80cf4 <task_regulate+0x1e8>)
   80b60:	4b66      	ldr	r3, [pc, #408]	; (80cfc <task_regulate+0x1f0>)
   80b62:	4798      	blx	r3
   80b64:	ab1c      	add	r3, sp, #112	; 0x70
   80b66:	a909      	add	r1, sp, #36	; 0x24
		
		/* Move invalue buffer one sample forward */
		
		for(int k = BL - 1; k > 0; k--){
			xbuff[k] = xbuff[k-1];
   80b68:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   80b6c:	605a      	str	r2, [r3, #4]
		while ((adc_get_status(ADC) & 0x1<<24) == 0);
		invalue = adc_get_latest_value(ADC);
		
		/* Move invalue buffer one sample forward */
		
		for(int k = BL - 1; k > 0; k--){
   80b6e:	428b      	cmp	r3, r1
   80b70:	d1fa      	bne.n	80b68 <task_regulate+0x5c>
			xbuff[k] = xbuff[k-1];
		}
		xbuff[0] = invalue;
   80b72:	9009      	str	r0, [sp, #36]	; 0x24
   80b74:	ae08      	add	r6, sp, #32
   80b76:	4f62      	ldr	r7, [pc, #392]	; (80d00 <task_regulate+0x1f4>)
   80b78:	1f3c      	subs	r4, r7, #4
   80b7a:	374c      	adds	r7, #76	; 0x4c
		
		/* filter the signal */
		float temp_sum = 0;
   80b7c:	f04f 0800 	mov.w	r8, #0
		for(int k = 0; k < BL; k++){
			temp_sum += xbuff[k] * B[k];
   80b80:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80d20 <task_regulate+0x214>
   80b84:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80d28 <task_regulate+0x21c>
   80b88:	4d5e      	ldr	r5, [pc, #376]	; (80d04 <task_regulate+0x1f8>)
   80b8a:	f856 0f04 	ldr.w	r0, [r6, #4]!
   80b8e:	47d0      	blx	sl
   80b90:	f854 1f04 	ldr.w	r1, [r4, #4]!
   80b94:	47c8      	blx	r9
   80b96:	4601      	mov	r1, r0
   80b98:	4640      	mov	r0, r8
   80b9a:	47a8      	blx	r5
   80b9c:	4680      	mov	r8, r0
		}
		xbuff[0] = invalue;
		
		/* filter the signal */
		float temp_sum = 0;
		for(int k = 0; k < BL; k++){
   80b9e:	42bc      	cmp	r4, r7
   80ba0:	d1f3      	bne.n	80b8a <task_regulate+0x7e>
			temp_sum += xbuff[k] * B[k];
		}
		invalue = (int) temp_sum;
   80ba2:	4b59      	ldr	r3, [pc, #356]	; (80d08 <task_regulate+0x1fc>)
   80ba4:	4798      	blx	r3
		
		/* Calculate ball distance */
		uint8_t adc_to_mm_index = min(max((invalue/10) - 1, 0), 98);
   80ba6:	4b59      	ldr	r3, [pc, #356]	; (80d0c <task_regulate+0x200>)
   80ba8:	fb83 3200 	smull	r3, r2, r3, r0
   80bac:	43c3      	mvns	r3, r0
   80bae:	0fdb      	lsrs	r3, r3, #31
   80bb0:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   80bb4:	2b61      	cmp	r3, #97	; 0x61
   80bb6:	bfda      	itte	le
   80bb8:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
   80bbc:	b2db      	uxtble	r3, r3
   80bbe:	2362      	movgt	r3, #98	; 0x62
		uint8_t diff = adc_to_mm[adc_to_mm_index] - adc_to_mm[adc_to_mm_index + 1];
   80bc0:	4953      	ldr	r1, [pc, #332]	; (80d10 <task_regulate+0x204>)
   80bc2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   80bc6:	3301      	adds	r3, #1
   80bc8:	f811 4013 	ldrb.w	r4, [r1, r3, lsl #1]
   80bcc:	1b14      	subs	r4, r2, r4
		uint8_t interpol = (diff * (invalue % 10)) / 10;		
   80bce:	b2e4      	uxtb	r4, r4
   80bd0:	4b4e      	ldr	r3, [pc, #312]	; (80d0c <task_regulate+0x200>)
   80bd2:	fb83 1500 	smull	r1, r5, r3, r0
   80bd6:	17c1      	asrs	r1, r0, #31
   80bd8:	ebc1 01a5 	rsb	r1, r1, r5, asr #2
   80bdc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80be0:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
   80be4:	fb00 f004 	mul.w	r0, r0, r4
   80be8:	fb83 1300 	smull	r1, r3, r3, r0
   80bec:	17c0      	asrs	r0, r0, #31
   80bee:	ebc0 03a3 	rsb	r3, r0, r3, asr #2
		calc_distance = adc_to_mm[adc_to_mm_index] + interpol;
   80bf2:	b2db      	uxtb	r3, r3
   80bf4:	eb02 0a03 	add.w	sl, r2, r3
		
		/* Control calculation */
		new_error = set_point - calc_distance;
   80bf8:	4b46      	ldr	r3, [pc, #280]	; (80d14 <task_regulate+0x208>)
   80bfa:	881c      	ldrh	r4, [r3, #0]
   80bfc:	ebca 0404 	rsb	r4, sl, r4
		int_sum += new_error;
		
		/* Limit integral sum */
		int_sum = max(min(int_sum, antiwindup), -antiwindup);
   80c00:	4b45      	ldr	r3, [pc, #276]	; (80d18 <task_regulate+0x20c>)
   80c02:	681b      	ldr	r3, [r3, #0]
		uint8_t interpol = (diff * (invalue % 10)) / 10;		
		calc_distance = adc_to_mm[adc_to_mm_index] + interpol;
		
		/* Control calculation */
		new_error = set_point - calc_distance;
		int_sum += new_error;
   80c04:	9a01      	ldr	r2, [sp, #4]
   80c06:	4422      	add	r2, r4
		
		/* Limit integral sum */
		int_sum = max(min(int_sum, antiwindup), -antiwindup);
   80c08:	429a      	cmp	r2, r3
   80c0a:	bfa8      	it	ge
   80c0c:	461a      	movge	r2, r3
   80c0e:	425b      	negs	r3, r3
   80c10:	429a      	cmp	r2, r3
   80c12:	bfb8      	it	lt
   80c14:	461a      	movlt	r2, r3
   80c16:	9201      	str	r2, [sp, #4]
		
		delta_error = old_error - new_error;	
		float p_part = (float) (new_error * (-prop_gain));
   80c18:	4b40      	ldr	r3, [pc, #256]	; (80d1c <task_regulate+0x210>)
   80c1a:	681e      	ldr	r6, [r3, #0]
   80c1c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
		float i_part = (float) ((dT * int_sum)/int_gain) * (-prop_gain);
		float d_part = (float) ((delta_error/dT) * der_gain) * (-prop_gain);
		float sum = p_part + i_part + d_part;
		calc_output = (int) (offset + sum);
   80c20:	4f3f      	ldr	r7, [pc, #252]	; (80d20 <task_regulate+0x214>)
   80c22:	4b40      	ldr	r3, [pc, #256]	; (80d24 <task_regulate+0x218>)
   80c24:	6818      	ldr	r0, [r3, #0]
   80c26:	47b8      	blx	r7
   80c28:	9004      	str	r0, [sp, #16]
		
		/* Limit integral sum */
		int_sum = max(min(int_sum, antiwindup), -antiwindup);
		
		delta_error = old_error - new_error;	
		float p_part = (float) (new_error * (-prop_gain));
   80c2a:	4620      	mov	r0, r4
   80c2c:	47b8      	blx	r7
   80c2e:	4d3e      	ldr	r5, [pc, #248]	; (80d28 <task_regulate+0x21c>)
   80c30:	4631      	mov	r1, r6
   80c32:	47a8      	blx	r5
   80c34:	9005      	str	r0, [sp, #20]
		float i_part = (float) ((dT * int_sum)/int_gain) * (-prop_gain);
   80c36:	9801      	ldr	r0, [sp, #4]
   80c38:	47b8      	blx	r7
   80c3a:	9903      	ldr	r1, [sp, #12]
   80c3c:	47a8      	blx	r5
   80c3e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80ce8 <task_regulate+0x1dc>
   80c42:	4b3a      	ldr	r3, [pc, #232]	; (80d2c <task_regulate+0x220>)
   80c44:	6819      	ldr	r1, [r3, #0]
   80c46:	47c8      	blx	r9
   80c48:	4601      	mov	r1, r0
   80c4a:	4630      	mov	r0, r6
   80c4c:	47a8      	blx	r5
   80c4e:	4601      	mov	r1, r0
		float d_part = (float) ((delta_error/dT) * der_gain) * (-prop_gain);
		float sum = p_part + i_part + d_part;
   80c50:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80d04 <task_regulate+0x1f8>
   80c54:	9805      	ldr	r0, [sp, #20]
   80c56:	47c0      	blx	r8
   80c58:	9005      	str	r0, [sp, #20]
		int_sum = max(min(int_sum, antiwindup), -antiwindup);
		
		delta_error = old_error - new_error;	
		float p_part = (float) (new_error * (-prop_gain));
		float i_part = (float) ((dT * int_sum)/int_gain) * (-prop_gain);
		float d_part = (float) ((delta_error/dT) * der_gain) * (-prop_gain);
   80c5a:	9b02      	ldr	r3, [sp, #8]
   80c5c:	1b18      	subs	r0, r3, r4
   80c5e:	47b8      	blx	r7
   80c60:	9903      	ldr	r1, [sp, #12]
   80c62:	47c8      	blx	r9
   80c64:	4b32      	ldr	r3, [pc, #200]	; (80d30 <task_regulate+0x224>)
   80c66:	6819      	ldr	r1, [r3, #0]
   80c68:	47a8      	blx	r5
   80c6a:	4601      	mov	r1, r0
   80c6c:	4630      	mov	r0, r6
   80c6e:	47a8      	blx	r5
   80c70:	4601      	mov	r1, r0
		float sum = p_part + i_part + d_part;
   80c72:	9805      	ldr	r0, [sp, #20]
   80c74:	47c0      	blx	r8
   80c76:	4601      	mov	r1, r0
		calc_output = (int) (offset + sum);
   80c78:	9804      	ldr	r0, [sp, #16]
   80c7a:	47c0      	blx	r8
   80c7c:	4b22      	ldr	r3, [pc, #136]	; (80d08 <task_regulate+0x1fc>)
   80c7e:	4798      	blx	r3
		
		old_error = new_error;		
		/* Limit output to 0-100% */
		calc_output = max(min(calc_output, 999), 0);
   80c80:	f240 35e7 	movw	r5, #999	; 0x3e7
   80c84:	42a8      	cmp	r0, r5
   80c86:	bfa8      	it	ge
   80c88:	4628      	movge	r0, r5
   80c8a:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
		
		/* Write output */
		pwm_set_duty_cycle(calc_output);
   80c8e:	4628      	mov	r0, r5
   80c90:	4b28      	ldr	r3, [pc, #160]	; (80d34 <task_regulate+0x228>)
   80c92:	4798      	blx	r3
		
		/* Transfer values between tasks */
		if(xSemaphoreTake(sync, portMAX_DELAY)){
   80c94:	4b28      	ldr	r3, [pc, #160]	; (80d38 <task_regulate+0x22c>)
   80c96:	6818      	ldr	r0, [r3, #0]
   80c98:	2100      	movs	r1, #0
   80c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80c9e:	460b      	mov	r3, r1
   80ca0:	4e26      	ldr	r6, [pc, #152]	; (80d3c <task_regulate+0x230>)
   80ca2:	47b0      	blx	r6
   80ca4:	b168      	cbz	r0, 80cc2 <task_regulate+0x1b6>
			meas_distance = calc_distance;
   80ca6:	4b26      	ldr	r3, [pc, #152]	; (80d40 <task_regulate+0x234>)
   80ca8:	f8a3 a000 	strh.w	sl, [r3]
			err = new_error;
   80cac:	4b25      	ldr	r3, [pc, #148]	; (80d44 <task_regulate+0x238>)
   80cae:	601c      	str	r4, [r3, #0]
			output = calc_output;
   80cb0:	4b25      	ldr	r3, [pc, #148]	; (80d48 <task_regulate+0x23c>)
   80cb2:	801d      	strh	r5, [r3, #0]
			xSemaphoreGive(sync);
   80cb4:	4b20      	ldr	r3, [pc, #128]	; (80d38 <task_regulate+0x22c>)
   80cb6:	6818      	ldr	r0, [r3, #0]
   80cb8:	2100      	movs	r1, #0
   80cba:	460a      	mov	r2, r1
   80cbc:	460b      	mov	r3, r1
   80cbe:	4d23      	ldr	r5, [pc, #140]	; (80d4c <task_regulate+0x240>)
   80cc0:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80cc2:	4b0b      	ldr	r3, [pc, #44]	; (80cf0 <task_regulate+0x1e4>)
   80cc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80cc8:	635a      	str	r2, [r3, #52]	; 0x34
		
		/* Set pin low for performance measurement */
		ioport_set_pin_level(PIO_PB14_IDX,LOW);
		
		/* Sleep for some time */
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   80cca:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   80cce:	9906      	ldr	r1, [sp, #24]
   80cd0:	4b1f      	ldr	r3, [pc, #124]	; (80d50 <task_regulate+0x244>)
   80cd2:	4798      	blx	r3
		float i_part = (float) ((dT * int_sum)/int_gain) * (-prop_gain);
		float d_part = (float) ((delta_error/dT) * der_gain) * (-prop_gain);
		float sum = p_part + i_part + d_part;
		calc_output = (int) (offset + sum);
		
		old_error = new_error;		
   80cd4:	9402      	str	r4, [sp, #8]
		/* Set pin low for performance measurement */
		ioport_set_pin_level(PIO_PB14_IDX,LOW);
		
		/* Sleep for some time */
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
	}
   80cd6:	e737      	b.n	80b48 <task_regulate+0x3c>
   80cd8:	20078e20 	.word	0x20078e20
   80cdc:	00081971 	.word	0x00081971
   80ce0:	00082c4d 	.word	0x00082c4d
   80ce4:	447a0000 	.word	0x447a0000
   80ce8:	00082e65 	.word	0x00082e65
   80cec:	000831e5 	.word	0x000831e5
   80cf0:	400e1000 	.word	0x400e1000
   80cf4:	400c0000 	.word	0x400c0000
   80cf8:	00080695 	.word	0x00080695
   80cfc:	000806a5 	.word	0x000806a5
   80d00:	2007013c 	.word	0x2007013c
   80d04:	00082aed 	.word	0x00082aed
   80d08:	00082f9d 	.word	0x00082f9d
   80d0c:	66666667 	.word	0x66666667
   80d10:	20070ac8 	.word	0x20070ac8
   80d14:	20078e28 	.word	0x20078e28
   80d18:	20078e2c 	.word	0x20078e2c
   80d1c:	20078e30 	.word	0x20078e30
   80d20:	00082c55 	.word	0x00082c55
   80d24:	20078e34 	.word	0x20078e34
   80d28:	00082cfd 	.word	0x00082cfd
   80d2c:	20078e1c 	.word	0x20078e1c
   80d30:	20078e24 	.word	0x20078e24
   80d34:	0008099d 	.word	0x0008099d
   80d38:	20070138 	.word	0x20070138
   80d3c:	000814e5 	.word	0x000814e5
   80d40:	20070b92 	.word	0x20070b92
   80d44:	20070ac4 	.word	0x20070ac4
   80d48:	20070b90 	.word	0x20070b90
   80d4c:	0008132d 	.word	0x0008132d
   80d50:	00081bc1 	.word	0x00081bc1
   80d54:	000806a9 	.word	0x000806a9

00080d58 <regulate_init>:
}

void regulate_init(void)
{
   80d58:	b508      	push	{r3, lr}
	pwm_set_duty_cycle(offset);
   80d5a:	4b04      	ldr	r3, [pc, #16]	; (80d6c <regulate_init+0x14>)
   80d5c:	6818      	ldr	r0, [r3, #0]
   80d5e:	4b04      	ldr	r3, [pc, #16]	; (80d70 <regulate_init+0x18>)
   80d60:	4798      	blx	r3
	delay_ms(5000);
   80d62:	4804      	ldr	r0, [pc, #16]	; (80d74 <regulate_init+0x1c>)
   80d64:	4b04      	ldr	r3, [pc, #16]	; (80d78 <regulate_init+0x20>)
   80d66:	4798      	blx	r3
   80d68:	bd08      	pop	{r3, pc}
   80d6a:	bf00      	nop
   80d6c:	20078e34 	.word	0x20078e34
   80d70:	0008099d 	.word	0x0008099d
   80d74:	01c9c380 	.word	0x01c9c380
   80d78:	20070001 	.word	0x20070001

00080d7c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80d7c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80d7e:	23ac      	movs	r3, #172	; 0xac
   80d80:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80d82:	680b      	ldr	r3, [r1, #0]
   80d84:	684a      	ldr	r2, [r1, #4]
   80d86:	fbb3 f3f2 	udiv	r3, r3, r2
   80d8a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80d8c:	1e5c      	subs	r4, r3, #1
   80d8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80d92:	4294      	cmp	r4, r2
   80d94:	d80a      	bhi.n	80dac <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80d96:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80d98:	688b      	ldr	r3, [r1, #8]
   80d9a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80d9c:	f240 2302 	movw	r3, #514	; 0x202
   80da0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80da4:	2350      	movs	r3, #80	; 0x50
   80da6:	6003      	str	r3, [r0, #0]

	return 0;
   80da8:	2000      	movs	r0, #0
   80daa:	e000      	b.n	80dae <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80dac:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80dae:	f85d 4b04 	ldr.w	r4, [sp], #4
   80db2:	4770      	bx	lr

00080db4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80db4:	6943      	ldr	r3, [r0, #20]
   80db6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80dba:	bf1a      	itte	ne
   80dbc:	61c1      	strne	r1, [r0, #28]
	return 0;
   80dbe:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80dc0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80dc2:	4770      	bx	lr

00080dc4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80dc4:	6943      	ldr	r3, [r0, #20]
   80dc6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80dca:	bf1d      	ittte	ne
   80dcc:	6983      	ldrne	r3, [r0, #24]
   80dce:	700b      	strbne	r3, [r1, #0]
	return 0;
   80dd0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80dd2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80dd4:	4770      	bx	lr
   80dd6:	bf00      	nop

00080dd8 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80dd8:	f100 0308 	add.w	r3, r0, #8
   80ddc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80de2:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80de4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80de6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80de8:	2300      	movs	r3, #0
   80dea:	6003      	str	r3, [r0, #0]
   80dec:	4770      	bx	lr
   80dee:	bf00      	nop

00080df0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80df0:	2300      	movs	r3, #0
   80df2:	6103      	str	r3, [r0, #16]
   80df4:	4770      	bx	lr
   80df6:	bf00      	nop

00080df8 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80df8:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80dfa:	685a      	ldr	r2, [r3, #4]
   80dfc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80dfe:	6842      	ldr	r2, [r0, #4]
   80e00:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80e02:	685a      	ldr	r2, [r3, #4]
   80e04:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80e06:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80e08:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80e0a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80e0c:	6803      	ldr	r3, [r0, #0]
   80e0e:	3301      	adds	r3, #1
   80e10:	6003      	str	r3, [r0, #0]
   80e12:	4770      	bx	lr

00080e14 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80e14:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80e16:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80e1c:	429c      	cmp	r4, r3
   80e1e:	d101      	bne.n	80e24 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80e20:	6902      	ldr	r2, [r0, #16]
   80e22:	e00c      	b.n	80e3e <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80e24:	f100 0208 	add.w	r2, r0, #8
   80e28:	68c3      	ldr	r3, [r0, #12]
   80e2a:	881b      	ldrh	r3, [r3, #0]
   80e2c:	b29b      	uxth	r3, r3
   80e2e:	429c      	cmp	r4, r3
   80e30:	d305      	bcc.n	80e3e <vListInsert+0x2a>
   80e32:	6852      	ldr	r2, [r2, #4]
   80e34:	6853      	ldr	r3, [r2, #4]
   80e36:	881b      	ldrh	r3, [r3, #0]
   80e38:	b29b      	uxth	r3, r3
   80e3a:	429c      	cmp	r4, r3
   80e3c:	d2f9      	bcs.n	80e32 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80e3e:	6853      	ldr	r3, [r2, #4]
   80e40:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80e42:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80e44:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80e46:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80e48:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80e4a:	6803      	ldr	r3, [r0, #0]
   80e4c:	3301      	adds	r3, #1
   80e4e:	6003      	str	r3, [r0, #0]
}
   80e50:	f85d 4b04 	ldr.w	r4, [sp], #4
   80e54:	4770      	bx	lr
   80e56:	bf00      	nop

00080e58 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80e58:	6843      	ldr	r3, [r0, #4]
   80e5a:	6882      	ldr	r2, [r0, #8]
   80e5c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80e5e:	6883      	ldr	r3, [r0, #8]
   80e60:	6842      	ldr	r2, [r0, #4]
   80e62:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80e64:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80e66:	685a      	ldr	r2, [r3, #4]
   80e68:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80e6a:	bf04      	itt	eq
   80e6c:	6882      	ldreq	r2, [r0, #8]
   80e6e:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80e70:	2200      	movs	r2, #0
   80e72:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80e74:	681a      	ldr	r2, [r3, #0]
   80e76:	3a01      	subs	r2, #1
   80e78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80e7a:	6818      	ldr	r0, [r3, #0]
}
   80e7c:	4770      	bx	lr
   80e7e:	bf00      	nop

00080e80 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80e80:	4803      	ldr	r0, [pc, #12]	; (80e90 <prvPortStartFirstTask+0x10>)
   80e82:	6800      	ldr	r0, [r0, #0]
   80e84:	6800      	ldr	r0, [r0, #0]
   80e86:	f380 8808 	msr	MSP, r0
   80e8a:	b662      	cpsie	i
   80e8c:	df00      	svc	0
   80e8e:	bf00      	nop
   80e90:	e000ed08 	.word	0xe000ed08

00080e94 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80e98:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80e9c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80ea0:	2300      	movs	r3, #0
   80ea2:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   80ea6:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80eaa:	3840      	subs	r0, #64	; 0x40
   80eac:	4770      	bx	lr
   80eae:	bf00      	nop

00080eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80eb0:	4b06      	ldr	r3, [pc, #24]	; (80ecc <pxCurrentTCBConst2>)
   80eb2:	6819      	ldr	r1, [r3, #0]
   80eb4:	6808      	ldr	r0, [r1, #0]
   80eb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80eba:	f380 8809 	msr	PSP, r0
   80ebe:	f04f 0000 	mov.w	r0, #0
   80ec2:	f380 8811 	msr	BASEPRI, r0
   80ec6:	f04e 0e0d 	orr.w	lr, lr, #13
   80eca:	4770      	bx	lr

00080ecc <pxCurrentTCBConst2>:
   80ecc:	20078cfc 	.word	0x20078cfc

00080ed0 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80ed4:	4b01      	ldr	r3, [pc, #4]	; (80edc <vPortYieldFromISR+0xc>)
   80ed6:	601a      	str	r2, [r3, #0]
   80ed8:	4770      	bx	lr
   80eda:	bf00      	nop
   80edc:	e000ed04 	.word	0xe000ed04

00080ee0 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80ee0:	f3ef 8011 	mrs	r0, BASEPRI
   80ee4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80ee8:	f381 8811 	msr	BASEPRI, r1
   80eec:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80eee:	2000      	movs	r0, #0

00080ef0 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80ef0:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80ef2:	4b03      	ldr	r3, [pc, #12]	; (80f00 <vPortEnterCritical+0x10>)
   80ef4:	4798      	blx	r3
	uxCriticalNesting++;
   80ef6:	4a03      	ldr	r2, [pc, #12]	; (80f04 <vPortEnterCritical+0x14>)
   80ef8:	6813      	ldr	r3, [r2, #0]
   80efa:	3301      	adds	r3, #1
   80efc:	6013      	str	r3, [r2, #0]
   80efe:	bd08      	pop	{r3, pc}
   80f00:	00080ee1 	.word	0x00080ee1
   80f04:	2007018c 	.word	0x2007018c

00080f08 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80f08:	f380 8811 	msr	BASEPRI, r0
   80f0c:	4770      	bx	lr
   80f0e:	bf00      	nop

00080f10 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80f10:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80f12:	4a04      	ldr	r2, [pc, #16]	; (80f24 <vPortExitCritical+0x14>)
   80f14:	6813      	ldr	r3, [r2, #0]
   80f16:	3b01      	subs	r3, #1
   80f18:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80f1a:	b913      	cbnz	r3, 80f22 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80f1c:	2000      	movs	r0, #0
   80f1e:	4b02      	ldr	r3, [pc, #8]	; (80f28 <vPortExitCritical+0x18>)
   80f20:	4798      	blx	r3
   80f22:	bd08      	pop	{r3, pc}
   80f24:	2007018c 	.word	0x2007018c
   80f28:	00080f09 	.word	0x00080f09

00080f2c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80f2c:	f3ef 8009 	mrs	r0, PSP
   80f30:	4b0c      	ldr	r3, [pc, #48]	; (80f64 <pxCurrentTCBConst>)
   80f32:	681a      	ldr	r2, [r3, #0]
   80f34:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80f38:	6010      	str	r0, [r2, #0]
   80f3a:	e92d 4008 	stmdb	sp!, {r3, lr}
   80f3e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80f42:	f380 8811 	msr	BASEPRI, r0
   80f46:	f000 fec9 	bl	81cdc <vTaskSwitchContext>
   80f4a:	f04f 0000 	mov.w	r0, #0
   80f4e:	f380 8811 	msr	BASEPRI, r0
   80f52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80f56:	6819      	ldr	r1, [r3, #0]
   80f58:	6808      	ldr	r0, [r1, #0]
   80f5a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80f5e:	f380 8809 	msr	PSP, r0
   80f62:	4770      	bx	lr

00080f64 <pxCurrentTCBConst>:
   80f64:	20078cfc 	.word	0x20078cfc

00080f68 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80f68:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80f6e:	4b05      	ldr	r3, [pc, #20]	; (80f84 <SysTick_Handler+0x1c>)
   80f70:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80f72:	4b05      	ldr	r3, [pc, #20]	; (80f88 <SysTick_Handler+0x20>)
   80f74:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80f76:	4b05      	ldr	r3, [pc, #20]	; (80f8c <SysTick_Handler+0x24>)
   80f78:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80f7a:	2000      	movs	r0, #0
   80f7c:	4b04      	ldr	r3, [pc, #16]	; (80f90 <SysTick_Handler+0x28>)
   80f7e:	4798      	blx	r3
   80f80:	bd08      	pop	{r3, pc}
   80f82:	bf00      	nop
   80f84:	e000ed04 	.word	0xe000ed04
   80f88:	00080ee1 	.word	0x00080ee1
   80f8c:	00081991 	.word	0x00081991
   80f90:	00080f09 	.word	0x00080f09

00080f94 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80f94:	4a03      	ldr	r2, [pc, #12]	; (80fa4 <vPortSetupTimerInterrupt+0x10>)
   80f96:	4b04      	ldr	r3, [pc, #16]	; (80fa8 <vPortSetupTimerInterrupt+0x14>)
   80f98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80f9a:	2207      	movs	r2, #7
   80f9c:	3b04      	subs	r3, #4
   80f9e:	601a      	str	r2, [r3, #0]
   80fa0:	4770      	bx	lr
   80fa2:	bf00      	nop
   80fa4:	0001481f 	.word	0x0001481f
   80fa8:	e000e014 	.word	0xe000e014

00080fac <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80fac:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80fae:	4b09      	ldr	r3, [pc, #36]	; (80fd4 <xPortStartScheduler+0x28>)
   80fb0:	681a      	ldr	r2, [r3, #0]
   80fb2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80fb6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80fb8:	681a      	ldr	r2, [r3, #0]
   80fba:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80fbe:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80fc0:	4b05      	ldr	r3, [pc, #20]	; (80fd8 <xPortStartScheduler+0x2c>)
   80fc2:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80fc4:	2400      	movs	r4, #0
   80fc6:	4b05      	ldr	r3, [pc, #20]	; (80fdc <xPortStartScheduler+0x30>)
   80fc8:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   80fca:	4b05      	ldr	r3, [pc, #20]	; (80fe0 <xPortStartScheduler+0x34>)
   80fcc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   80fce:	4620      	mov	r0, r4
   80fd0:	bd10      	pop	{r4, pc}
   80fd2:	bf00      	nop
   80fd4:	e000ed20 	.word	0xe000ed20
   80fd8:	00080f95 	.word	0x00080f95
   80fdc:	2007018c 	.word	0x2007018c
   80fe0:	00080e81 	.word	0x00080e81

00080fe4 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80fe4:	4a13      	ldr	r2, [pc, #76]	; (81034 <prvInsertBlockIntoFreeList+0x50>)
   80fe6:	e000      	b.n	80fea <prvInsertBlockIntoFreeList+0x6>
   80fe8:	461a      	mov	r2, r3
   80fea:	6813      	ldr	r3, [r2, #0]
   80fec:	4283      	cmp	r3, r0
   80fee:	d3fb      	bcc.n	80fe8 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80ff0:	b430      	push	{r4, r5}
   80ff2:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80ff4:	6854      	ldr	r4, [r2, #4]
   80ff6:	1915      	adds	r5, r2, r4
   80ff8:	4285      	cmp	r5, r0
   80ffa:	d103      	bne.n	81004 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80ffc:	6868      	ldr	r0, [r5, #4]
   80ffe:	4404      	add	r4, r0
   81000:	6054      	str	r4, [r2, #4]
   81002:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   81004:	6842      	ldr	r2, [r0, #4]
   81006:	1884      	adds	r4, r0, r2
   81008:	429c      	cmp	r4, r3
   8100a:	d10c      	bne.n	81026 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8100c:	4b0a      	ldr	r3, [pc, #40]	; (81038 <prvInsertBlockIntoFreeList+0x54>)
   8100e:	681b      	ldr	r3, [r3, #0]
   81010:	429c      	cmp	r4, r3
   81012:	d006      	beq.n	81022 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   81014:	6863      	ldr	r3, [r4, #4]
   81016:	441a      	add	r2, r3
   81018:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8101a:	680b      	ldr	r3, [r1, #0]
   8101c:	681b      	ldr	r3, [r3, #0]
   8101e:	6003      	str	r3, [r0, #0]
   81020:	e002      	b.n	81028 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   81022:	6004      	str	r4, [r0, #0]
   81024:	e000      	b.n	81028 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   81026:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81028:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8102a:	bf18      	it	ne
   8102c:	6008      	strne	r0, [r1, #0]
	}
}
   8102e:	bc30      	pop	{r4, r5}
   81030:	4770      	bx	lr
   81032:	bf00      	nop
   81034:	20078bc4 	.word	0x20078bc4
   81038:	20078bc0 	.word	0x20078bc0

0008103c <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   8103c:	b538      	push	{r3, r4, r5, lr}
   8103e:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   81040:	4b29      	ldr	r3, [pc, #164]	; (810e8 <pvPortMalloc+0xac>)
   81042:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   81044:	4b29      	ldr	r3, [pc, #164]	; (810ec <pvPortMalloc+0xb0>)
   81046:	681b      	ldr	r3, [r3, #0]
   81048:	b99b      	cbnz	r3, 81072 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8104a:	4a29      	ldr	r2, [pc, #164]	; (810f0 <pvPortMalloc+0xb4>)
   8104c:	4b29      	ldr	r3, [pc, #164]	; (810f4 <pvPortMalloc+0xb8>)
   8104e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   81050:	2100      	movs	r1, #0
   81052:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   81054:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   81058:	1898      	adds	r0, r3, r2
   8105a:	4d24      	ldr	r5, [pc, #144]	; (810ec <pvPortMalloc+0xb0>)
   8105c:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   8105e:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   81062:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   81064:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   81066:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   81068:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8106a:	4a23      	ldr	r2, [pc, #140]	; (810f8 <pvPortMalloc+0xbc>)
   8106c:	6813      	ldr	r3, [r2, #0]
   8106e:	3b10      	subs	r3, #16
   81070:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   81072:	2c00      	cmp	r4, #0
   81074:	d02e      	beq.n	810d4 <pvPortMalloc+0x98>
		{
			xWantedSize += heapSTRUCT_SIZE;
   81076:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   8107a:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   8107e:	bf1c      	itt	ne
   81080:	f022 0207 	bicne.w	r2, r2, #7
   81084:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   81086:	1e51      	subs	r1, r2, #1
   81088:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   8108c:	4299      	cmp	r1, r3
   8108e:	d823      	bhi.n	810d8 <pvPortMalloc+0x9c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   81090:	4917      	ldr	r1, [pc, #92]	; (810f0 <pvPortMalloc+0xb4>)
   81092:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81094:	e001      	b.n	8109a <pvPortMalloc+0x5e>
   81096:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   81098:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8109a:	6863      	ldr	r3, [r4, #4]
   8109c:	429a      	cmp	r2, r3
   8109e:	d902      	bls.n	810a6 <pvPortMalloc+0x6a>
   810a0:	6823      	ldr	r3, [r4, #0]
   810a2:	2b00      	cmp	r3, #0
   810a4:	d1f7      	bne.n	81096 <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   810a6:	4b11      	ldr	r3, [pc, #68]	; (810ec <pvPortMalloc+0xb0>)
   810a8:	681b      	ldr	r3, [r3, #0]
   810aa:	429c      	cmp	r4, r3
   810ac:	d016      	beq.n	810dc <pvPortMalloc+0xa0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   810ae:	680d      	ldr	r5, [r1, #0]
   810b0:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   810b2:	6823      	ldr	r3, [r4, #0]
   810b4:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   810b6:	6863      	ldr	r3, [r4, #4]
   810b8:	1a9b      	subs	r3, r3, r2
   810ba:	2b20      	cmp	r3, #32
   810bc:	d904      	bls.n	810c8 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   810be:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   810c0:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   810c2:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   810c4:	4b0d      	ldr	r3, [pc, #52]	; (810fc <pvPortMalloc+0xc0>)
   810c6:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   810c8:	4a0b      	ldr	r2, [pc, #44]	; (810f8 <pvPortMalloc+0xbc>)
   810ca:	6813      	ldr	r3, [r2, #0]
   810cc:	6861      	ldr	r1, [r4, #4]
   810ce:	1a5b      	subs	r3, r3, r1
   810d0:	6013      	str	r3, [r2, #0]
   810d2:	e004      	b.n	810de <pvPortMalloc+0xa2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   810d4:	2500      	movs	r5, #0
   810d6:	e002      	b.n	810de <pvPortMalloc+0xa2>
   810d8:	2500      	movs	r5, #0
   810da:	e000      	b.n	810de <pvPortMalloc+0xa2>
   810dc:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   810de:	4b08      	ldr	r3, [pc, #32]	; (81100 <pvPortMalloc+0xc4>)
   810e0:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   810e2:	4628      	mov	r0, r5
   810e4:	bd38      	pop	{r3, r4, r5, pc}
   810e6:	bf00      	nop
   810e8:	00081961 	.word	0x00081961
   810ec:	20078bc0 	.word	0x20078bc0
   810f0:	20078bc4 	.word	0x20078bc4
   810f4:	20070bc0 	.word	0x20070bc0
   810f8:	20070190 	.word	0x20070190
   810fc:	00080fe5 	.word	0x00080fe5
   81100:	00081abd 	.word	0x00081abd

00081104 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   81104:	b180      	cbz	r0, 81128 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81106:	b510      	push	{r4, lr}
   81108:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   8110a:	4b08      	ldr	r3, [pc, #32]	; (8112c <vPortFree+0x28>)
   8110c:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   8110e:	4a08      	ldr	r2, [pc, #32]	; (81130 <vPortFree+0x2c>)
   81110:	6811      	ldr	r1, [r2, #0]
   81112:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81116:	440b      	add	r3, r1
   81118:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   8111a:	f1a4 0010 	sub.w	r0, r4, #16
   8111e:	4b05      	ldr	r3, [pc, #20]	; (81134 <vPortFree+0x30>)
   81120:	4798      	blx	r3
		}
		xTaskResumeAll();
   81122:	4b05      	ldr	r3, [pc, #20]	; (81138 <vPortFree+0x34>)
   81124:	4798      	blx	r3
   81126:	bd10      	pop	{r4, pc}
   81128:	4770      	bx	lr
   8112a:	bf00      	nop
   8112c:	00081961 	.word	0x00081961
   81130:	20070190 	.word	0x20070190
   81134:	00080fe5 	.word	0x00080fe5
   81138:	00081abd 	.word	0x00081abd

0008113c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   8113c:	b510      	push	{r4, lr}
   8113e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   81140:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81142:	b93b      	cbnz	r3, 81154 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81144:	6803      	ldr	r3, [r0, #0]
   81146:	bb1b      	cbnz	r3, 81190 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81148:	6840      	ldr	r0, [r0, #4]
   8114a:	4b13      	ldr	r3, [pc, #76]	; (81198 <prvCopyDataToQueue+0x5c>)
   8114c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8114e:	2300      	movs	r3, #0
   81150:	6063      	str	r3, [r4, #4]
   81152:	e01d      	b.n	81190 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   81154:	b96a      	cbnz	r2, 81172 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81156:	6880      	ldr	r0, [r0, #8]
   81158:	461a      	mov	r2, r3
   8115a:	4b10      	ldr	r3, [pc, #64]	; (8119c <prvCopyDataToQueue+0x60>)
   8115c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8115e:	68a2      	ldr	r2, [r4, #8]
   81160:	6c23      	ldr	r3, [r4, #64]	; 0x40
   81162:	4413      	add	r3, r2
   81164:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   81166:	6862      	ldr	r2, [r4, #4]
   81168:	4293      	cmp	r3, r2
   8116a:	d311      	bcc.n	81190 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   8116c:	6823      	ldr	r3, [r4, #0]
   8116e:	60a3      	str	r3, [r4, #8]
   81170:	e00e      	b.n	81190 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81172:	68c0      	ldr	r0, [r0, #12]
   81174:	461a      	mov	r2, r3
   81176:	4b09      	ldr	r3, [pc, #36]	; (8119c <prvCopyDataToQueue+0x60>)
   81178:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   8117a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   8117c:	425b      	negs	r3, r3
   8117e:	68e2      	ldr	r2, [r4, #12]
   81180:	441a      	add	r2, r3
   81182:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   81184:	6821      	ldr	r1, [r4, #0]
   81186:	428a      	cmp	r2, r1
   81188:	d202      	bcs.n	81190 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   8118a:	6862      	ldr	r2, [r4, #4]
   8118c:	4413      	add	r3, r2
   8118e:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   81190:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81192:	3301      	adds	r3, #1
   81194:	63a3      	str	r3, [r4, #56]	; 0x38
   81196:	bd10      	pop	{r4, pc}
   81198:	0008201d 	.word	0x0008201d
   8119c:	000830f9 	.word	0x000830f9

000811a0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   811a0:	b538      	push	{r3, r4, r5, lr}
   811a2:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   811a4:	6800      	ldr	r0, [r0, #0]
   811a6:	b158      	cbz	r0, 811c0 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   811a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   811aa:	68dc      	ldr	r4, [r3, #12]
   811ac:	4414      	add	r4, r2
   811ae:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   811b0:	685d      	ldr	r5, [r3, #4]
   811b2:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   811b4:	bf28      	it	cs
   811b6:	60d8      	strcs	r0, [r3, #12]
   811b8:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   811ba:	68d9      	ldr	r1, [r3, #12]
   811bc:	4b01      	ldr	r3, [pc, #4]	; (811c4 <prvCopyDataFromQueue+0x24>)
   811be:	4798      	blx	r3
   811c0:	bd38      	pop	{r3, r4, r5, pc}
   811c2:	bf00      	nop
   811c4:	000830f9 	.word	0x000830f9

000811c8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   811c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   811ca:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   811cc:	4b1e      	ldr	r3, [pc, #120]	; (81248 <prvUnlockQueue+0x80>)
   811ce:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   811d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   811d2:	2b00      	cmp	r3, #0
   811d4:	dd13      	ble.n	811fe <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   811d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   811d8:	b91b      	cbnz	r3, 811e2 <prvUnlockQueue+0x1a>
   811da:	e010      	b.n	811fe <prvUnlockQueue+0x36>
   811dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   811de:	b923      	cbnz	r3, 811ea <prvUnlockQueue+0x22>
   811e0:	e00d      	b.n	811fe <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   811e2:	f104 0624 	add.w	r6, r4, #36	; 0x24
   811e6:	4d19      	ldr	r5, [pc, #100]	; (8124c <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   811e8:	4f19      	ldr	r7, [pc, #100]	; (81250 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   811ea:	4630      	mov	r0, r6
   811ec:	47a8      	blx	r5
   811ee:	b100      	cbz	r0, 811f2 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   811f0:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   811f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   811f4:	3b01      	subs	r3, #1
   811f6:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   811f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   811fa:	2b00      	cmp	r3, #0
   811fc:	dcee      	bgt.n	811dc <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   811fe:	f04f 33ff 	mov.w	r3, #4294967295
   81202:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81204:	4b13      	ldr	r3, [pc, #76]	; (81254 <prvUnlockQueue+0x8c>)
   81206:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81208:	4b0f      	ldr	r3, [pc, #60]	; (81248 <prvUnlockQueue+0x80>)
   8120a:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8120c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8120e:	2b00      	cmp	r3, #0
   81210:	dd13      	ble.n	8123a <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81212:	6923      	ldr	r3, [r4, #16]
   81214:	b91b      	cbnz	r3, 8121e <prvUnlockQueue+0x56>
   81216:	e010      	b.n	8123a <prvUnlockQueue+0x72>
   81218:	6923      	ldr	r3, [r4, #16]
   8121a:	b923      	cbnz	r3, 81226 <prvUnlockQueue+0x5e>
   8121c:	e00d      	b.n	8123a <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8121e:	f104 0610 	add.w	r6, r4, #16
   81222:	4d0a      	ldr	r5, [pc, #40]	; (8124c <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   81224:	4f0a      	ldr	r7, [pc, #40]	; (81250 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81226:	4630      	mov	r0, r6
   81228:	47a8      	blx	r5
   8122a:	b100      	cbz	r0, 8122e <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   8122c:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   8122e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81230:	3b01      	subs	r3, #1
   81232:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81234:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81236:	2b00      	cmp	r3, #0
   81238:	dcee      	bgt.n	81218 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   8123a:	f04f 33ff 	mov.w	r3, #4294967295
   8123e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   81240:	4b04      	ldr	r3, [pc, #16]	; (81254 <prvUnlockQueue+0x8c>)
   81242:	4798      	blx	r3
   81244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81246:	bf00      	nop
   81248:	00080ef1 	.word	0x00080ef1
   8124c:	00081e2d 	.word	0x00081e2d
   81250:	00081f65 	.word	0x00081f65
   81254:	00080f11 	.word	0x00080f11

00081258 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81258:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   8125a:	b918      	cbnz	r0, 81264 <xQueueGenericReset+0xc>
   8125c:	4b17      	ldr	r3, [pc, #92]	; (812bc <xQueueGenericReset+0x64>)
   8125e:	4798      	blx	r3
   81260:	bf00      	nop
   81262:	e7fd      	b.n	81260 <xQueueGenericReset+0x8>
   81264:	460d      	mov	r5, r1
   81266:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   81268:	4b15      	ldr	r3, [pc, #84]	; (812c0 <xQueueGenericReset+0x68>)
   8126a:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   8126c:	6822      	ldr	r2, [r4, #0]
   8126e:	6c21      	ldr	r1, [r4, #64]	; 0x40
   81270:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81272:	fb03 f301 	mul.w	r3, r3, r1
   81276:	18d0      	adds	r0, r2, r3
   81278:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   8127a:	2000      	movs	r0, #0
   8127c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8127e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81280:	1a5b      	subs	r3, r3, r1
   81282:	4413      	add	r3, r2
   81284:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81286:	f04f 33ff 	mov.w	r3, #4294967295
   8128a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   8128c:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   8128e:	b955      	cbnz	r5, 812a6 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81290:	6923      	ldr	r3, [r4, #16]
   81292:	b17b      	cbz	r3, 812b4 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81294:	f104 0010 	add.w	r0, r4, #16
   81298:	4b0a      	ldr	r3, [pc, #40]	; (812c4 <xQueueGenericReset+0x6c>)
   8129a:	4798      	blx	r3
   8129c:	2801      	cmp	r0, #1
   8129e:	d109      	bne.n	812b4 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   812a0:	4b09      	ldr	r3, [pc, #36]	; (812c8 <xQueueGenericReset+0x70>)
   812a2:	4798      	blx	r3
   812a4:	e006      	b.n	812b4 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   812a6:	f104 0010 	add.w	r0, r4, #16
   812aa:	4d08      	ldr	r5, [pc, #32]	; (812cc <xQueueGenericReset+0x74>)
   812ac:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   812ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
   812b2:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   812b4:	4b06      	ldr	r3, [pc, #24]	; (812d0 <xQueueGenericReset+0x78>)
   812b6:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   812b8:	2001      	movs	r0, #1
   812ba:	bd38      	pop	{r3, r4, r5, pc}
   812bc:	00080ee1 	.word	0x00080ee1
   812c0:	00080ef1 	.word	0x00080ef1
   812c4:	00081e2d 	.word	0x00081e2d
   812c8:	00080ed1 	.word	0x00080ed1
   812cc:	00080dd9 	.word	0x00080dd9
   812d0:	00080f11 	.word	0x00080f11

000812d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   812d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   812d6:	b1a0      	cbz	r0, 81302 <xQueueGenericCreate+0x2e>
   812d8:	460d      	mov	r5, r1
   812da:	4617      	mov	r7, r2
   812dc:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   812de:	2050      	movs	r0, #80	; 0x50
   812e0:	4b0e      	ldr	r3, [pc, #56]	; (8131c <xQueueGenericCreate+0x48>)
   812e2:	4798      	blx	r3
		if( pxNewQueue != NULL )
   812e4:	4604      	mov	r4, r0
   812e6:	b160      	cbz	r0, 81302 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   812e8:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   812ec:	3001      	adds	r0, #1
   812ee:	4b0b      	ldr	r3, [pc, #44]	; (8131c <xQueueGenericCreate+0x48>)
   812f0:	4798      	blx	r3
   812f2:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   812f4:	b940      	cbnz	r0, 81308 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   812f6:	4620      	mov	r0, r4
   812f8:	4b09      	ldr	r3, [pc, #36]	; (81320 <xQueueGenericCreate+0x4c>)
   812fa:	4798      	blx	r3
   812fc:	e001      	b.n	81302 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   812fe:	bf00      	nop
   81300:	e7fd      	b.n	812fe <xQueueGenericCreate+0x2a>
   81302:	4b08      	ldr	r3, [pc, #32]	; (81324 <xQueueGenericCreate+0x50>)
   81304:	4798      	blx	r3
   81306:	e7fa      	b.n	812fe <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81308:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   8130a:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   8130c:	4620      	mov	r0, r4
   8130e:	2101      	movs	r1, #1
   81310:	4b05      	ldr	r3, [pc, #20]	; (81328 <xQueueGenericCreate+0x54>)
   81312:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81314:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81318:	4620      	mov	r0, r4
   8131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8131c:	0008103d 	.word	0x0008103d
   81320:	00081105 	.word	0x00081105
   81324:	00080ee1 	.word	0x00080ee1
   81328:	00081259 	.word	0x00081259

0008132c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   8132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81330:	b085      	sub	sp, #20
   81332:	9300      	str	r3, [sp, #0]
   81334:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81338:	b918      	cbnz	r0, 81342 <xQueueGenericSend+0x16>
   8133a:	4b3a      	ldr	r3, [pc, #232]	; (81424 <xQueueGenericSend+0xf8>)
   8133c:	4798      	blx	r3
   8133e:	bf00      	nop
   81340:	e7fd      	b.n	8133e <xQueueGenericSend+0x12>
   81342:	468a      	mov	sl, r1
   81344:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81346:	b929      	cbnz	r1, 81354 <xQueueGenericSend+0x28>
   81348:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8134a:	b12b      	cbz	r3, 81358 <xQueueGenericSend+0x2c>
   8134c:	4b35      	ldr	r3, [pc, #212]	; (81424 <xQueueGenericSend+0xf8>)
   8134e:	4798      	blx	r3
   81350:	bf00      	nop
   81352:	e7fd      	b.n	81350 <xQueueGenericSend+0x24>
   81354:	2700      	movs	r7, #0
   81356:	e000      	b.n	8135a <xQueueGenericSend+0x2e>
   81358:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8135a:	4e33      	ldr	r6, [pc, #204]	; (81428 <xQueueGenericSend+0xfc>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8135c:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 81450 <xQueueGenericSend+0x124>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81360:	4d32      	ldr	r5, [pc, #200]	; (8142c <xQueueGenericSend+0x100>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81362:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81364:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81366:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81368:	429a      	cmp	r2, r3
   8136a:	d212      	bcs.n	81392 <xQueueGenericSend+0x66>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8136c:	4620      	mov	r0, r4
   8136e:	4651      	mov	r1, sl
   81370:	9a00      	ldr	r2, [sp, #0]
   81372:	4b2f      	ldr	r3, [pc, #188]	; (81430 <xQueueGenericSend+0x104>)
   81374:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81376:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81378:	b13b      	cbz	r3, 8138a <xQueueGenericSend+0x5e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   8137a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8137e:	4b2d      	ldr	r3, [pc, #180]	; (81434 <xQueueGenericSend+0x108>)
   81380:	4798      	blx	r3
   81382:	2801      	cmp	r0, #1
   81384:	d101      	bne.n	8138a <xQueueGenericSend+0x5e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   81386:	4b2c      	ldr	r3, [pc, #176]	; (81438 <xQueueGenericSend+0x10c>)
   81388:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   8138a:	4b28      	ldr	r3, [pc, #160]	; (8142c <xQueueGenericSend+0x100>)
   8138c:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   8138e:	2001      	movs	r0, #1
   81390:	e045      	b.n	8141e <xQueueGenericSend+0xf2>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81392:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81396:	b91b      	cbnz	r3, 813a0 <xQueueGenericSend+0x74>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81398:	4b24      	ldr	r3, [pc, #144]	; (8142c <xQueueGenericSend+0x100>)
   8139a:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   8139c:	2000      	movs	r0, #0
   8139e:	e03e      	b.n	8141e <xQueueGenericSend+0xf2>
				}
				else if( xEntryTimeSet == pdFALSE )
   813a0:	b917      	cbnz	r7, 813a8 <xQueueGenericSend+0x7c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   813a2:	a802      	add	r0, sp, #8
   813a4:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   813a6:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   813a8:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   813aa:	4b24      	ldr	r3, [pc, #144]	; (8143c <xQueueGenericSend+0x110>)
   813ac:	4798      	blx	r3
		prvLockQueue( pxQueue );
   813ae:	47b0      	blx	r6
   813b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   813b2:	f1b3 3fff 	cmp.w	r3, #4294967295
   813b6:	bf04      	itt	eq
   813b8:	2300      	moveq	r3, #0
   813ba:	6463      	streq	r3, [r4, #68]	; 0x44
   813bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   813be:	f1b3 3fff 	cmp.w	r3, #4294967295
   813c2:	bf04      	itt	eq
   813c4:	2300      	moveq	r3, #0
   813c6:	64a3      	streq	r3, [r4, #72]	; 0x48
   813c8:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   813ca:	a802      	add	r0, sp, #8
   813cc:	f10d 0106 	add.w	r1, sp, #6
   813d0:	4b1b      	ldr	r3, [pc, #108]	; (81440 <xQueueGenericSend+0x114>)
   813d2:	4798      	blx	r3
   813d4:	b9e8      	cbnz	r0, 81412 <xQueueGenericSend+0xe6>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   813d6:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   813d8:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   813dc:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   813e0:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   813e2:	45c1      	cmp	r9, r8
   813e4:	d10f      	bne.n	81406 <xQueueGenericSend+0xda>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   813e6:	f104 0010 	add.w	r0, r4, #16
   813ea:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   813ee:	4b15      	ldr	r3, [pc, #84]	; (81444 <xQueueGenericSend+0x118>)
   813f0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   813f2:	4620      	mov	r0, r4
   813f4:	4b14      	ldr	r3, [pc, #80]	; (81448 <xQueueGenericSend+0x11c>)
   813f6:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   813f8:	4b14      	ldr	r3, [pc, #80]	; (8144c <xQueueGenericSend+0x120>)
   813fa:	4798      	blx	r3
   813fc:	2800      	cmp	r0, #0
   813fe:	d1b0      	bne.n	81362 <xQueueGenericSend+0x36>
				{
					portYIELD_WITHIN_API();
   81400:	4b0d      	ldr	r3, [pc, #52]	; (81438 <xQueueGenericSend+0x10c>)
   81402:	4798      	blx	r3
   81404:	e7ad      	b.n	81362 <xQueueGenericSend+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81406:	4620      	mov	r0, r4
   81408:	4b0f      	ldr	r3, [pc, #60]	; (81448 <xQueueGenericSend+0x11c>)
   8140a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8140c:	4b0f      	ldr	r3, [pc, #60]	; (8144c <xQueueGenericSend+0x120>)
   8140e:	4798      	blx	r3
   81410:	e7a7      	b.n	81362 <xQueueGenericSend+0x36>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81412:	4620      	mov	r0, r4
   81414:	4b0c      	ldr	r3, [pc, #48]	; (81448 <xQueueGenericSend+0x11c>)
   81416:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81418:	4b0c      	ldr	r3, [pc, #48]	; (8144c <xQueueGenericSend+0x120>)
   8141a:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   8141c:	2000      	movs	r0, #0
		}
	}
}
   8141e:	b005      	add	sp, #20
   81420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81424:	00080ee1 	.word	0x00080ee1
   81428:	00080ef1 	.word	0x00080ef1
   8142c:	00080f11 	.word	0x00080f11
   81430:	0008113d 	.word	0x0008113d
   81434:	00081e2d 	.word	0x00081e2d
   81438:	00080ed1 	.word	0x00080ed1
   8143c:	00081961 	.word	0x00081961
   81440:	00081ed9 	.word	0x00081ed9
   81444:	00081d81 	.word	0x00081d81
   81448:	000811c9 	.word	0x000811c9
   8144c:	00081abd 	.word	0x00081abd
   81450:	00081eb1 	.word	0x00081eb1

00081454 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   81454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   81458:	b918      	cbnz	r0, 81462 <xQueueGenericSendFromISR+0xe>
   8145a:	4b1e      	ldr	r3, [pc, #120]	; (814d4 <xQueueGenericSendFromISR+0x80>)
   8145c:	4798      	blx	r3
   8145e:	bf00      	nop
   81460:	e7fd      	b.n	8145e <xQueueGenericSendFromISR+0xa>
   81462:	460e      	mov	r6, r1
   81464:	4615      	mov	r5, r2
   81466:	4698      	mov	r8, r3
   81468:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8146a:	b929      	cbnz	r1, 81478 <xQueueGenericSendFromISR+0x24>
   8146c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8146e:	b11b      	cbz	r3, 81478 <xQueueGenericSendFromISR+0x24>
   81470:	4b18      	ldr	r3, [pc, #96]	; (814d4 <xQueueGenericSendFromISR+0x80>)
   81472:	4798      	blx	r3
   81474:	bf00      	nop
   81476:	e7fd      	b.n	81474 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81478:	4b16      	ldr	r3, [pc, #88]	; (814d4 <xQueueGenericSendFromISR+0x80>)
   8147a:	4798      	blx	r3
   8147c:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   8147e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81480:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81482:	429a      	cmp	r2, r3
   81484:	d218      	bcs.n	814b8 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81486:	4620      	mov	r0, r4
   81488:	4631      	mov	r1, r6
   8148a:	4642      	mov	r2, r8
   8148c:	4b12      	ldr	r3, [pc, #72]	; (814d8 <xQueueGenericSendFromISR+0x84>)
   8148e:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81490:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81492:	f1b3 3fff 	cmp.w	r3, #4294967295
   81496:	d10a      	bne.n	814ae <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81498:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8149a:	b17b      	cbz	r3, 814bc <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8149c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   814a0:	4b0e      	ldr	r3, [pc, #56]	; (814dc <xQueueGenericSendFromISR+0x88>)
   814a2:	4798      	blx	r3
   814a4:	b160      	cbz	r0, 814c0 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   814a6:	b16d      	cbz	r5, 814c4 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   814a8:	2401      	movs	r4, #1
   814aa:	602c      	str	r4, [r5, #0]
   814ac:	e00b      	b.n	814c6 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   814ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   814b0:	3301      	adds	r3, #1
   814b2:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   814b4:	2401      	movs	r4, #1
   814b6:	e006      	b.n	814c6 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   814b8:	2400      	movs	r4, #0
   814ba:	e004      	b.n	814c6 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   814bc:	2401      	movs	r4, #1
   814be:	e002      	b.n	814c6 <xQueueGenericSendFromISR+0x72>
   814c0:	2401      	movs	r4, #1
   814c2:	e000      	b.n	814c6 <xQueueGenericSendFromISR+0x72>
   814c4:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   814c6:	4638      	mov	r0, r7
   814c8:	4b05      	ldr	r3, [pc, #20]	; (814e0 <xQueueGenericSendFromISR+0x8c>)
   814ca:	4798      	blx	r3

	return xReturn;
}
   814cc:	4620      	mov	r0, r4
   814ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   814d2:	bf00      	nop
   814d4:	00080ee1 	.word	0x00080ee1
   814d8:	0008113d 	.word	0x0008113d
   814dc:	00081e2d 	.word	0x00081e2d
   814e0:	00080f09 	.word	0x00080f09

000814e4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   814e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814e8:	b085      	sub	sp, #20
   814ea:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   814ee:	b918      	cbnz	r0, 814f8 <xQueueGenericReceive+0x14>
   814f0:	4b47      	ldr	r3, [pc, #284]	; (81610 <xQueueGenericReceive+0x12c>)
   814f2:	4798      	blx	r3
   814f4:	bf00      	nop
   814f6:	e7fd      	b.n	814f4 <xQueueGenericReceive+0x10>
   814f8:	4689      	mov	r9, r1
   814fa:	469a      	mov	sl, r3
   814fc:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   814fe:	b929      	cbnz	r1, 8150c <xQueueGenericReceive+0x28>
   81500:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81502:	b12b      	cbz	r3, 81510 <xQueueGenericReceive+0x2c>
   81504:	4b42      	ldr	r3, [pc, #264]	; (81610 <xQueueGenericReceive+0x12c>)
   81506:	4798      	blx	r3
   81508:	bf00      	nop
   8150a:	e7fd      	b.n	81508 <xQueueGenericReceive+0x24>
   8150c:	2700      	movs	r7, #0
   8150e:	e000      	b.n	81512 <xQueueGenericReceive+0x2e>
   81510:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81512:	4e40      	ldr	r6, [pc, #256]	; (81614 <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81514:	f8df b12c 	ldr.w	fp, [pc, #300]	; 81644 <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81518:	4d3f      	ldr	r5, [pc, #252]	; (81618 <xQueueGenericReceive+0x134>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8151a:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   8151c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8151e:	b343      	cbz	r3, 81572 <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81520:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81522:	4620      	mov	r0, r4
   81524:	4649      	mov	r1, r9
   81526:	4b3d      	ldr	r3, [pc, #244]	; (8161c <xQueueGenericReceive+0x138>)
   81528:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   8152a:	f1ba 0f00 	cmp.w	sl, #0
   8152e:	d112      	bne.n	81556 <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81530:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81532:	3b01      	subs	r3, #1
   81534:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81536:	6823      	ldr	r3, [r4, #0]
   81538:	b913      	cbnz	r3, 81540 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   8153a:	4b39      	ldr	r3, [pc, #228]	; (81620 <xQueueGenericReceive+0x13c>)
   8153c:	4798      	blx	r3
   8153e:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81540:	6923      	ldr	r3, [r4, #16]
   81542:	b193      	cbz	r3, 8156a <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81544:	f104 0010 	add.w	r0, r4, #16
   81548:	4b36      	ldr	r3, [pc, #216]	; (81624 <xQueueGenericReceive+0x140>)
   8154a:	4798      	blx	r3
   8154c:	2801      	cmp	r0, #1
   8154e:	d10c      	bne.n	8156a <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   81550:	4b35      	ldr	r3, [pc, #212]	; (81628 <xQueueGenericReceive+0x144>)
   81552:	4798      	blx	r3
   81554:	e009      	b.n	8156a <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81556:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81558:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8155a:	b133      	cbz	r3, 8156a <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8155c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81560:	4b30      	ldr	r3, [pc, #192]	; (81624 <xQueueGenericReceive+0x140>)
   81562:	4798      	blx	r3
   81564:	b108      	cbz	r0, 8156a <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   81566:	4b30      	ldr	r3, [pc, #192]	; (81628 <xQueueGenericReceive+0x144>)
   81568:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   8156a:	4b2b      	ldr	r3, [pc, #172]	; (81618 <xQueueGenericReceive+0x134>)
   8156c:	4798      	blx	r3
				return pdPASS;
   8156e:	2001      	movs	r0, #1
   81570:	e04b      	b.n	8160a <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81572:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81576:	b91b      	cbnz	r3, 81580 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81578:	4b27      	ldr	r3, [pc, #156]	; (81618 <xQueueGenericReceive+0x134>)
   8157a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   8157c:	2000      	movs	r0, #0
   8157e:	e044      	b.n	8160a <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   81580:	b917      	cbnz	r7, 81588 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81582:	a802      	add	r0, sp, #8
   81584:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81586:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81588:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8158a:	4b28      	ldr	r3, [pc, #160]	; (8162c <xQueueGenericReceive+0x148>)
   8158c:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8158e:	47b0      	blx	r6
   81590:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81592:	f1b3 3fff 	cmp.w	r3, #4294967295
   81596:	bf04      	itt	eq
   81598:	2300      	moveq	r3, #0
   8159a:	6463      	streq	r3, [r4, #68]	; 0x44
   8159c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8159e:	f1b3 3fff 	cmp.w	r3, #4294967295
   815a2:	bf04      	itt	eq
   815a4:	2300      	moveq	r3, #0
   815a6:	64a3      	streq	r3, [r4, #72]	; 0x48
   815a8:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   815aa:	a802      	add	r0, sp, #8
   815ac:	f10d 0106 	add.w	r1, sp, #6
   815b0:	4b1f      	ldr	r3, [pc, #124]	; (81630 <xQueueGenericReceive+0x14c>)
   815b2:	4798      	blx	r3
   815b4:	bb18      	cbnz	r0, 815fe <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   815b6:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   815b8:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   815bc:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   815be:	f1b8 0f00 	cmp.w	r8, #0
   815c2:	d116      	bne.n	815f2 <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   815c4:	6823      	ldr	r3, [r4, #0]
   815c6:	b923      	cbnz	r3, 815d2 <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   815c8:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   815ca:	6860      	ldr	r0, [r4, #4]
   815cc:	4b19      	ldr	r3, [pc, #100]	; (81634 <xQueueGenericReceive+0x150>)
   815ce:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   815d0:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   815d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   815d6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   815da:	4b17      	ldr	r3, [pc, #92]	; (81638 <xQueueGenericReceive+0x154>)
   815dc:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   815de:	4620      	mov	r0, r4
   815e0:	4b16      	ldr	r3, [pc, #88]	; (8163c <xQueueGenericReceive+0x158>)
   815e2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   815e4:	4b16      	ldr	r3, [pc, #88]	; (81640 <xQueueGenericReceive+0x15c>)
   815e6:	4798      	blx	r3
   815e8:	2800      	cmp	r0, #0
   815ea:	d196      	bne.n	8151a <xQueueGenericReceive+0x36>
				{
					portYIELD_WITHIN_API();
   815ec:	4b0e      	ldr	r3, [pc, #56]	; (81628 <xQueueGenericReceive+0x144>)
   815ee:	4798      	blx	r3
   815f0:	e793      	b.n	8151a <xQueueGenericReceive+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   815f2:	4620      	mov	r0, r4
   815f4:	4b11      	ldr	r3, [pc, #68]	; (8163c <xQueueGenericReceive+0x158>)
   815f6:	4798      	blx	r3
				( void ) xTaskResumeAll();
   815f8:	4b11      	ldr	r3, [pc, #68]	; (81640 <xQueueGenericReceive+0x15c>)
   815fa:	4798      	blx	r3
   815fc:	e78d      	b.n	8151a <xQueueGenericReceive+0x36>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   815fe:	4620      	mov	r0, r4
   81600:	4b0e      	ldr	r3, [pc, #56]	; (8163c <xQueueGenericReceive+0x158>)
   81602:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81604:	4b0e      	ldr	r3, [pc, #56]	; (81640 <xQueueGenericReceive+0x15c>)
   81606:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81608:	2000      	movs	r0, #0
		}
	}
}
   8160a:	b005      	add	sp, #20
   8160c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81610:	00080ee1 	.word	0x00080ee1
   81614:	00080ef1 	.word	0x00080ef1
   81618:	00080f11 	.word	0x00080f11
   8161c:	000811a1 	.word	0x000811a1
   81620:	00081f71 	.word	0x00081f71
   81624:	00081e2d 	.word	0x00081e2d
   81628:	00080ed1 	.word	0x00080ed1
   8162c:	00081961 	.word	0x00081961
   81630:	00081ed9 	.word	0x00081ed9
   81634:	00081f9d 	.word	0x00081f9d
   81638:	00081d81 	.word	0x00081d81
   8163c:	000811c9 	.word	0x000811c9
   81640:	00081abd 	.word	0x00081abd
   81644:	00081eb1 	.word	0x00081eb1

00081648 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81648:	b538      	push	{r3, r4, r5, lr}
   8164a:	4604      	mov	r4, r0
   8164c:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   8164e:	4b0d      	ldr	r3, [pc, #52]	; (81684 <vQueueWaitForMessageRestricted+0x3c>)
   81650:	4798      	blx	r3
   81652:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81654:	f1b3 3fff 	cmp.w	r3, #4294967295
   81658:	bf04      	itt	eq
   8165a:	2300      	moveq	r3, #0
   8165c:	6463      	streq	r3, [r4, #68]	; 0x44
   8165e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81660:	f1b3 3fff 	cmp.w	r3, #4294967295
   81664:	bf04      	itt	eq
   81666:	2300      	moveq	r3, #0
   81668:	64a3      	streq	r3, [r4, #72]	; 0x48
   8166a:	4b07      	ldr	r3, [pc, #28]	; (81688 <vQueueWaitForMessageRestricted+0x40>)
   8166c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   8166e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81670:	b923      	cbnz	r3, 8167c <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81672:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81676:	4629      	mov	r1, r5
   81678:	4b04      	ldr	r3, [pc, #16]	; (8168c <vQueueWaitForMessageRestricted+0x44>)
   8167a:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   8167c:	4620      	mov	r0, r4
   8167e:	4b04      	ldr	r3, [pc, #16]	; (81690 <vQueueWaitForMessageRestricted+0x48>)
   81680:	4798      	blx	r3
   81682:	bd38      	pop	{r3, r4, r5, pc}
   81684:	00080ef1 	.word	0x00080ef1
   81688:	00080f11 	.word	0x00080f11
   8168c:	00081de5 	.word	0x00081de5
   81690:	000811c9 	.word	0x000811c9

00081694 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   81694:	b510      	push	{r4, lr}
   81696:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81698:	4b0f      	ldr	r3, [pc, #60]	; (816d8 <prvAddCurrentTaskToDelayedList+0x44>)
   8169a:	681b      	ldr	r3, [r3, #0]
   8169c:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   8169e:	4b0f      	ldr	r3, [pc, #60]	; (816dc <prvAddCurrentTaskToDelayedList+0x48>)
   816a0:	881b      	ldrh	r3, [r3, #0]
   816a2:	b29b      	uxth	r3, r3
   816a4:	4298      	cmp	r0, r3
   816a6:	d207      	bcs.n	816b8 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   816a8:	4b0d      	ldr	r3, [pc, #52]	; (816e0 <prvAddCurrentTaskToDelayedList+0x4c>)
   816aa:	6818      	ldr	r0, [r3, #0]
   816ac:	4b0a      	ldr	r3, [pc, #40]	; (816d8 <prvAddCurrentTaskToDelayedList+0x44>)
   816ae:	6819      	ldr	r1, [r3, #0]
   816b0:	3104      	adds	r1, #4
   816b2:	4b0c      	ldr	r3, [pc, #48]	; (816e4 <prvAddCurrentTaskToDelayedList+0x50>)
   816b4:	4798      	blx	r3
   816b6:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   816b8:	4b0b      	ldr	r3, [pc, #44]	; (816e8 <prvAddCurrentTaskToDelayedList+0x54>)
   816ba:	6818      	ldr	r0, [r3, #0]
   816bc:	4b06      	ldr	r3, [pc, #24]	; (816d8 <prvAddCurrentTaskToDelayedList+0x44>)
   816be:	6819      	ldr	r1, [r3, #0]
   816c0:	3104      	adds	r1, #4
   816c2:	4b08      	ldr	r3, [pc, #32]	; (816e4 <prvAddCurrentTaskToDelayedList+0x50>)
   816c4:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   816c6:	4b09      	ldr	r3, [pc, #36]	; (816ec <prvAddCurrentTaskToDelayedList+0x58>)
   816c8:	881b      	ldrh	r3, [r3, #0]
   816ca:	b29b      	uxth	r3, r3
   816cc:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   816ce:	bf3c      	itt	cc
   816d0:	4b06      	ldrcc	r3, [pc, #24]	; (816ec <prvAddCurrentTaskToDelayedList+0x58>)
   816d2:	801c      	strhcc	r4, [r3, #0]
   816d4:	bd10      	pop	{r4, pc}
   816d6:	bf00      	nop
   816d8:	20078cfc 	.word	0x20078cfc
   816dc:	20078d18 	.word	0x20078d18
   816e0:	20078d1c 	.word	0x20078d1c
   816e4:	00080e15 	.word	0x00080e15
   816e8:	20078be4 	.word	0x20078be4
   816ec:	20070194 	.word	0x20070194

000816f0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   816f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   816f4:	b083      	sub	sp, #12
   816f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   816f8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   816fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   816fe:	9001      	str	r0, [sp, #4]
   81700:	b918      	cbnz	r0, 8170a <xTaskGenericCreate+0x1a>
   81702:	4b62      	ldr	r3, [pc, #392]	; (8188c <xTaskGenericCreate+0x19c>)
   81704:	4798      	blx	r3
   81706:	bf00      	nop
   81708:	e7fd      	b.n	81706 <xTaskGenericCreate+0x16>
   8170a:	4689      	mov	r9, r1
   8170c:	4615      	mov	r5, r2
   8170e:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81710:	2f09      	cmp	r7, #9
   81712:	d903      	bls.n	8171c <xTaskGenericCreate+0x2c>
   81714:	4b5d      	ldr	r3, [pc, #372]	; (8188c <xTaskGenericCreate+0x19c>)
   81716:	4798      	blx	r3
   81718:	bf00      	nop
   8171a:	e7fd      	b.n	81718 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   8171c:	2050      	movs	r0, #80	; 0x50
   8171e:	4b5c      	ldr	r3, [pc, #368]	; (81890 <xTaskGenericCreate+0x1a0>)
   81720:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81722:	4604      	mov	r4, r0
   81724:	2800      	cmp	r0, #0
   81726:	f000 80ab 	beq.w	81880 <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8172a:	2e00      	cmp	r6, #0
   8172c:	f040 80a5 	bne.w	8187a <xTaskGenericCreate+0x18a>
   81730:	00a8      	lsls	r0, r5, #2
   81732:	4b57      	ldr	r3, [pc, #348]	; (81890 <xTaskGenericCreate+0x1a0>)
   81734:	4798      	blx	r3
   81736:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81738:	b918      	cbnz	r0, 81742 <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   8173a:	4620      	mov	r0, r4
   8173c:	4b55      	ldr	r3, [pc, #340]	; (81894 <xTaskGenericCreate+0x1a4>)
   8173e:	4798      	blx	r3
   81740:	e09e      	b.n	81880 <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81742:	21a5      	movs	r1, #165	; 0xa5
   81744:	00aa      	lsls	r2, r5, #2
   81746:	4b54      	ldr	r3, [pc, #336]	; (81898 <xTaskGenericCreate+0x1a8>)
   81748:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   8174a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   8174e:	3d01      	subs	r5, #1
   81750:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81752:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81756:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   8175a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   8175e:	4649      	mov	r1, r9
   81760:	2210      	movs	r2, #16
   81762:	4b4e      	ldr	r3, [pc, #312]	; (8189c <xTaskGenericCreate+0x1ac>)
   81764:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81766:	2300      	movs	r3, #0
   81768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   8176c:	463e      	mov	r6, r7
   8176e:	2f09      	cmp	r7, #9
   81770:	bf28      	it	cs
   81772:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81774:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81776:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81778:	f104 0904 	add.w	r9, r4, #4
   8177c:	4648      	mov	r0, r9
   8177e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 818ec <xTaskGenericCreate+0x1fc>
   81782:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81784:	f104 0018 	add.w	r0, r4, #24
   81788:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   8178a:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   8178c:	f1c6 060a 	rsb	r6, r6, #10
   81790:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   81792:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81794:	4628      	mov	r0, r5
   81796:	9901      	ldr	r1, [sp, #4]
   81798:	465a      	mov	r2, fp
   8179a:	4b41      	ldr	r3, [pc, #260]	; (818a0 <xTaskGenericCreate+0x1b0>)
   8179c:	4798      	blx	r3
   8179e:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   817a0:	f010 0f07 	tst.w	r0, #7
   817a4:	d003      	beq.n	817ae <xTaskGenericCreate+0xbe>
   817a6:	4b39      	ldr	r3, [pc, #228]	; (8188c <xTaskGenericCreate+0x19c>)
   817a8:	4798      	blx	r3
   817aa:	bf00      	nop
   817ac:	e7fd      	b.n	817aa <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
   817ae:	f1b8 0f00 	cmp.w	r8, #0
   817b2:	d001      	beq.n	817b8 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   817b4:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   817b8:	4b3a      	ldr	r3, [pc, #232]	; (818a4 <xTaskGenericCreate+0x1b4>)
   817ba:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   817bc:	4a3a      	ldr	r2, [pc, #232]	; (818a8 <xTaskGenericCreate+0x1b8>)
   817be:	6813      	ldr	r3, [r2, #0]
   817c0:	3301      	adds	r3, #1
   817c2:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   817c4:	4b39      	ldr	r3, [pc, #228]	; (818ac <xTaskGenericCreate+0x1bc>)
   817c6:	681b      	ldr	r3, [r3, #0]
   817c8:	bb0b      	cbnz	r3, 8180e <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   817ca:	4b38      	ldr	r3, [pc, #224]	; (818ac <xTaskGenericCreate+0x1bc>)
   817cc:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   817ce:	6813      	ldr	r3, [r2, #0]
   817d0:	2b01      	cmp	r3, #1
   817d2:	d126      	bne.n	81822 <xTaskGenericCreate+0x132>
   817d4:	4d36      	ldr	r5, [pc, #216]	; (818b0 <xTaskGenericCreate+0x1c0>)
   817d6:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   817da:	4e36      	ldr	r6, [pc, #216]	; (818b4 <xTaskGenericCreate+0x1c4>)
   817dc:	4628      	mov	r0, r5
   817de:	47b0      	blx	r6
   817e0:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   817e2:	4545      	cmp	r5, r8
   817e4:	d1fa      	bne.n	817dc <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   817e6:	f8df 8108 	ldr.w	r8, [pc, #264]	; 818f0 <xTaskGenericCreate+0x200>
   817ea:	4640      	mov	r0, r8
   817ec:	4d31      	ldr	r5, [pc, #196]	; (818b4 <xTaskGenericCreate+0x1c4>)
   817ee:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   817f0:	4e31      	ldr	r6, [pc, #196]	; (818b8 <xTaskGenericCreate+0x1c8>)
   817f2:	4630      	mov	r0, r6
   817f4:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   817f6:	4831      	ldr	r0, [pc, #196]	; (818bc <xTaskGenericCreate+0x1cc>)
   817f8:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   817fa:	4831      	ldr	r0, [pc, #196]	; (818c0 <xTaskGenericCreate+0x1d0>)
   817fc:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   817fe:	4831      	ldr	r0, [pc, #196]	; (818c4 <xTaskGenericCreate+0x1d4>)
   81800:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   81802:	4b31      	ldr	r3, [pc, #196]	; (818c8 <xTaskGenericCreate+0x1d8>)
   81804:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81808:	4b30      	ldr	r3, [pc, #192]	; (818cc <xTaskGenericCreate+0x1dc>)
   8180a:	601e      	str	r6, [r3, #0]
   8180c:	e009      	b.n	81822 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   8180e:	4b30      	ldr	r3, [pc, #192]	; (818d0 <xTaskGenericCreate+0x1e0>)
   81810:	681b      	ldr	r3, [r3, #0]
   81812:	b933      	cbnz	r3, 81822 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81814:	4b25      	ldr	r3, [pc, #148]	; (818ac <xTaskGenericCreate+0x1bc>)
   81816:	681b      	ldr	r3, [r3, #0]
   81818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8181a:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   8181c:	bf24      	itt	cs
   8181e:	4b23      	ldrcs	r3, [pc, #140]	; (818ac <xTaskGenericCreate+0x1bc>)
   81820:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81822:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81824:	4b2b      	ldr	r3, [pc, #172]	; (818d4 <xTaskGenericCreate+0x1e4>)
   81826:	681b      	ldr	r3, [r3, #0]
   81828:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   8182a:	bf84      	itt	hi
   8182c:	4b29      	ldrhi	r3, [pc, #164]	; (818d4 <xTaskGenericCreate+0x1e4>)
   8182e:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81830:	4a29      	ldr	r2, [pc, #164]	; (818d8 <xTaskGenericCreate+0x1e8>)
   81832:	6813      	ldr	r3, [r2, #0]
   81834:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   81836:	3301      	adds	r3, #1
   81838:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   8183a:	4b28      	ldr	r3, [pc, #160]	; (818dc <xTaskGenericCreate+0x1ec>)
   8183c:	681b      	ldr	r3, [r3, #0]
   8183e:	4298      	cmp	r0, r3
   81840:	bf84      	itt	hi
   81842:	4b26      	ldrhi	r3, [pc, #152]	; (818dc <xTaskGenericCreate+0x1ec>)
   81844:	6018      	strhi	r0, [r3, #0]
   81846:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8184a:	4b19      	ldr	r3, [pc, #100]	; (818b0 <xTaskGenericCreate+0x1c0>)
   8184c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81850:	4649      	mov	r1, r9
   81852:	4b23      	ldr	r3, [pc, #140]	; (818e0 <xTaskGenericCreate+0x1f0>)
   81854:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81856:	4b23      	ldr	r3, [pc, #140]	; (818e4 <xTaskGenericCreate+0x1f4>)
   81858:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   8185a:	4b1d      	ldr	r3, [pc, #116]	; (818d0 <xTaskGenericCreate+0x1e0>)
   8185c:	681b      	ldr	r3, [r3, #0]
   8185e:	b143      	cbz	r3, 81872 <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81860:	4b12      	ldr	r3, [pc, #72]	; (818ac <xTaskGenericCreate+0x1bc>)
   81862:	681b      	ldr	r3, [r3, #0]
   81864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81866:	429f      	cmp	r7, r3
   81868:	d905      	bls.n	81876 <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
   8186a:	4b1f      	ldr	r3, [pc, #124]	; (818e8 <xTaskGenericCreate+0x1f8>)
   8186c:	4798      	blx	r3
   8186e:	2001      	movs	r0, #1
   81870:	e008      	b.n	81884 <xTaskGenericCreate+0x194>
   81872:	2001      	movs	r0, #1
   81874:	e006      	b.n	81884 <xTaskGenericCreate+0x194>
   81876:	2001      	movs	r0, #1
   81878:	e004      	b.n	81884 <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8187a:	6306      	str	r6, [r0, #48]	; 0x30
   8187c:	4630      	mov	r0, r6
   8187e:	e760      	b.n	81742 <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81880:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   81884:	b003      	add	sp, #12
   81886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8188a:	bf00      	nop
   8188c:	00080ee1 	.word	0x00080ee1
   81890:	0008103d 	.word	0x0008103d
   81894:	00081105 	.word	0x00081105
   81898:	000831e5 	.word	0x000831e5
   8189c:	00083419 	.word	0x00083419
   818a0:	00080e95 	.word	0x00080e95
   818a4:	00080ef1 	.word	0x00080ef1
   818a8:	20078d24 	.word	0x20078d24
   818ac:	20078cfc 	.word	0x20078cfc
   818b0:	20078c1c 	.word	0x20078c1c
   818b4:	00080dd9 	.word	0x00080dd9
   818b8:	20078c04 	.word	0x20078c04
   818bc:	20078d00 	.word	0x20078d00
   818c0:	20078ce4 	.word	0x20078ce4
   818c4:	20078bd0 	.word	0x20078bd0
   818c8:	20078be4 	.word	0x20078be4
   818cc:	20078d1c 	.word	0x20078d1c
   818d0:	20078be8 	.word	0x20078be8
   818d4:	20078d2c 	.word	0x20078d2c
   818d8:	20078d20 	.word	0x20078d20
   818dc:	20078c18 	.word	0x20078c18
   818e0:	00080df9 	.word	0x00080df9
   818e4:	00080f11 	.word	0x00080f11
   818e8:	00080ed1 	.word	0x00080ed1
   818ec:	00080df1 	.word	0x00080df1
   818f0:	20078bf0 	.word	0x20078bf0

000818f4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   818f4:	b510      	push	{r4, lr}
   818f6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   818f8:	2300      	movs	r3, #0
   818fa:	9300      	str	r3, [sp, #0]
   818fc:	9301      	str	r3, [sp, #4]
   818fe:	9302      	str	r3, [sp, #8]
   81900:	9303      	str	r3, [sp, #12]
   81902:	480f      	ldr	r0, [pc, #60]	; (81940 <vTaskStartScheduler+0x4c>)
   81904:	490f      	ldr	r1, [pc, #60]	; (81944 <vTaskStartScheduler+0x50>)
   81906:	f44f 7280 	mov.w	r2, #256	; 0x100
   8190a:	4c0f      	ldr	r4, [pc, #60]	; (81948 <vTaskStartScheduler+0x54>)
   8190c:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   8190e:	2801      	cmp	r0, #1
   81910:	d10e      	bne.n	81930 <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   81912:	4b0e      	ldr	r3, [pc, #56]	; (8194c <vTaskStartScheduler+0x58>)
   81914:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81916:	2801      	cmp	r0, #1
   81918:	d10a      	bne.n	81930 <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   8191a:	4b0d      	ldr	r3, [pc, #52]	; (81950 <vTaskStartScheduler+0x5c>)
   8191c:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   8191e:	2201      	movs	r2, #1
   81920:	4b0c      	ldr	r3, [pc, #48]	; (81954 <vTaskStartScheduler+0x60>)
   81922:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81924:	2200      	movs	r2, #0
   81926:	4b0c      	ldr	r3, [pc, #48]	; (81958 <vTaskStartScheduler+0x64>)
   81928:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   8192a:	4b0c      	ldr	r3, [pc, #48]	; (8195c <vTaskStartScheduler+0x68>)
   8192c:	4798      	blx	r3
   8192e:	e004      	b.n	8193a <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81930:	b918      	cbnz	r0, 8193a <vTaskStartScheduler+0x46>
   81932:	4b07      	ldr	r3, [pc, #28]	; (81950 <vTaskStartScheduler+0x5c>)
   81934:	4798      	blx	r3
   81936:	bf00      	nop
   81938:	e7fd      	b.n	81936 <vTaskStartScheduler+0x42>
}
   8193a:	b004      	add	sp, #16
   8193c:	bd10      	pop	{r4, pc}
   8193e:	bf00      	nop
   81940:	00081c59 	.word	0x00081c59
   81944:	00086410 	.word	0x00086410
   81948:	000816f1 	.word	0x000816f1
   8194c:	00082119 	.word	0x00082119
   81950:	00080ee1 	.word	0x00080ee1
   81954:	20078be8 	.word	0x20078be8
   81958:	20078d18 	.word	0x20078d18
   8195c:	00080fad 	.word	0x00080fad

00081960 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81960:	4a02      	ldr	r2, [pc, #8]	; (8196c <vTaskSuspendAll+0xc>)
   81962:	6813      	ldr	r3, [r2, #0]
   81964:	3301      	adds	r3, #1
   81966:	6013      	str	r3, [r2, #0]
   81968:	4770      	bx	lr
   8196a:	bf00      	nop
   8196c:	20078d14 	.word	0x20078d14

00081970 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81970:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   81972:	4b04      	ldr	r3, [pc, #16]	; (81984 <xTaskGetTickCount+0x14>)
   81974:	4798      	blx	r3
	{
		xTicks = xTickCount;
   81976:	4b04      	ldr	r3, [pc, #16]	; (81988 <xTaskGetTickCount+0x18>)
   81978:	881c      	ldrh	r4, [r3, #0]
   8197a:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   8197c:	4b03      	ldr	r3, [pc, #12]	; (8198c <xTaskGetTickCount+0x1c>)
   8197e:	4798      	blx	r3

	return xTicks;
}
   81980:	4620      	mov	r0, r4
   81982:	bd10      	pop	{r4, pc}
   81984:	00080ef1 	.word	0x00080ef1
   81988:	20078d18 	.word	0x20078d18
   8198c:	00080f11 	.word	0x00080f11

00081990 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81994:	4b3d      	ldr	r3, [pc, #244]	; (81a8c <vTaskIncrementTick+0xfc>)
   81996:	681b      	ldr	r3, [r3, #0]
   81998:	2b00      	cmp	r3, #0
   8199a:	d171      	bne.n	81a80 <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   8199c:	4a3c      	ldr	r2, [pc, #240]	; (81a90 <vTaskIncrementTick+0x100>)
   8199e:	8813      	ldrh	r3, [r2, #0]
   819a0:	3301      	adds	r3, #1
   819a2:	b29b      	uxth	r3, r3
   819a4:	8013      	strh	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
   819a6:	8813      	ldrh	r3, [r2, #0]
   819a8:	b29b      	uxth	r3, r3
   819aa:	bb03      	cbnz	r3, 819ee <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   819ac:	4b39      	ldr	r3, [pc, #228]	; (81a94 <vTaskIncrementTick+0x104>)
   819ae:	681b      	ldr	r3, [r3, #0]
   819b0:	681b      	ldr	r3, [r3, #0]
   819b2:	b11b      	cbz	r3, 819bc <vTaskIncrementTick+0x2c>
   819b4:	4b38      	ldr	r3, [pc, #224]	; (81a98 <vTaskIncrementTick+0x108>)
   819b6:	4798      	blx	r3
   819b8:	bf00      	nop
   819ba:	e7fd      	b.n	819b8 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   819bc:	4b35      	ldr	r3, [pc, #212]	; (81a94 <vTaskIncrementTick+0x104>)
   819be:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   819c0:	4a36      	ldr	r2, [pc, #216]	; (81a9c <vTaskIncrementTick+0x10c>)
   819c2:	6810      	ldr	r0, [r2, #0]
   819c4:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   819c6:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   819c8:	4935      	ldr	r1, [pc, #212]	; (81aa0 <vTaskIncrementTick+0x110>)
   819ca:	680a      	ldr	r2, [r1, #0]
   819cc:	3201      	adds	r2, #1
   819ce:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   819d0:	681b      	ldr	r3, [r3, #0]
   819d2:	681b      	ldr	r3, [r3, #0]
   819d4:	b923      	cbnz	r3, 819e0 <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   819d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   819da:	4b32      	ldr	r3, [pc, #200]	; (81aa4 <vTaskIncrementTick+0x114>)
   819dc:	801a      	strh	r2, [r3, #0]
   819de:	e006      	b.n	819ee <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   819e0:	4b2c      	ldr	r3, [pc, #176]	; (81a94 <vTaskIncrementTick+0x104>)
   819e2:	681b      	ldr	r3, [r3, #0]
   819e4:	68db      	ldr	r3, [r3, #12]
   819e6:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   819e8:	889a      	ldrh	r2, [r3, #4]
   819ea:	4b2e      	ldr	r3, [pc, #184]	; (81aa4 <vTaskIncrementTick+0x114>)
   819ec:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   819ee:	4b28      	ldr	r3, [pc, #160]	; (81a90 <vTaskIncrementTick+0x100>)
   819f0:	881a      	ldrh	r2, [r3, #0]
   819f2:	b292      	uxth	r2, r2
   819f4:	4b2b      	ldr	r3, [pc, #172]	; (81aa4 <vTaskIncrementTick+0x114>)
   819f6:	881b      	ldrh	r3, [r3, #0]
   819f8:	b29b      	uxth	r3, r3
   819fa:	429a      	cmp	r2, r3
   819fc:	d344      	bcc.n	81a88 <vTaskIncrementTick+0xf8>
   819fe:	4b25      	ldr	r3, [pc, #148]	; (81a94 <vTaskIncrementTick+0x104>)
   81a00:	681b      	ldr	r3, [r3, #0]
   81a02:	681b      	ldr	r3, [r3, #0]
   81a04:	b16b      	cbz	r3, 81a22 <vTaskIncrementTick+0x92>
   81a06:	4b23      	ldr	r3, [pc, #140]	; (81a94 <vTaskIncrementTick+0x104>)
   81a08:	681b      	ldr	r3, [r3, #0]
   81a0a:	68db      	ldr	r3, [r3, #12]
   81a0c:	68dc      	ldr	r4, [r3, #12]
   81a0e:	88a2      	ldrh	r2, [r4, #4]
   81a10:	4b1f      	ldr	r3, [pc, #124]	; (81a90 <vTaskIncrementTick+0x100>)
   81a12:	881b      	ldrh	r3, [r3, #0]
   81a14:	b29b      	uxth	r3, r3
   81a16:	429a      	cmp	r2, r3
   81a18:	d813      	bhi.n	81a42 <vTaskIncrementTick+0xb2>
   81a1a:	4d23      	ldr	r5, [pc, #140]	; (81aa8 <vTaskIncrementTick+0x118>)
   81a1c:	4e23      	ldr	r6, [pc, #140]	; (81aac <vTaskIncrementTick+0x11c>)
   81a1e:	4f24      	ldr	r7, [pc, #144]	; (81ab0 <vTaskIncrementTick+0x120>)
   81a20:	e013      	b.n	81a4a <vTaskIncrementTick+0xba>
   81a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81a26:	4b1f      	ldr	r3, [pc, #124]	; (81aa4 <vTaskIncrementTick+0x114>)
   81a28:	801a      	strh	r2, [r3, #0]
   81a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a2e:	4b19      	ldr	r3, [pc, #100]	; (81a94 <vTaskIncrementTick+0x104>)
   81a30:	681b      	ldr	r3, [r3, #0]
   81a32:	68db      	ldr	r3, [r3, #12]
   81a34:	68dc      	ldr	r4, [r3, #12]
   81a36:	88a2      	ldrh	r2, [r4, #4]
   81a38:	4b15      	ldr	r3, [pc, #84]	; (81a90 <vTaskIncrementTick+0x100>)
   81a3a:	881b      	ldrh	r3, [r3, #0]
   81a3c:	b29b      	uxth	r3, r3
   81a3e:	429a      	cmp	r2, r3
   81a40:	d903      	bls.n	81a4a <vTaskIncrementTick+0xba>
   81a42:	4b18      	ldr	r3, [pc, #96]	; (81aa4 <vTaskIncrementTick+0x114>)
   81a44:	801a      	strh	r2, [r3, #0]
   81a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a4a:	f104 0804 	add.w	r8, r4, #4
   81a4e:	4640      	mov	r0, r8
   81a50:	47a8      	blx	r5
   81a52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81a54:	b113      	cbz	r3, 81a5c <vTaskIncrementTick+0xcc>
   81a56:	f104 0018 	add.w	r0, r4, #24
   81a5a:	47a8      	blx	r5
   81a5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81a5e:	6833      	ldr	r3, [r6, #0]
   81a60:	4298      	cmp	r0, r3
   81a62:	bf88      	it	hi
   81a64:	6030      	strhi	r0, [r6, #0]
   81a66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81a6a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   81a6e:	4641      	mov	r1, r8
   81a70:	4b10      	ldr	r3, [pc, #64]	; (81ab4 <vTaskIncrementTick+0x124>)
   81a72:	4798      	blx	r3
   81a74:	4b07      	ldr	r3, [pc, #28]	; (81a94 <vTaskIncrementTick+0x104>)
   81a76:	681b      	ldr	r3, [r3, #0]
   81a78:	681b      	ldr	r3, [r3, #0]
   81a7a:	2b00      	cmp	r3, #0
   81a7c:	d1d7      	bne.n	81a2e <vTaskIncrementTick+0x9e>
   81a7e:	e7d0      	b.n	81a22 <vTaskIncrementTick+0x92>
	}
	else
	{
		++uxMissedTicks;
   81a80:	4a0d      	ldr	r2, [pc, #52]	; (81ab8 <vTaskIncrementTick+0x128>)
   81a82:	6813      	ldr	r3, [r2, #0]
   81a84:	3301      	adds	r3, #1
   81a86:	6013      	str	r3, [r2, #0]
   81a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a8c:	20078d14 	.word	0x20078d14
   81a90:	20078d18 	.word	0x20078d18
   81a94:	20078be4 	.word	0x20078be4
   81a98:	00080ee1 	.word	0x00080ee1
   81a9c:	20078d1c 	.word	0x20078d1c
   81aa0:	20078cf8 	.word	0x20078cf8
   81aa4:	20070194 	.word	0x20070194
   81aa8:	00080e59 	.word	0x00080e59
   81aac:	20078c18 	.word	0x20078c18
   81ab0:	20078c1c 	.word	0x20078c1c
   81ab4:	00080df9 	.word	0x00080df9
   81ab8:	20078bcc 	.word	0x20078bcc

00081abc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81ac0:	4b30      	ldr	r3, [pc, #192]	; (81b84 <xTaskResumeAll+0xc8>)
   81ac2:	681b      	ldr	r3, [r3, #0]
   81ac4:	b91b      	cbnz	r3, 81ace <xTaskResumeAll+0x12>
   81ac6:	4b30      	ldr	r3, [pc, #192]	; (81b88 <xTaskResumeAll+0xcc>)
   81ac8:	4798      	blx	r3
   81aca:	bf00      	nop
   81acc:	e7fd      	b.n	81aca <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81ace:	4b2f      	ldr	r3, [pc, #188]	; (81b8c <xTaskResumeAll+0xd0>)
   81ad0:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   81ad2:	4b2c      	ldr	r3, [pc, #176]	; (81b84 <xTaskResumeAll+0xc8>)
   81ad4:	681a      	ldr	r2, [r3, #0]
   81ad6:	3a01      	subs	r2, #1
   81ad8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81ada:	681b      	ldr	r3, [r3, #0]
   81adc:	2b00      	cmp	r3, #0
   81ade:	d149      	bne.n	81b74 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81ae0:	4b2b      	ldr	r3, [pc, #172]	; (81b90 <xTaskResumeAll+0xd4>)
   81ae2:	681b      	ldr	r3, [r3, #0]
   81ae4:	bb03      	cbnz	r3, 81b28 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81ae6:	2400      	movs	r4, #0
   81ae8:	e047      	b.n	81b7a <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81aea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81aee:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81af0:	f104 0018 	add.w	r0, r4, #24
   81af4:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81af6:	f104 0904 	add.w	r9, r4, #4
   81afa:	4648      	mov	r0, r9
   81afc:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81afe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81b00:	6833      	ldr	r3, [r6, #0]
   81b02:	4298      	cmp	r0, r3
   81b04:	bf88      	it	hi
   81b06:	6030      	strhi	r0, [r6, #0]
   81b08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81b0c:	4b21      	ldr	r3, [pc, #132]	; (81b94 <xTaskResumeAll+0xd8>)
   81b0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81b12:	4649      	mov	r1, r9
   81b14:	4b20      	ldr	r3, [pc, #128]	; (81b98 <xTaskResumeAll+0xdc>)
   81b16:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81b18:	4b20      	ldr	r3, [pc, #128]	; (81b9c <xTaskResumeAll+0xe0>)
   81b1a:	681b      	ldr	r3, [r3, #0]
   81b1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81b20:	429a      	cmp	r2, r3
   81b22:	bf28      	it	cs
   81b24:	2501      	movcs	r5, #1
   81b26:	e004      	b.n	81b32 <xTaskResumeAll+0x76>
   81b28:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81b2a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 81bbc <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81b2e:	4f1c      	ldr	r7, [pc, #112]	; (81ba0 <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81b30:	4e1c      	ldr	r6, [pc, #112]	; (81ba4 <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81b32:	f8d8 3000 	ldr.w	r3, [r8]
   81b36:	2b00      	cmp	r3, #0
   81b38:	d1d7      	bne.n	81aea <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81b3a:	4b1b      	ldr	r3, [pc, #108]	; (81ba8 <xTaskResumeAll+0xec>)
   81b3c:	681b      	ldr	r3, [r3, #0]
   81b3e:	b163      	cbz	r3, 81b5a <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81b40:	4b19      	ldr	r3, [pc, #100]	; (81ba8 <xTaskResumeAll+0xec>)
   81b42:	681b      	ldr	r3, [r3, #0]
   81b44:	b17b      	cbz	r3, 81b66 <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
   81b46:	4d19      	ldr	r5, [pc, #100]	; (81bac <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   81b48:	4c17      	ldr	r4, [pc, #92]	; (81ba8 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81b4a:	47a8      	blx	r5
						--uxMissedTicks;
   81b4c:	6823      	ldr	r3, [r4, #0]
   81b4e:	3b01      	subs	r3, #1
   81b50:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81b52:	6823      	ldr	r3, [r4, #0]
   81b54:	2b00      	cmp	r3, #0
   81b56:	d1f8      	bne.n	81b4a <xTaskResumeAll+0x8e>
   81b58:	e005      	b.n	81b66 <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81b5a:	2d01      	cmp	r5, #1
   81b5c:	d003      	beq.n	81b66 <xTaskResumeAll+0xaa>
   81b5e:	4b14      	ldr	r3, [pc, #80]	; (81bb0 <xTaskResumeAll+0xf4>)
   81b60:	681b      	ldr	r3, [r3, #0]
   81b62:	2b01      	cmp	r3, #1
   81b64:	d108      	bne.n	81b78 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   81b66:	2200      	movs	r2, #0
   81b68:	4b11      	ldr	r3, [pc, #68]	; (81bb0 <xTaskResumeAll+0xf4>)
   81b6a:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81b6c:	4b11      	ldr	r3, [pc, #68]	; (81bb4 <xTaskResumeAll+0xf8>)
   81b6e:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81b70:	2401      	movs	r4, #1
   81b72:	e002      	b.n	81b7a <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81b74:	2400      	movs	r4, #0
   81b76:	e000      	b.n	81b7a <xTaskResumeAll+0xbe>
   81b78:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81b7a:	4b0f      	ldr	r3, [pc, #60]	; (81bb8 <xTaskResumeAll+0xfc>)
   81b7c:	4798      	blx	r3

	return xAlreadyYielded;
}
   81b7e:	4620      	mov	r0, r4
   81b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81b84:	20078d14 	.word	0x20078d14
   81b88:	00080ee1 	.word	0x00080ee1
   81b8c:	00080ef1 	.word	0x00080ef1
   81b90:	20078d24 	.word	0x20078d24
   81b94:	20078c1c 	.word	0x20078c1c
   81b98:	00080df9 	.word	0x00080df9
   81b9c:	20078cfc 	.word	0x20078cfc
   81ba0:	00080e59 	.word	0x00080e59
   81ba4:	20078c18 	.word	0x20078c18
   81ba8:	20078bcc 	.word	0x20078bcc
   81bac:	00081991 	.word	0x00081991
   81bb0:	20078d28 	.word	0x20078d28
   81bb4:	00080ed1 	.word	0x00080ed1
   81bb8:	00080f11 	.word	0x00080f11
   81bbc:	20078d00 	.word	0x20078d00

00081bc0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   81bc0:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   81bc2:	b918      	cbnz	r0, 81bcc <vTaskDelayUntil+0xc>
   81bc4:	4b1c      	ldr	r3, [pc, #112]	; (81c38 <vTaskDelayUntil+0x78>)
   81bc6:	4798      	blx	r3
   81bc8:	bf00      	nop
   81bca:	e7fd      	b.n	81bc8 <vTaskDelayUntil+0x8>
   81bcc:	460c      	mov	r4, r1
   81bce:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   81bd0:	b919      	cbnz	r1, 81bda <vTaskDelayUntil+0x1a>
   81bd2:	4b19      	ldr	r3, [pc, #100]	; (81c38 <vTaskDelayUntil+0x78>)
   81bd4:	4798      	blx	r3
   81bd6:	bf00      	nop
   81bd8:	e7fd      	b.n	81bd6 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   81bda:	4b18      	ldr	r3, [pc, #96]	; (81c3c <vTaskDelayUntil+0x7c>)
   81bdc:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81bde:	882b      	ldrh	r3, [r5, #0]
   81be0:	441c      	add	r4, r3
   81be2:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   81be4:	4a16      	ldr	r2, [pc, #88]	; (81c40 <vTaskDelayUntil+0x80>)
   81be6:	8812      	ldrh	r2, [r2, #0]
   81be8:	b292      	uxth	r2, r2
   81bea:	4293      	cmp	r3, r2
   81bec:	d908      	bls.n	81c00 <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81bee:	42a3      	cmp	r3, r4
   81bf0:	d91e      	bls.n	81c30 <vTaskDelayUntil+0x70>
   81bf2:	4b13      	ldr	r3, [pc, #76]	; (81c40 <vTaskDelayUntil+0x80>)
   81bf4:	881b      	ldrh	r3, [r3, #0]
   81bf6:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81bf8:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   81bfa:	429c      	cmp	r4, r3
   81bfc:	d910      	bls.n	81c20 <vTaskDelayUntil+0x60>
   81bfe:	e007      	b.n	81c10 <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81c00:	42a3      	cmp	r3, r4
   81c02:	d813      	bhi.n	81c2c <vTaskDelayUntil+0x6c>
   81c04:	4b0e      	ldr	r3, [pc, #56]	; (81c40 <vTaskDelayUntil+0x80>)
   81c06:	881b      	ldrh	r3, [r3, #0]
   81c08:	b29b      	uxth	r3, r3
   81c0a:	429c      	cmp	r4, r3
   81c0c:	d80e      	bhi.n	81c2c <vTaskDelayUntil+0x6c>
   81c0e:	e00f      	b.n	81c30 <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81c10:	4b0c      	ldr	r3, [pc, #48]	; (81c44 <vTaskDelayUntil+0x84>)
   81c12:	6818      	ldr	r0, [r3, #0]
   81c14:	3004      	adds	r0, #4
   81c16:	4b0c      	ldr	r3, [pc, #48]	; (81c48 <vTaskDelayUntil+0x88>)
   81c18:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81c1a:	4620      	mov	r0, r4
   81c1c:	4b0b      	ldr	r3, [pc, #44]	; (81c4c <vTaskDelayUntil+0x8c>)
   81c1e:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   81c20:	4b0b      	ldr	r3, [pc, #44]	; (81c50 <vTaskDelayUntil+0x90>)
   81c22:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81c24:	b930      	cbnz	r0, 81c34 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   81c26:	4b0b      	ldr	r3, [pc, #44]	; (81c54 <vTaskDelayUntil+0x94>)
   81c28:	4798      	blx	r3
   81c2a:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81c2c:	802c      	strh	r4, [r5, #0]
   81c2e:	e7ef      	b.n	81c10 <vTaskDelayUntil+0x50>
   81c30:	802c      	strh	r4, [r5, #0]
   81c32:	e7f5      	b.n	81c20 <vTaskDelayUntil+0x60>
   81c34:	bd38      	pop	{r3, r4, r5, pc}
   81c36:	bf00      	nop
   81c38:	00080ee1 	.word	0x00080ee1
   81c3c:	00081961 	.word	0x00081961
   81c40:	20078d18 	.word	0x20078d18
   81c44:	20078cfc 	.word	0x20078cfc
   81c48:	00080e59 	.word	0x00080e59
   81c4c:	00081695 	.word	0x00081695
   81c50:	00081abd 	.word	0x00081abd
   81c54:	00080ed1 	.word	0x00080ed1

00081c58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81c58:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81c5a:	4d15      	ldr	r5, [pc, #84]	; (81cb0 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81c5c:	4e15      	ldr	r6, [pc, #84]	; (81cb4 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81c5e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 81cd4 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   81c62:	4f15      	ldr	r7, [pc, #84]	; (81cb8 <prvIdleTask+0x60>)
   81c64:	e019      	b.n	81c9a <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81c66:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81c68:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   81c6a:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
   81c6c:	b1ac      	cbz	r4, 81c9a <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81c6e:	4b13      	ldr	r3, [pc, #76]	; (81cbc <prvIdleTask+0x64>)
   81c70:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81c72:	68f3      	ldr	r3, [r6, #12]
   81c74:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81c76:	1d20      	adds	r0, r4, #4
   81c78:	4b11      	ldr	r3, [pc, #68]	; (81cc0 <prvIdleTask+0x68>)
   81c7a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81c7c:	4a11      	ldr	r2, [pc, #68]	; (81cc4 <prvIdleTask+0x6c>)
   81c7e:	6813      	ldr	r3, [r2, #0]
   81c80:	3b01      	subs	r3, #1
   81c82:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   81c84:	682b      	ldr	r3, [r5, #0]
   81c86:	3b01      	subs	r3, #1
   81c88:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81c8a:	4b0f      	ldr	r3, [pc, #60]	; (81cc8 <prvIdleTask+0x70>)
   81c8c:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81c8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81c90:	f8df 9044 	ldr.w	r9, [pc, #68]	; 81cd8 <prvIdleTask+0x80>
   81c94:	47c8      	blx	r9
		vPortFree( pxTCB );
   81c96:	4620      	mov	r0, r4
   81c98:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81c9a:	682b      	ldr	r3, [r5, #0]
   81c9c:	2b00      	cmp	r3, #0
   81c9e:	d1e2      	bne.n	81c66 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81ca0:	4b0a      	ldr	r3, [pc, #40]	; (81ccc <prvIdleTask+0x74>)
   81ca2:	681b      	ldr	r3, [r3, #0]
   81ca4:	2b01      	cmp	r3, #1
   81ca6:	d9f8      	bls.n	81c9a <prvIdleTask+0x42>
			{
				taskYIELD();
   81ca8:	4b09      	ldr	r3, [pc, #36]	; (81cd0 <prvIdleTask+0x78>)
   81caa:	4798      	blx	r3
   81cac:	e7d7      	b.n	81c5e <prvIdleTask+0x6>
   81cae:	bf00      	nop
   81cb0:	20078bec 	.word	0x20078bec
   81cb4:	20078ce4 	.word	0x20078ce4
   81cb8:	00081abd 	.word	0x00081abd
   81cbc:	00080ef1 	.word	0x00080ef1
   81cc0:	00080e59 	.word	0x00080e59
   81cc4:	20078d24 	.word	0x20078d24
   81cc8:	00080f11 	.word	0x00080f11
   81ccc:	20078c1c 	.word	0x20078c1c
   81cd0:	00080ed1 	.word	0x00080ed1
   81cd4:	00081961 	.word	0x00081961
   81cd8:	00081105 	.word	0x00081105

00081cdc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81cdc:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81cde:	4b22      	ldr	r3, [pc, #136]	; (81d68 <vTaskSwitchContext+0x8c>)
   81ce0:	681b      	ldr	r3, [r3, #0]
   81ce2:	b96b      	cbnz	r3, 81d00 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81ce4:	4b21      	ldr	r3, [pc, #132]	; (81d6c <vTaskSwitchContext+0x90>)
   81ce6:	681b      	ldr	r3, [r3, #0]
   81ce8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81cec:	009b      	lsls	r3, r3, #2
   81cee:	4a20      	ldr	r2, [pc, #128]	; (81d70 <vTaskSwitchContext+0x94>)
   81cf0:	58d3      	ldr	r3, [r2, r3]
   81cf2:	b9cb      	cbnz	r3, 81d28 <vTaskSwitchContext+0x4c>
   81cf4:	4b1d      	ldr	r3, [pc, #116]	; (81d6c <vTaskSwitchContext+0x90>)
   81cf6:	681b      	ldr	r3, [r3, #0]
   81cf8:	b143      	cbz	r3, 81d0c <vTaskSwitchContext+0x30>
   81cfa:	4a1c      	ldr	r2, [pc, #112]	; (81d6c <vTaskSwitchContext+0x90>)
   81cfc:	491c      	ldr	r1, [pc, #112]	; (81d70 <vTaskSwitchContext+0x94>)
   81cfe:	e009      	b.n	81d14 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81d00:	2201      	movs	r2, #1
   81d02:	4b1c      	ldr	r3, [pc, #112]	; (81d74 <vTaskSwitchContext+0x98>)
   81d04:	601a      	str	r2, [r3, #0]
   81d06:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81d08:	6813      	ldr	r3, [r2, #0]
   81d0a:	b91b      	cbnz	r3, 81d14 <vTaskSwitchContext+0x38>
   81d0c:	4b1a      	ldr	r3, [pc, #104]	; (81d78 <vTaskSwitchContext+0x9c>)
   81d0e:	4798      	blx	r3
   81d10:	bf00      	nop
   81d12:	e7fd      	b.n	81d10 <vTaskSwitchContext+0x34>
   81d14:	6813      	ldr	r3, [r2, #0]
   81d16:	3b01      	subs	r3, #1
   81d18:	6013      	str	r3, [r2, #0]
   81d1a:	6813      	ldr	r3, [r2, #0]
   81d1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   81d24:	2b00      	cmp	r3, #0
   81d26:	d0ef      	beq.n	81d08 <vTaskSwitchContext+0x2c>
   81d28:	4b10      	ldr	r3, [pc, #64]	; (81d6c <vTaskSwitchContext+0x90>)
   81d2a:	681b      	ldr	r3, [r3, #0]
   81d2c:	4a10      	ldr	r2, [pc, #64]	; (81d70 <vTaskSwitchContext+0x94>)
   81d2e:	0099      	lsls	r1, r3, #2
   81d30:	18c8      	adds	r0, r1, r3
   81d32:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81d36:	6844      	ldr	r4, [r0, #4]
   81d38:	6864      	ldr	r4, [r4, #4]
   81d3a:	6044      	str	r4, [r0, #4]
   81d3c:	4602      	mov	r2, r0
   81d3e:	3208      	adds	r2, #8
   81d40:	4294      	cmp	r4, r2
   81d42:	d106      	bne.n	81d52 <vTaskSwitchContext+0x76>
   81d44:	6860      	ldr	r0, [r4, #4]
   81d46:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   81d4a:	4a09      	ldr	r2, [pc, #36]	; (81d70 <vTaskSwitchContext+0x94>)
   81d4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81d50:	6050      	str	r0, [r2, #4]
   81d52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81d56:	4a06      	ldr	r2, [pc, #24]	; (81d70 <vTaskSwitchContext+0x94>)
   81d58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81d5c:	685b      	ldr	r3, [r3, #4]
   81d5e:	68da      	ldr	r2, [r3, #12]
   81d60:	4b06      	ldr	r3, [pc, #24]	; (81d7c <vTaskSwitchContext+0xa0>)
   81d62:	601a      	str	r2, [r3, #0]
   81d64:	bd10      	pop	{r4, pc}
   81d66:	bf00      	nop
   81d68:	20078d14 	.word	0x20078d14
   81d6c:	20078c18 	.word	0x20078c18
   81d70:	20078c1c 	.word	0x20078c1c
   81d74:	20078d28 	.word	0x20078d28
   81d78:	00080ee1 	.word	0x00080ee1
   81d7c:	20078cfc 	.word	0x20078cfc

00081d80 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81d80:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81d82:	b918      	cbnz	r0, 81d8c <vTaskPlaceOnEventList+0xc>
   81d84:	4b0f      	ldr	r3, [pc, #60]	; (81dc4 <vTaskPlaceOnEventList+0x44>)
   81d86:	4798      	blx	r3
   81d88:	bf00      	nop
   81d8a:	e7fd      	b.n	81d88 <vTaskPlaceOnEventList+0x8>
   81d8c:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81d8e:	4d0e      	ldr	r5, [pc, #56]	; (81dc8 <vTaskPlaceOnEventList+0x48>)
   81d90:	6829      	ldr	r1, [r5, #0]
   81d92:	3118      	adds	r1, #24
   81d94:	4b0d      	ldr	r3, [pc, #52]	; (81dcc <vTaskPlaceOnEventList+0x4c>)
   81d96:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81d98:	6828      	ldr	r0, [r5, #0]
   81d9a:	3004      	adds	r0, #4
   81d9c:	4b0c      	ldr	r3, [pc, #48]	; (81dd0 <vTaskPlaceOnEventList+0x50>)
   81d9e:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81da4:	429c      	cmp	r4, r3
   81da6:	d105      	bne.n	81db4 <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81da8:	6829      	ldr	r1, [r5, #0]
   81daa:	480a      	ldr	r0, [pc, #40]	; (81dd4 <vTaskPlaceOnEventList+0x54>)
   81dac:	3104      	adds	r1, #4
   81dae:	4b0a      	ldr	r3, [pc, #40]	; (81dd8 <vTaskPlaceOnEventList+0x58>)
   81db0:	4798      	blx	r3
   81db2:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81db4:	4b09      	ldr	r3, [pc, #36]	; (81ddc <vTaskPlaceOnEventList+0x5c>)
   81db6:	8818      	ldrh	r0, [r3, #0]
   81db8:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81dba:	b280      	uxth	r0, r0
   81dbc:	4b08      	ldr	r3, [pc, #32]	; (81de0 <vTaskPlaceOnEventList+0x60>)
   81dbe:	4798      	blx	r3
   81dc0:	bd38      	pop	{r3, r4, r5, pc}
   81dc2:	bf00      	nop
   81dc4:	00080ee1 	.word	0x00080ee1
   81dc8:	20078cfc 	.word	0x20078cfc
   81dcc:	00080e15 	.word	0x00080e15
   81dd0:	00080e59 	.word	0x00080e59
   81dd4:	20078bd0 	.word	0x20078bd0
   81dd8:	00080df9 	.word	0x00080df9
   81ddc:	20078d18 	.word	0x20078d18
   81de0:	00081695 	.word	0x00081695

00081de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81de4:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81de6:	b918      	cbnz	r0, 81df0 <vTaskPlaceOnEventListRestricted+0xc>
   81de8:	4b0a      	ldr	r3, [pc, #40]	; (81e14 <vTaskPlaceOnEventListRestricted+0x30>)
   81dea:	4798      	blx	r3
   81dec:	bf00      	nop
   81dee:	e7fd      	b.n	81dec <vTaskPlaceOnEventListRestricted+0x8>
   81df0:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81df2:	4c09      	ldr	r4, [pc, #36]	; (81e18 <vTaskPlaceOnEventListRestricted+0x34>)
   81df4:	6821      	ldr	r1, [r4, #0]
   81df6:	3118      	adds	r1, #24
   81df8:	4b08      	ldr	r3, [pc, #32]	; (81e1c <vTaskPlaceOnEventListRestricted+0x38>)
   81dfa:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81dfc:	6820      	ldr	r0, [r4, #0]
   81dfe:	3004      	adds	r0, #4
   81e00:	4b07      	ldr	r3, [pc, #28]	; (81e20 <vTaskPlaceOnEventListRestricted+0x3c>)
   81e02:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81e04:	4b07      	ldr	r3, [pc, #28]	; (81e24 <vTaskPlaceOnEventListRestricted+0x40>)
   81e06:	8818      	ldrh	r0, [r3, #0]
   81e08:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81e0a:	b280      	uxth	r0, r0
   81e0c:	4b06      	ldr	r3, [pc, #24]	; (81e28 <vTaskPlaceOnEventListRestricted+0x44>)
   81e0e:	4798      	blx	r3
   81e10:	bd38      	pop	{r3, r4, r5, pc}
   81e12:	bf00      	nop
   81e14:	00080ee1 	.word	0x00080ee1
   81e18:	20078cfc 	.word	0x20078cfc
   81e1c:	00080df9 	.word	0x00080df9
   81e20:	00080e59 	.word	0x00080e59
   81e24:	20078d18 	.word	0x20078d18
   81e28:	00081695 	.word	0x00081695

00081e2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81e2c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81e2e:	68c3      	ldr	r3, [r0, #12]
   81e30:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81e32:	b91c      	cbnz	r4, 81e3c <xTaskRemoveFromEventList+0x10>
   81e34:	4b16      	ldr	r3, [pc, #88]	; (81e90 <xTaskRemoveFromEventList+0x64>)
   81e36:	4798      	blx	r3
   81e38:	bf00      	nop
   81e3a:	e7fd      	b.n	81e38 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81e3c:	f104 0518 	add.w	r5, r4, #24
   81e40:	4628      	mov	r0, r5
   81e42:	4b14      	ldr	r3, [pc, #80]	; (81e94 <xTaskRemoveFromEventList+0x68>)
   81e44:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81e46:	4b14      	ldr	r3, [pc, #80]	; (81e98 <xTaskRemoveFromEventList+0x6c>)
   81e48:	681b      	ldr	r3, [r3, #0]
   81e4a:	b99b      	cbnz	r3, 81e74 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81e4c:	1d25      	adds	r5, r4, #4
   81e4e:	4628      	mov	r0, r5
   81e50:	4b10      	ldr	r3, [pc, #64]	; (81e94 <xTaskRemoveFromEventList+0x68>)
   81e52:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81e54:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81e56:	4b11      	ldr	r3, [pc, #68]	; (81e9c <xTaskRemoveFromEventList+0x70>)
   81e58:	681b      	ldr	r3, [r3, #0]
   81e5a:	4298      	cmp	r0, r3
   81e5c:	bf84      	itt	hi
   81e5e:	4b0f      	ldrhi	r3, [pc, #60]	; (81e9c <xTaskRemoveFromEventList+0x70>)
   81e60:	6018      	strhi	r0, [r3, #0]
   81e62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81e66:	4b0e      	ldr	r3, [pc, #56]	; (81ea0 <xTaskRemoveFromEventList+0x74>)
   81e68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81e6c:	4629      	mov	r1, r5
   81e6e:	4b0d      	ldr	r3, [pc, #52]	; (81ea4 <xTaskRemoveFromEventList+0x78>)
   81e70:	4798      	blx	r3
   81e72:	e003      	b.n	81e7c <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81e74:	480c      	ldr	r0, [pc, #48]	; (81ea8 <xTaskRemoveFromEventList+0x7c>)
   81e76:	4629      	mov	r1, r5
   81e78:	4b0a      	ldr	r3, [pc, #40]	; (81ea4 <xTaskRemoveFromEventList+0x78>)
   81e7a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81e7c:	4b0b      	ldr	r3, [pc, #44]	; (81eac <xTaskRemoveFromEventList+0x80>)
   81e7e:	681b      	ldr	r3, [r3, #0]
   81e80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81e84:	4298      	cmp	r0, r3
   81e86:	bf34      	ite	cc
   81e88:	2000      	movcc	r0, #0
   81e8a:	2001      	movcs	r0, #1
   81e8c:	bd38      	pop	{r3, r4, r5, pc}
   81e8e:	bf00      	nop
   81e90:	00080ee1 	.word	0x00080ee1
   81e94:	00080e59 	.word	0x00080e59
   81e98:	20078d14 	.word	0x20078d14
   81e9c:	20078c18 	.word	0x20078c18
   81ea0:	20078c1c 	.word	0x20078c1c
   81ea4:	00080df9 	.word	0x00080df9
   81ea8:	20078d00 	.word	0x20078d00
   81eac:	20078cfc 	.word	0x20078cfc

00081eb0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81eb0:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81eb2:	b918      	cbnz	r0, 81ebc <vTaskSetTimeOutState+0xc>
   81eb4:	4b05      	ldr	r3, [pc, #20]	; (81ecc <vTaskSetTimeOutState+0x1c>)
   81eb6:	4798      	blx	r3
   81eb8:	bf00      	nop
   81eba:	e7fd      	b.n	81eb8 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81ebc:	4a04      	ldr	r2, [pc, #16]	; (81ed0 <vTaskSetTimeOutState+0x20>)
   81ebe:	6812      	ldr	r2, [r2, #0]
   81ec0:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81ec2:	4a04      	ldr	r2, [pc, #16]	; (81ed4 <vTaskSetTimeOutState+0x24>)
   81ec4:	8812      	ldrh	r2, [r2, #0]
   81ec6:	8082      	strh	r2, [r0, #4]
   81ec8:	bd08      	pop	{r3, pc}
   81eca:	bf00      	nop
   81ecc:	00080ee1 	.word	0x00080ee1
   81ed0:	20078cf8 	.word	0x20078cf8
   81ed4:	20078d18 	.word	0x20078d18

00081ed8 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81ed8:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81eda:	b918      	cbnz	r0, 81ee4 <xTaskCheckForTimeOut+0xc>
   81edc:	4b1b      	ldr	r3, [pc, #108]	; (81f4c <xTaskCheckForTimeOut+0x74>)
   81ede:	4798      	blx	r3
   81ee0:	bf00      	nop
   81ee2:	e7fd      	b.n	81ee0 <xTaskCheckForTimeOut+0x8>
   81ee4:	460d      	mov	r5, r1
   81ee6:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   81ee8:	b919      	cbnz	r1, 81ef2 <xTaskCheckForTimeOut+0x1a>
   81eea:	4b18      	ldr	r3, [pc, #96]	; (81f4c <xTaskCheckForTimeOut+0x74>)
   81eec:	4798      	blx	r3
   81eee:	bf00      	nop
   81ef0:	e7fd      	b.n	81eee <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   81ef2:	4b17      	ldr	r3, [pc, #92]	; (81f50 <xTaskCheckForTimeOut+0x78>)
   81ef4:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81ef6:	882b      	ldrh	r3, [r5, #0]
   81ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81efc:	4293      	cmp	r3, r2
   81efe:	d01b      	beq.n	81f38 <xTaskCheckForTimeOut+0x60>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81f00:	4a14      	ldr	r2, [pc, #80]	; (81f54 <xTaskCheckForTimeOut+0x7c>)
   81f02:	6812      	ldr	r2, [r2, #0]
   81f04:	6821      	ldr	r1, [r4, #0]
   81f06:	4291      	cmp	r1, r2
   81f08:	d005      	beq.n	81f16 <xTaskCheckForTimeOut+0x3e>
   81f0a:	4a13      	ldr	r2, [pc, #76]	; (81f58 <xTaskCheckForTimeOut+0x80>)
   81f0c:	8812      	ldrh	r2, [r2, #0]
   81f0e:	b292      	uxth	r2, r2
   81f10:	88a1      	ldrh	r1, [r4, #4]
   81f12:	4291      	cmp	r1, r2
   81f14:	d912      	bls.n	81f3c <xTaskCheckForTimeOut+0x64>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81f16:	4a10      	ldr	r2, [pc, #64]	; (81f58 <xTaskCheckForTimeOut+0x80>)
   81f18:	8811      	ldrh	r1, [r2, #0]
   81f1a:	88a0      	ldrh	r0, [r4, #4]
   81f1c:	1a09      	subs	r1, r1, r0
   81f1e:	b289      	uxth	r1, r1
   81f20:	428b      	cmp	r3, r1
   81f22:	d90d      	bls.n	81f40 <xTaskCheckForTimeOut+0x68>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81f24:	8812      	ldrh	r2, [r2, #0]
   81f26:	b292      	uxth	r2, r2
   81f28:	1a12      	subs	r2, r2, r0
   81f2a:	1a9b      	subs	r3, r3, r2
   81f2c:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81f2e:	4620      	mov	r0, r4
   81f30:	4b0a      	ldr	r3, [pc, #40]	; (81f5c <xTaskCheckForTimeOut+0x84>)
   81f32:	4798      	blx	r3
			xReturn = pdFALSE;
   81f34:	2400      	movs	r4, #0
   81f36:	e004      	b.n	81f42 <xTaskCheckForTimeOut+0x6a>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81f38:	2400      	movs	r4, #0
   81f3a:	e002      	b.n	81f42 <xTaskCheckForTimeOut+0x6a>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81f3c:	2401      	movs	r4, #1
   81f3e:	e000      	b.n	81f42 <xTaskCheckForTimeOut+0x6a>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81f40:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81f42:	4b07      	ldr	r3, [pc, #28]	; (81f60 <xTaskCheckForTimeOut+0x88>)
   81f44:	4798      	blx	r3

	return xReturn;
}
   81f46:	4620      	mov	r0, r4
   81f48:	bd38      	pop	{r3, r4, r5, pc}
   81f4a:	bf00      	nop
   81f4c:	00080ee1 	.word	0x00080ee1
   81f50:	00080ef1 	.word	0x00080ef1
   81f54:	20078cf8 	.word	0x20078cf8
   81f58:	20078d18 	.word	0x20078d18
   81f5c:	00081eb1 	.word	0x00081eb1
   81f60:	00080f11 	.word	0x00080f11

00081f64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81f64:	2201      	movs	r2, #1
   81f66:	4b01      	ldr	r3, [pc, #4]	; (81f6c <vTaskMissedYield+0x8>)
   81f68:	601a      	str	r2, [r3, #0]
   81f6a:	4770      	bx	lr
   81f6c:	20078d28 	.word	0x20078d28

00081f70 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81f70:	4b01      	ldr	r3, [pc, #4]	; (81f78 <xTaskGetCurrentTaskHandle+0x8>)
   81f72:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81f74:	4770      	bx	lr
   81f76:	bf00      	nop
   81f78:	20078cfc 	.word	0x20078cfc

00081f7c <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81f7c:	4b05      	ldr	r3, [pc, #20]	; (81f94 <xTaskGetSchedulerState+0x18>)
   81f7e:	681b      	ldr	r3, [r3, #0]
   81f80:	b133      	cbz	r3, 81f90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81f82:	4b05      	ldr	r3, [pc, #20]	; (81f98 <xTaskGetSchedulerState+0x1c>)
   81f84:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   81f86:	2b00      	cmp	r3, #0
   81f88:	bf0c      	ite	eq
   81f8a:	2001      	moveq	r0, #1
   81f8c:	2002      	movne	r0, #2
   81f8e:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81f90:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81f92:	4770      	bx	lr
   81f94:	20078be8 	.word	0x20078be8
   81f98:	20078d14 	.word	0x20078d14

00081f9c <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81f9c:	2800      	cmp	r0, #0
   81f9e:	d031      	beq.n	82004 <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81fa0:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81fa2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81fa4:	4918      	ldr	r1, [pc, #96]	; (82008 <vTaskPriorityInherit+0x6c>)
   81fa6:	6809      	ldr	r1, [r1, #0]
   81fa8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81faa:	428b      	cmp	r3, r1
   81fac:	d229      	bcs.n	82002 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81fae:	4916      	ldr	r1, [pc, #88]	; (82008 <vTaskPriorityInherit+0x6c>)
   81fb0:	6809      	ldr	r1, [r1, #0]
   81fb2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81fb4:	f1c1 010a 	rsb	r1, r1, #10
   81fb8:	8301      	strh	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81fba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81fbe:	4913      	ldr	r1, [pc, #76]	; (8200c <vTaskPriorityInherit+0x70>)
   81fc0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81fc4:	6941      	ldr	r1, [r0, #20]
   81fc6:	4299      	cmp	r1, r3
   81fc8:	d117      	bne.n	81ffa <vTaskPriorityInherit+0x5e>
   81fca:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81fcc:	1d04      	adds	r4, r0, #4
   81fce:	4620      	mov	r0, r4
   81fd0:	4b0f      	ldr	r3, [pc, #60]	; (82010 <vTaskPriorityInherit+0x74>)
   81fd2:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81fd4:	4b0c      	ldr	r3, [pc, #48]	; (82008 <vTaskPriorityInherit+0x6c>)
   81fd6:	681b      	ldr	r3, [r3, #0]
   81fd8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   81fda:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81fdc:	4b0d      	ldr	r3, [pc, #52]	; (82014 <vTaskPriorityInherit+0x78>)
   81fde:	681b      	ldr	r3, [r3, #0]
   81fe0:	4298      	cmp	r0, r3
   81fe2:	bf84      	itt	hi
   81fe4:	4b0b      	ldrhi	r3, [pc, #44]	; (82014 <vTaskPriorityInherit+0x78>)
   81fe6:	6018      	strhi	r0, [r3, #0]
   81fe8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81fec:	4b07      	ldr	r3, [pc, #28]	; (8200c <vTaskPriorityInherit+0x70>)
   81fee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81ff2:	4621      	mov	r1, r4
   81ff4:	4b08      	ldr	r3, [pc, #32]	; (82018 <vTaskPriorityInherit+0x7c>)
   81ff6:	4798      	blx	r3
   81ff8:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81ffa:	4b03      	ldr	r3, [pc, #12]	; (82008 <vTaskPriorityInherit+0x6c>)
   81ffc:	681b      	ldr	r3, [r3, #0]
   81ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82000:	62c3      	str	r3, [r0, #44]	; 0x2c
   82002:	bd38      	pop	{r3, r4, r5, pc}
   82004:	4770      	bx	lr
   82006:	bf00      	nop
   82008:	20078cfc 	.word	0x20078cfc
   8200c:	20078c1c 	.word	0x20078c1c
   82010:	00080e59 	.word	0x00080e59
   82014:	20078c18 	.word	0x20078c18
   82018:	00080df9 	.word	0x00080df9

0008201c <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   8201c:	b1e8      	cbz	r0, 8205a <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   8201e:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   82020:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   82022:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   82024:	4291      	cmp	r1, r2
   82026:	d017      	beq.n	82058 <vTaskPriorityDisinherit+0x3c>
   82028:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8202a:	1d05      	adds	r5, r0, #4
   8202c:	4628      	mov	r0, r5
   8202e:	4b0b      	ldr	r3, [pc, #44]	; (8205c <vTaskPriorityDisinherit+0x40>)
   82030:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   82032:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   82034:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   82036:	f1c0 030a 	rsb	r3, r0, #10
   8203a:	8323      	strh	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   8203c:	4b08      	ldr	r3, [pc, #32]	; (82060 <vTaskPriorityDisinherit+0x44>)
   8203e:	681b      	ldr	r3, [r3, #0]
   82040:	4298      	cmp	r0, r3
   82042:	bf84      	itt	hi
   82044:	4b06      	ldrhi	r3, [pc, #24]	; (82060 <vTaskPriorityDisinherit+0x44>)
   82046:	6018      	strhi	r0, [r3, #0]
   82048:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8204c:	4b05      	ldr	r3, [pc, #20]	; (82064 <vTaskPriorityDisinherit+0x48>)
   8204e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   82052:	4629      	mov	r1, r5
   82054:	4b04      	ldr	r3, [pc, #16]	; (82068 <vTaskPriorityDisinherit+0x4c>)
   82056:	4798      	blx	r3
   82058:	bd38      	pop	{r3, r4, r5, pc}
   8205a:	4770      	bx	lr
   8205c:	00080e59 	.word	0x00080e59
   82060:	20078c18 	.word	0x20078c18
   82064:	20078c1c 	.word	0x20078c1c
   82068:	00080df9 	.word	0x00080df9

0008206c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   8206c:	b510      	push	{r4, lr}
   8206e:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   82070:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82072:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   82074:	4291      	cmp	r1, r2
   82076:	d80b      	bhi.n	82090 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   82078:	1ad2      	subs	r2, r2, r3
   8207a:	8b03      	ldrh	r3, [r0, #24]
   8207c:	b292      	uxth	r2, r2
   8207e:	4293      	cmp	r3, r2
   82080:	d911      	bls.n	820a6 <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   82082:	4b0b      	ldr	r3, [pc, #44]	; (820b0 <prvInsertTimerInActiveList+0x44>)
   82084:	6818      	ldr	r0, [r3, #0]
   82086:	1d21      	adds	r1, r4, #4
   82088:	4b0a      	ldr	r3, [pc, #40]	; (820b4 <prvInsertTimerInActiveList+0x48>)
   8208a:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8208c:	2000      	movs	r0, #0
   8208e:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   82090:	429a      	cmp	r2, r3
   82092:	d201      	bcs.n	82098 <prvInsertTimerInActiveList+0x2c>
   82094:	4299      	cmp	r1, r3
   82096:	d208      	bcs.n	820aa <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82098:	4b07      	ldr	r3, [pc, #28]	; (820b8 <prvInsertTimerInActiveList+0x4c>)
   8209a:	6818      	ldr	r0, [r3, #0]
   8209c:	1d21      	adds	r1, r4, #4
   8209e:	4b05      	ldr	r3, [pc, #20]	; (820b4 <prvInsertTimerInActiveList+0x48>)
   820a0:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   820a2:	2000      	movs	r0, #0
   820a4:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   820a6:	2001      	movs	r0, #1
   820a8:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   820aa:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   820ac:	bd10      	pop	{r4, pc}
   820ae:	bf00      	nop
   820b0:	20078d64 	.word	0x20078d64
   820b4:	00080e15 	.word	0x00080e15
   820b8:	20078d30 	.word	0x20078d30

000820bc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   820bc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   820be:	4b0d      	ldr	r3, [pc, #52]	; (820f4 <prvCheckForValidListAndQueue+0x38>)
   820c0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   820c2:	4b0d      	ldr	r3, [pc, #52]	; (820f8 <prvCheckForValidListAndQueue+0x3c>)
   820c4:	681b      	ldr	r3, [r3, #0]
   820c6:	b98b      	cbnz	r3, 820ec <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   820c8:	4d0c      	ldr	r5, [pc, #48]	; (820fc <prvCheckForValidListAndQueue+0x40>)
   820ca:	4628      	mov	r0, r5
   820cc:	4e0c      	ldr	r6, [pc, #48]	; (82100 <prvCheckForValidListAndQueue+0x44>)
   820ce:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   820d0:	4c0c      	ldr	r4, [pc, #48]	; (82104 <prvCheckForValidListAndQueue+0x48>)
   820d2:	4620      	mov	r0, r4
   820d4:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   820d6:	4b0c      	ldr	r3, [pc, #48]	; (82108 <prvCheckForValidListAndQueue+0x4c>)
   820d8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   820da:	4b0c      	ldr	r3, [pc, #48]	; (8210c <prvCheckForValidListAndQueue+0x50>)
   820dc:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   820de:	2005      	movs	r0, #5
   820e0:	210c      	movs	r1, #12
   820e2:	2200      	movs	r2, #0
   820e4:	4b0a      	ldr	r3, [pc, #40]	; (82110 <prvCheckForValidListAndQueue+0x54>)
   820e6:	4798      	blx	r3
   820e8:	4b03      	ldr	r3, [pc, #12]	; (820f8 <prvCheckForValidListAndQueue+0x3c>)
   820ea:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   820ec:	4b09      	ldr	r3, [pc, #36]	; (82114 <prvCheckForValidListAndQueue+0x58>)
   820ee:	4798      	blx	r3
   820f0:	bd70      	pop	{r4, r5, r6, pc}
   820f2:	bf00      	nop
   820f4:	00080ef1 	.word	0x00080ef1
   820f8:	20078d60 	.word	0x20078d60
   820fc:	20078d34 	.word	0x20078d34
   82100:	00080dd9 	.word	0x00080dd9
   82104:	20078d48 	.word	0x20078d48
   82108:	20078d30 	.word	0x20078d30
   8210c:	20078d64 	.word	0x20078d64
   82110:	000812d5 	.word	0x000812d5
   82114:	00080f11 	.word	0x00080f11

00082118 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   82118:	b510      	push	{r4, lr}
   8211a:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   8211c:	4b0b      	ldr	r3, [pc, #44]	; (8214c <xTimerCreateTimerTask+0x34>)
   8211e:	4798      	blx	r3

	if( xTimerQueue != NULL )
   82120:	4b0b      	ldr	r3, [pc, #44]	; (82150 <xTimerCreateTimerTask+0x38>)
   82122:	681b      	ldr	r3, [r3, #0]
   82124:	b163      	cbz	r3, 82140 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   82126:	2309      	movs	r3, #9
   82128:	9300      	str	r3, [sp, #0]
   8212a:	2300      	movs	r3, #0
   8212c:	9301      	str	r3, [sp, #4]
   8212e:	9302      	str	r3, [sp, #8]
   82130:	9303      	str	r3, [sp, #12]
   82132:	4808      	ldr	r0, [pc, #32]	; (82154 <xTimerCreateTimerTask+0x3c>)
   82134:	4908      	ldr	r1, [pc, #32]	; (82158 <xTimerCreateTimerTask+0x40>)
   82136:	f44f 7200 	mov.w	r2, #512	; 0x200
   8213a:	4c08      	ldr	r4, [pc, #32]	; (8215c <xTimerCreateTimerTask+0x44>)
   8213c:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   8213e:	b918      	cbnz	r0, 82148 <xTimerCreateTimerTask+0x30>
   82140:	4b07      	ldr	r3, [pc, #28]	; (82160 <xTimerCreateTimerTask+0x48>)
   82142:	4798      	blx	r3
   82144:	bf00      	nop
   82146:	e7fd      	b.n	82144 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   82148:	b004      	add	sp, #16
   8214a:	bd10      	pop	{r4, pc}
   8214c:	000820bd 	.word	0x000820bd
   82150:	20078d60 	.word	0x20078d60
   82154:	00082275 	.word	0x00082275
   82158:	0008641c 	.word	0x0008641c
   8215c:	000816f1 	.word	0x000816f1
   82160:	00080ee1 	.word	0x00080ee1

00082164 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   82164:	b510      	push	{r4, lr}
   82166:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   82168:	4c10      	ldr	r4, [pc, #64]	; (821ac <xTimerGenericCommand+0x48>)
   8216a:	6824      	ldr	r4, [r4, #0]
   8216c:	b1d4      	cbz	r4, 821a4 <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   8216e:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   82170:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   82174:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   82176:	b973      	cbnz	r3, 82196 <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   82178:	4b0d      	ldr	r3, [pc, #52]	; (821b0 <xTimerGenericCommand+0x4c>)
   8217a:	4798      	blx	r3
   8217c:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   8217e:	4b0b      	ldr	r3, [pc, #44]	; (821ac <xTimerGenericCommand+0x48>)
   82180:	6818      	ldr	r0, [r3, #0]
   82182:	a901      	add	r1, sp, #4
   82184:	bf07      	ittee	eq
   82186:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   8218a:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   8218c:	2200      	movne	r2, #0
   8218e:	4613      	movne	r3, r2
   82190:	4c08      	ldr	r4, [pc, #32]	; (821b4 <xTimerGenericCommand+0x50>)
   82192:	47a0      	blx	r4
   82194:	e007      	b.n	821a6 <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   82196:	4620      	mov	r0, r4
   82198:	a901      	add	r1, sp, #4
   8219a:	461a      	mov	r2, r3
   8219c:	2300      	movs	r3, #0
   8219e:	4c06      	ldr	r4, [pc, #24]	; (821b8 <xTimerGenericCommand+0x54>)
   821a0:	47a0      	blx	r4
   821a2:	e000      	b.n	821a6 <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   821a4:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   821a6:	b004      	add	sp, #16
   821a8:	bd10      	pop	{r4, pc}
   821aa:	bf00      	nop
   821ac:	20078d60 	.word	0x20078d60
   821b0:	00081f7d 	.word	0x00081f7d
   821b4:	0008132d 	.word	0x0008132d
   821b8:	00081455 	.word	0x00081455

000821bc <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   821bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   821c0:	b082      	sub	sp, #8
   821c2:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   821c4:	4b23      	ldr	r3, [pc, #140]	; (82254 <prvSampleTimeNow+0x98>)
   821c6:	4798      	blx	r3
   821c8:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   821ca:	4b23      	ldr	r3, [pc, #140]	; (82258 <prvSampleTimeNow+0x9c>)
   821cc:	881b      	ldrh	r3, [r3, #0]
   821ce:	4283      	cmp	r3, r0
   821d0:	d936      	bls.n	82240 <prvSampleTimeNow+0x84>
   821d2:	e026      	b.n	82222 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   821d4:	68da      	ldr	r2, [r3, #12]
   821d6:	8815      	ldrh	r5, [r2, #0]
   821d8:	b2ad      	uxth	r5, r5

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   821da:	68db      	ldr	r3, [r3, #12]
   821dc:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   821de:	f104 0a04 	add.w	sl, r4, #4
   821e2:	4650      	mov	r0, sl
   821e4:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   821e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   821e8:	4620      	mov	r0, r4
   821ea:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   821ec:	69e3      	ldr	r3, [r4, #28]
   821ee:	2b01      	cmp	r3, #1
   821f0:	d119      	bne.n	82226 <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   821f2:	8b23      	ldrh	r3, [r4, #24]
   821f4:	442b      	add	r3, r5
   821f6:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   821f8:	42ab      	cmp	r3, r5
   821fa:	d906      	bls.n	8220a <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   821fc:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   821fe:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82200:	6830      	ldr	r0, [r6, #0]
   82202:	4651      	mov	r1, sl
   82204:	4b15      	ldr	r3, [pc, #84]	; (8225c <prvSampleTimeNow+0xa0>)
   82206:	4798      	blx	r3
   82208:	e00d      	b.n	82226 <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8220a:	2300      	movs	r3, #0
   8220c:	9300      	str	r3, [sp, #0]
   8220e:	4620      	mov	r0, r4
   82210:	4619      	mov	r1, r3
   82212:	462a      	mov	r2, r5
   82214:	4c12      	ldr	r4, [pc, #72]	; (82260 <prvSampleTimeNow+0xa4>)
   82216:	47a0      	blx	r4
				configASSERT( xResult );
   82218:	b928      	cbnz	r0, 82226 <prvSampleTimeNow+0x6a>
   8221a:	4b12      	ldr	r3, [pc, #72]	; (82264 <prvSampleTimeNow+0xa8>)
   8221c:	4798      	blx	r3
   8221e:	bf00      	nop
   82220:	e7fd      	b.n	8221e <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82222:	4e11      	ldr	r6, [pc, #68]	; (82268 <prvSampleTimeNow+0xac>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82224:	4f11      	ldr	r7, [pc, #68]	; (8226c <prvSampleTimeNow+0xb0>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82226:	6833      	ldr	r3, [r6, #0]
   82228:	681a      	ldr	r2, [r3, #0]
   8222a:	2a00      	cmp	r2, #0
   8222c:	d1d2      	bne.n	821d4 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   8222e:	4a10      	ldr	r2, [pc, #64]	; (82270 <prvSampleTimeNow+0xb4>)
   82230:	6810      	ldr	r0, [r2, #0]
   82232:	490d      	ldr	r1, [pc, #52]	; (82268 <prvSampleTimeNow+0xac>)
   82234:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   82236:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82238:	2301      	movs	r3, #1
   8223a:	f8c9 3000 	str.w	r3, [r9]
   8223e:	e002      	b.n	82246 <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82240:	2300      	movs	r3, #0
   82242:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   82246:	4b04      	ldr	r3, [pc, #16]	; (82258 <prvSampleTimeNow+0x9c>)
   82248:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   8224c:	4640      	mov	r0, r8
   8224e:	b002      	add	sp, #8
   82250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82254:	00081971 	.word	0x00081971
   82258:	20078d5c 	.word	0x20078d5c
   8225c:	00080e15 	.word	0x00080e15
   82260:	00082165 	.word	0x00082165
   82264:	00080ee1 	.word	0x00080ee1
   82268:	20078d30 	.word	0x20078d30
   8226c:	00080e59 	.word	0x00080e59
   82270:	20078d64 	.word	0x20078d64

00082274 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82278:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8227a:	4d51      	ldr	r5, [pc, #324]	; (823c0 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8227c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 823f0 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82280:	4b50      	ldr	r3, [pc, #320]	; (823c4 <prvTimerTask+0x150>)
   82282:	681b      	ldr	r3, [r3, #0]
   82284:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   82286:	2a00      	cmp	r2, #0
   82288:	f000 8090 	beq.w	823ac <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8228c:	68db      	ldr	r3, [r3, #12]
   8228e:	881c      	ldrh	r4, [r3, #0]
   82290:	b2a4      	uxth	r4, r4
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82292:	4b4d      	ldr	r3, [pc, #308]	; (823c8 <prvTimerTask+0x154>)
   82294:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82296:	a803      	add	r0, sp, #12
   82298:	4b4c      	ldr	r3, [pc, #304]	; (823cc <prvTimerTask+0x158>)
   8229a:	4798      	blx	r3
   8229c:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8229e:	9b03      	ldr	r3, [sp, #12]
   822a0:	2b00      	cmp	r3, #0
   822a2:	d132      	bne.n	8230a <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   822a4:	4284      	cmp	r4, r0
   822a6:	d825      	bhi.n	822f4 <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   822a8:	4b49      	ldr	r3, [pc, #292]	; (823d0 <prvTimerTask+0x15c>)
   822aa:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   822ac:	4b45      	ldr	r3, [pc, #276]	; (823c4 <prvTimerTask+0x150>)
   822ae:	681b      	ldr	r3, [r3, #0]
   822b0:	68db      	ldr	r3, [r3, #12]
   822b2:	68de      	ldr	r6, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   822b4:	1d30      	adds	r0, r6, #4
   822b6:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   822b8:	69f3      	ldr	r3, [r6, #28]
   822ba:	2b01      	cmp	r3, #1
   822bc:	d115      	bne.n	822ea <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   822be:	8b31      	ldrh	r1, [r6, #24]
   822c0:	4421      	add	r1, r4
   822c2:	4630      	mov	r0, r6
   822c4:	b289      	uxth	r1, r1
   822c6:	463a      	mov	r2, r7
   822c8:	4623      	mov	r3, r4
   822ca:	4f42      	ldr	r7, [pc, #264]	; (823d4 <prvTimerTask+0x160>)
   822cc:	47b8      	blx	r7
   822ce:	2801      	cmp	r0, #1
   822d0:	d10b      	bne.n	822ea <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   822d2:	2300      	movs	r3, #0
   822d4:	9300      	str	r3, [sp, #0]
   822d6:	4630      	mov	r0, r6
   822d8:	4619      	mov	r1, r3
   822da:	4622      	mov	r2, r4
   822dc:	4c3e      	ldr	r4, [pc, #248]	; (823d8 <prvTimerTask+0x164>)
   822de:	47a0      	blx	r4
			configASSERT( xResult );
   822e0:	b918      	cbnz	r0, 822ea <prvTimerTask+0x76>
   822e2:	4b3e      	ldr	r3, [pc, #248]	; (823dc <prvTimerTask+0x168>)
   822e4:	4798      	blx	r3
   822e6:	bf00      	nop
   822e8:	e7fd      	b.n	822e6 <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   822ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
   822ec:	4630      	mov	r0, r6
   822ee:	4798      	blx	r3
   822f0:	e00d      	b.n	8230e <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   822f2:	2400      	movs	r4, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   822f4:	1be1      	subs	r1, r4, r7
   822f6:	6828      	ldr	r0, [r5, #0]
   822f8:	b289      	uxth	r1, r1
   822fa:	4b39      	ldr	r3, [pc, #228]	; (823e0 <prvTimerTask+0x16c>)
   822fc:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   822fe:	4b34      	ldr	r3, [pc, #208]	; (823d0 <prvTimerTask+0x15c>)
   82300:	4798      	blx	r3
   82302:	b920      	cbnz	r0, 8230e <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82304:	4b37      	ldr	r3, [pc, #220]	; (823e4 <prvTimerTask+0x170>)
   82306:	4798      	blx	r3
   82308:	e001      	b.n	8230e <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   8230a:	4b31      	ldr	r3, [pc, #196]	; (823d0 <prvTimerTask+0x15c>)
   8230c:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8230e:	a802      	add	r0, sp, #8
   82310:	4b2e      	ldr	r3, [pc, #184]	; (823cc <prvTimerTask+0x158>)
   82312:	4798      	blx	r3
   82314:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82316:	4e34      	ldr	r6, [pc, #208]	; (823e8 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82318:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 823d4 <prvTimerTask+0x160>
   8231c:	e03e      	b.n	8239c <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   8231e:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   82320:	b11c      	cbz	r4, 8232a <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   82322:	6963      	ldr	r3, [r4, #20]
   82324:	b10b      	cbz	r3, 8232a <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82326:	1d20      	adds	r0, r4, #4
   82328:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   8232a:	9b03      	ldr	r3, [sp, #12]
   8232c:	2b02      	cmp	r3, #2
   8232e:	d023      	beq.n	82378 <prvTimerTask+0x104>
   82330:	2b03      	cmp	r3, #3
   82332:	d030      	beq.n	82396 <prvTimerTask+0x122>
   82334:	2b00      	cmp	r3, #0
   82336:	d131      	bne.n	8239c <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82338:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   8233c:	8b21      	ldrh	r1, [r4, #24]
   8233e:	4419      	add	r1, r3
   82340:	4620      	mov	r0, r4
   82342:	b289      	uxth	r1, r1
   82344:	463a      	mov	r2, r7
   82346:	47c8      	blx	r9
   82348:	2801      	cmp	r0, #1
   8234a:	d127      	bne.n	8239c <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8234c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8234e:	4620      	mov	r0, r4
   82350:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82352:	69e3      	ldr	r3, [r4, #28]
   82354:	2b01      	cmp	r3, #1
   82356:	d121      	bne.n	8239c <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82358:	8b22      	ldrh	r2, [r4, #24]
   8235a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   8235e:	441a      	add	r2, r3
   82360:	2300      	movs	r3, #0
   82362:	9300      	str	r3, [sp, #0]
   82364:	4620      	mov	r0, r4
   82366:	4619      	mov	r1, r3
   82368:	b292      	uxth	r2, r2
   8236a:	4c1b      	ldr	r4, [pc, #108]	; (823d8 <prvTimerTask+0x164>)
   8236c:	47a0      	blx	r4
						configASSERT( xResult );
   8236e:	b9a8      	cbnz	r0, 8239c <prvTimerTask+0x128>
   82370:	4b1a      	ldr	r3, [pc, #104]	; (823dc <prvTimerTask+0x168>)
   82372:	4798      	blx	r3
   82374:	bf00      	nop
   82376:	e7fd      	b.n	82374 <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   82378:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   8237c:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8237e:	b91b      	cbnz	r3, 82388 <prvTimerTask+0x114>
   82380:	4b16      	ldr	r3, [pc, #88]	; (823dc <prvTimerTask+0x168>)
   82382:	4798      	blx	r3
   82384:	bf00      	nop
   82386:	e7fd      	b.n	82384 <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82388:	18f9      	adds	r1, r7, r3
   8238a:	4620      	mov	r0, r4
   8238c:	b289      	uxth	r1, r1
   8238e:	463a      	mov	r2, r7
   82390:	463b      	mov	r3, r7
   82392:	47c8      	blx	r9
   82394:	e002      	b.n	8239c <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   82396:	4620      	mov	r0, r4
   82398:	4b14      	ldr	r3, [pc, #80]	; (823ec <prvTimerTask+0x178>)
   8239a:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   8239c:	6828      	ldr	r0, [r5, #0]
   8239e:	a903      	add	r1, sp, #12
   823a0:	2200      	movs	r2, #0
   823a2:	4613      	mov	r3, r2
   823a4:	47b0      	blx	r6
   823a6:	2800      	cmp	r0, #0
   823a8:	d1b9      	bne.n	8231e <prvTimerTask+0xaa>
   823aa:	e769      	b.n	82280 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   823ac:	4b06      	ldr	r3, [pc, #24]	; (823c8 <prvTimerTask+0x154>)
   823ae:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   823b0:	a803      	add	r0, sp, #12
   823b2:	4b06      	ldr	r3, [pc, #24]	; (823cc <prvTimerTask+0x158>)
   823b4:	4798      	blx	r3
   823b6:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   823b8:	9b03      	ldr	r3, [sp, #12]
   823ba:	2b00      	cmp	r3, #0
   823bc:	d099      	beq.n	822f2 <prvTimerTask+0x7e>
   823be:	e7a4      	b.n	8230a <prvTimerTask+0x96>
   823c0:	20078d60 	.word	0x20078d60
   823c4:	20078d30 	.word	0x20078d30
   823c8:	00081961 	.word	0x00081961
   823cc:	000821bd 	.word	0x000821bd
   823d0:	00081abd 	.word	0x00081abd
   823d4:	0008206d 	.word	0x0008206d
   823d8:	00082165 	.word	0x00082165
   823dc:	00080ee1 	.word	0x00080ee1
   823e0:	00081649 	.word	0x00081649
   823e4:	00080ed1 	.word	0x00080ed1
   823e8:	000814e5 	.word	0x000814e5
   823ec:	00081105 	.word	0x00081105
   823f0:	00080e59 	.word	0x00080e59

000823f4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   823f4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   823f6:	480e      	ldr	r0, [pc, #56]	; (82430 <sysclk_init+0x3c>)
   823f8:	4b0e      	ldr	r3, [pc, #56]	; (82434 <sysclk_init+0x40>)
   823fa:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   823fc:	2000      	movs	r0, #0
   823fe:	213e      	movs	r1, #62	; 0x3e
   82400:	4b0d      	ldr	r3, [pc, #52]	; (82438 <sysclk_init+0x44>)
   82402:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82404:	4c0d      	ldr	r4, [pc, #52]	; (8243c <sysclk_init+0x48>)
   82406:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82408:	2800      	cmp	r0, #0
   8240a:	d0fc      	beq.n	82406 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8240c:	4b0c      	ldr	r3, [pc, #48]	; (82440 <sysclk_init+0x4c>)
   8240e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82410:	4a0c      	ldr	r2, [pc, #48]	; (82444 <sysclk_init+0x50>)
   82412:	4b0d      	ldr	r3, [pc, #52]	; (82448 <sysclk_init+0x54>)
   82414:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82416:	4c0d      	ldr	r4, [pc, #52]	; (8244c <sysclk_init+0x58>)
   82418:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8241a:	2800      	cmp	r0, #0
   8241c:	d0fc      	beq.n	82418 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8241e:	2010      	movs	r0, #16
   82420:	4b0b      	ldr	r3, [pc, #44]	; (82450 <sysclk_init+0x5c>)
   82422:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82424:	4b0b      	ldr	r3, [pc, #44]	; (82454 <sysclk_init+0x60>)
   82426:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82428:	4801      	ldr	r0, [pc, #4]	; (82430 <sysclk_init+0x3c>)
   8242a:	4b02      	ldr	r3, [pc, #8]	; (82434 <sysclk_init+0x40>)
   8242c:	4798      	blx	r3
   8242e:	bd10      	pop	{r4, pc}
   82430:	0501bd00 	.word	0x0501bd00
   82434:	200700b1 	.word	0x200700b1
   82438:	000827e9 	.word	0x000827e9
   8243c:	0008283d 	.word	0x0008283d
   82440:	0008284d 	.word	0x0008284d
   82444:	200d3f01 	.word	0x200d3f01
   82448:	400e0600 	.word	0x400e0600
   8244c:	0008285d 	.word	0x0008285d
   82450:	00082781 	.word	0x00082781
   82454:	00082975 	.word	0x00082975

00082458 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82458:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8245a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8245e:	4b12      	ldr	r3, [pc, #72]	; (824a8 <board_init+0x50>)
   82460:	605a      	str	r2, [r3, #4]
   82462:	200b      	movs	r0, #11
   82464:	4c11      	ldr	r4, [pc, #68]	; (824ac <board_init+0x54>)
   82466:	47a0      	blx	r4
   82468:	200c      	movs	r0, #12
   8246a:	47a0      	blx	r4
   8246c:	200d      	movs	r0, #13
   8246e:	47a0      	blx	r4
   82470:	200e      	movs	r0, #14
   82472:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82474:	203b      	movs	r0, #59	; 0x3b
   82476:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8247a:	4c0d      	ldr	r4, [pc, #52]	; (824b0 <board_init+0x58>)
   8247c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8247e:	2055      	movs	r0, #85	; 0x55
   82480:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82484:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82486:	2056      	movs	r0, #86	; 0x56
   82488:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8248c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8248e:	2068      	movs	r0, #104	; 0x68
   82490:	4908      	ldr	r1, [pc, #32]	; (824b4 <board_init+0x5c>)
   82492:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82494:	205c      	movs	r0, #92	; 0x5c
   82496:	4908      	ldr	r1, [pc, #32]	; (824b8 <board_init+0x60>)
   82498:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8249a:	4808      	ldr	r0, [pc, #32]	; (824bc <board_init+0x64>)
   8249c:	f44f 7140 	mov.w	r1, #768	; 0x300
   824a0:	4a07      	ldr	r2, [pc, #28]	; (824c0 <board_init+0x68>)
   824a2:	4b08      	ldr	r3, [pc, #32]	; (824c4 <board_init+0x6c>)
   824a4:	4798      	blx	r3
   824a6:	bd10      	pop	{r4, pc}
   824a8:	400e1a50 	.word	0x400e1a50
   824ac:	0008286d 	.word	0x0008286d
   824b0:	0008256d 	.word	0x0008256d
   824b4:	28000079 	.word	0x28000079
   824b8:	28000001 	.word	0x28000001
   824bc:	400e0e00 	.word	0x400e0e00
   824c0:	08000001 	.word	0x08000001
   824c4:	00082641 	.word	0x00082641

000824c8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   824c8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   824ca:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   824ce:	d016      	beq.n	824fe <pio_set_peripheral+0x36>
   824d0:	d804      	bhi.n	824dc <pio_set_peripheral+0x14>
   824d2:	b1c1      	cbz	r1, 82506 <pio_set_peripheral+0x3e>
   824d4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   824d8:	d00a      	beq.n	824f0 <pio_set_peripheral+0x28>
   824da:	e013      	b.n	82504 <pio_set_peripheral+0x3c>
   824dc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   824e0:	d011      	beq.n	82506 <pio_set_peripheral+0x3e>
   824e2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   824e6:	d00e      	beq.n	82506 <pio_set_peripheral+0x3e>
   824e8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   824ec:	d10a      	bne.n	82504 <pio_set_peripheral+0x3c>
   824ee:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   824f0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   824f2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   824f4:	400b      	ands	r3, r1
   824f6:	ea23 0302 	bic.w	r3, r3, r2
   824fa:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   824fc:	e002      	b.n	82504 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   824fe:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82500:	4313      	orrs	r3, r2
   82502:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82504:	6042      	str	r2, [r0, #4]
   82506:	4770      	bx	lr

00082508 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82508:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8250a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8250e:	bf14      	ite	ne
   82510:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82512:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82514:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82518:	bf14      	ite	ne
   8251a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8251c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8251e:	f012 0f02 	tst.w	r2, #2
   82522:	d002      	beq.n	8252a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   82524:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82528:	e004      	b.n	82534 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8252a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8252e:	bf18      	it	ne
   82530:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82534:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82536:	6001      	str	r1, [r0, #0]
   82538:	4770      	bx	lr
   8253a:	bf00      	nop

0008253c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8253c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8253e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82540:	9c01      	ldr	r4, [sp, #4]
   82542:	b10c      	cbz	r4, 82548 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   82544:	6641      	str	r1, [r0, #100]	; 0x64
   82546:	e000      	b.n	8254a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82548:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8254a:	b10b      	cbz	r3, 82550 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8254c:	6501      	str	r1, [r0, #80]	; 0x50
   8254e:	e000      	b.n	82552 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82550:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82552:	b10a      	cbz	r2, 82558 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   82554:	6301      	str	r1, [r0, #48]	; 0x30
   82556:	e000      	b.n	8255a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82558:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8255a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8255c:	6001      	str	r1, [r0, #0]
}
   8255e:	f85d 4b04 	ldr.w	r4, [sp], #4
   82562:	4770      	bx	lr

00082564 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82564:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82566:	4770      	bx	lr

00082568 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82568:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8256a:	4770      	bx	lr

0008256c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8256c:	b570      	push	{r4, r5, r6, lr}
   8256e:	b082      	sub	sp, #8
   82570:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82572:	0943      	lsrs	r3, r0, #5
   82574:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82578:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8257c:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8257e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   82582:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82586:	d030      	beq.n	825ea <pio_configure_pin+0x7e>
   82588:	d806      	bhi.n	82598 <pio_configure_pin+0x2c>
   8258a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8258e:	d00a      	beq.n	825a6 <pio_configure_pin+0x3a>
   82590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82594:	d018      	beq.n	825c8 <pio_configure_pin+0x5c>
   82596:	e049      	b.n	8262c <pio_configure_pin+0xc0>
   82598:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8259c:	d030      	beq.n	82600 <pio_configure_pin+0x94>
   8259e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   825a2:	d02d      	beq.n	82600 <pio_configure_pin+0x94>
   825a4:	e042      	b.n	8262c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   825a6:	f000 001f 	and.w	r0, r0, #31
   825aa:	2601      	movs	r6, #1
   825ac:	4086      	lsls	r6, r0
   825ae:	4620      	mov	r0, r4
   825b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   825b4:	4632      	mov	r2, r6
   825b6:	4b1f      	ldr	r3, [pc, #124]	; (82634 <pio_configure_pin+0xc8>)
   825b8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   825ba:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   825be:	bf14      	ite	ne
   825c0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   825c2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   825c4:	2001      	movs	r0, #1
   825c6:	e032      	b.n	8262e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   825c8:	f000 001f 	and.w	r0, r0, #31
   825cc:	2601      	movs	r6, #1
   825ce:	4086      	lsls	r6, r0
   825d0:	4620      	mov	r0, r4
   825d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   825d6:	4632      	mov	r2, r6
   825d8:	4b16      	ldr	r3, [pc, #88]	; (82634 <pio_configure_pin+0xc8>)
   825da:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   825dc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   825e0:	bf14      	ite	ne
   825e2:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   825e4:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   825e6:	2001      	movs	r0, #1
   825e8:	e021      	b.n	8262e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   825ea:	f000 031f 	and.w	r3, r0, #31
   825ee:	2601      	movs	r6, #1
   825f0:	4620      	mov	r0, r4
   825f2:	fa06 f103 	lsl.w	r1, r6, r3
   825f6:	462a      	mov	r2, r5
   825f8:	4b0f      	ldr	r3, [pc, #60]	; (82638 <pio_configure_pin+0xcc>)
   825fa:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   825fc:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   825fe:	e016      	b.n	8262e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82600:	f000 031f 	and.w	r3, r0, #31
   82604:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82606:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8260a:	ea05 0106 	and.w	r1, r5, r6
   8260e:	9100      	str	r1, [sp, #0]
   82610:	4620      	mov	r0, r4
   82612:	fa06 f103 	lsl.w	r1, r6, r3
   82616:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8261a:	bf14      	ite	ne
   8261c:	2200      	movne	r2, #0
   8261e:	2201      	moveq	r2, #1
   82620:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82624:	4c05      	ldr	r4, [pc, #20]	; (8263c <pio_configure_pin+0xd0>)
   82626:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82628:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8262a:	e000      	b.n	8262e <pio_configure_pin+0xc2>

	default:
		return 0;
   8262c:	2000      	movs	r0, #0
	}

	return 1;
}
   8262e:	b002      	add	sp, #8
   82630:	bd70      	pop	{r4, r5, r6, pc}
   82632:	bf00      	nop
   82634:	000824c9 	.word	0x000824c9
   82638:	00082509 	.word	0x00082509
   8263c:	0008253d 	.word	0x0008253d

00082640 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82640:	b570      	push	{r4, r5, r6, lr}
   82642:	b082      	sub	sp, #8
   82644:	4606      	mov	r6, r0
   82646:	460d      	mov	r5, r1
   82648:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8264a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8264e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82652:	d026      	beq.n	826a2 <pio_configure_pin_group+0x62>
   82654:	d806      	bhi.n	82664 <pio_configure_pin_group+0x24>
   82656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8265a:	d00a      	beq.n	82672 <pio_configure_pin_group+0x32>
   8265c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82660:	d013      	beq.n	8268a <pio_configure_pin_group+0x4a>
   82662:	e034      	b.n	826ce <pio_configure_pin_group+0x8e>
   82664:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82668:	d01f      	beq.n	826aa <pio_configure_pin_group+0x6a>
   8266a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8266e:	d01c      	beq.n	826aa <pio_configure_pin_group+0x6a>
   82670:	e02d      	b.n	826ce <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82672:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82676:	462a      	mov	r2, r5
   82678:	4b16      	ldr	r3, [pc, #88]	; (826d4 <pio_configure_pin_group+0x94>)
   8267a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8267c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82680:	bf14      	ite	ne
   82682:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82684:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82686:	2001      	movs	r0, #1
   82688:	e022      	b.n	826d0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8268a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8268e:	462a      	mov	r2, r5
   82690:	4b10      	ldr	r3, [pc, #64]	; (826d4 <pio_configure_pin_group+0x94>)
   82692:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82694:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82698:	bf14      	ite	ne
   8269a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8269c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8269e:	2001      	movs	r0, #1
   826a0:	e016      	b.n	826d0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   826a2:	4b0d      	ldr	r3, [pc, #52]	; (826d8 <pio_configure_pin_group+0x98>)
   826a4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   826a6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   826a8:	e012      	b.n	826d0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   826aa:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   826ae:	f004 0301 	and.w	r3, r4, #1
   826b2:	9300      	str	r3, [sp, #0]
   826b4:	4630      	mov	r0, r6
   826b6:	4629      	mov	r1, r5
   826b8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   826bc:	bf14      	ite	ne
   826be:	2200      	movne	r2, #0
   826c0:	2201      	moveq	r2, #1
   826c2:	f3c4 0380 	ubfx	r3, r4, #2, #1
   826c6:	4c05      	ldr	r4, [pc, #20]	; (826dc <pio_configure_pin_group+0x9c>)
   826c8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   826ca:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   826cc:	e000      	b.n	826d0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   826ce:	2000      	movs	r0, #0
	}

	return 1;
}
   826d0:	b002      	add	sp, #8
   826d2:	bd70      	pop	{r4, r5, r6, pc}
   826d4:	000824c9 	.word	0x000824c9
   826d8:	00082509 	.word	0x00082509
   826dc:	0008253d 	.word	0x0008253d

000826e0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   826e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   826e4:	4604      	mov	r4, r0
   826e6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   826e8:	4b0e      	ldr	r3, [pc, #56]	; (82724 <pio_handler_process+0x44>)
   826ea:	4798      	blx	r3
   826ec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   826ee:	4620      	mov	r0, r4
   826f0:	4b0d      	ldr	r3, [pc, #52]	; (82728 <pio_handler_process+0x48>)
   826f2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   826f4:	4005      	ands	r5, r0
   826f6:	d013      	beq.n	82720 <pio_handler_process+0x40>
   826f8:	4c0c      	ldr	r4, [pc, #48]	; (8272c <pio_handler_process+0x4c>)
   826fa:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   826fe:	6823      	ldr	r3, [r4, #0]
   82700:	4543      	cmp	r3, r8
   82702:	d108      	bne.n	82716 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82704:	6861      	ldr	r1, [r4, #4]
   82706:	4229      	tst	r1, r5
   82708:	d005      	beq.n	82716 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8270a:	68e3      	ldr	r3, [r4, #12]
   8270c:	4640      	mov	r0, r8
   8270e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82710:	6863      	ldr	r3, [r4, #4]
   82712:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82716:	42b4      	cmp	r4, r6
   82718:	d002      	beq.n	82720 <pio_handler_process+0x40>
   8271a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8271c:	2d00      	cmp	r5, #0
   8271e:	d1ee      	bne.n	826fe <pio_handler_process+0x1e>
   82720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82724:	00082565 	.word	0x00082565
   82728:	00082569 	.word	0x00082569
   8272c:	20078d68 	.word	0x20078d68

00082730 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82730:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82732:	4802      	ldr	r0, [pc, #8]	; (8273c <PIOA_Handler+0xc>)
   82734:	210b      	movs	r1, #11
   82736:	4b02      	ldr	r3, [pc, #8]	; (82740 <PIOA_Handler+0x10>)
   82738:	4798      	blx	r3
   8273a:	bd08      	pop	{r3, pc}
   8273c:	400e0e00 	.word	0x400e0e00
   82740:	000826e1 	.word	0x000826e1

00082744 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82744:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82746:	4802      	ldr	r0, [pc, #8]	; (82750 <PIOB_Handler+0xc>)
   82748:	210c      	movs	r1, #12
   8274a:	4b02      	ldr	r3, [pc, #8]	; (82754 <PIOB_Handler+0x10>)
   8274c:	4798      	blx	r3
   8274e:	bd08      	pop	{r3, pc}
   82750:	400e1000 	.word	0x400e1000
   82754:	000826e1 	.word	0x000826e1

00082758 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82758:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8275a:	4802      	ldr	r0, [pc, #8]	; (82764 <PIOC_Handler+0xc>)
   8275c:	210d      	movs	r1, #13
   8275e:	4b02      	ldr	r3, [pc, #8]	; (82768 <PIOC_Handler+0x10>)
   82760:	4798      	blx	r3
   82762:	bd08      	pop	{r3, pc}
   82764:	400e1200 	.word	0x400e1200
   82768:	000826e1 	.word	0x000826e1

0008276c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8276c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8276e:	4802      	ldr	r0, [pc, #8]	; (82778 <PIOD_Handler+0xc>)
   82770:	210e      	movs	r1, #14
   82772:	4b02      	ldr	r3, [pc, #8]	; (8277c <PIOD_Handler+0x10>)
   82774:	4798      	blx	r3
   82776:	bd08      	pop	{r3, pc}
   82778:	400e1400 	.word	0x400e1400
   8277c:	000826e1 	.word	0x000826e1

00082780 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82780:	4a18      	ldr	r2, [pc, #96]	; (827e4 <pmc_switch_mck_to_pllack+0x64>)
   82782:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82788:	4318      	orrs	r0, r3
   8278a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8278c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8278e:	f013 0f08 	tst.w	r3, #8
   82792:	d003      	beq.n	8279c <pmc_switch_mck_to_pllack+0x1c>
   82794:	e009      	b.n	827aa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82796:	3b01      	subs	r3, #1
   82798:	d103      	bne.n	827a2 <pmc_switch_mck_to_pllack+0x22>
   8279a:	e01e      	b.n	827da <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8279c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   827a0:	4910      	ldr	r1, [pc, #64]	; (827e4 <pmc_switch_mck_to_pllack+0x64>)
   827a2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   827a4:	f012 0f08 	tst.w	r2, #8
   827a8:	d0f5      	beq.n	82796 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   827aa:	4a0e      	ldr	r2, [pc, #56]	; (827e4 <pmc_switch_mck_to_pllack+0x64>)
   827ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
   827ae:	f023 0303 	bic.w	r3, r3, #3
   827b2:	f043 0302 	orr.w	r3, r3, #2
   827b6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827b8:	6e90      	ldr	r0, [r2, #104]	; 0x68
   827ba:	f010 0008 	ands.w	r0, r0, #8
   827be:	d004      	beq.n	827ca <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   827c0:	2000      	movs	r0, #0
   827c2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   827c4:	3b01      	subs	r3, #1
   827c6:	d103      	bne.n	827d0 <pmc_switch_mck_to_pllack+0x50>
   827c8:	e009      	b.n	827de <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
   827ce:	4905      	ldr	r1, [pc, #20]	; (827e4 <pmc_switch_mck_to_pllack+0x64>)
   827d0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   827d2:	f012 0f08 	tst.w	r2, #8
   827d6:	d0f5      	beq.n	827c4 <pmc_switch_mck_to_pllack+0x44>
   827d8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   827da:	2001      	movs	r0, #1
   827dc:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   827de:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   827e0:	4770      	bx	lr
   827e2:	bf00      	nop
   827e4:	400e0600 	.word	0x400e0600

000827e8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   827e8:	b138      	cbz	r0, 827fa <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   827ea:	4911      	ldr	r1, [pc, #68]	; (82830 <pmc_switch_mainck_to_xtal+0x48>)
   827ec:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   827ee:	4a11      	ldr	r2, [pc, #68]	; (82834 <pmc_switch_mainck_to_xtal+0x4c>)
   827f0:	401a      	ands	r2, r3
   827f2:	4b11      	ldr	r3, [pc, #68]	; (82838 <pmc_switch_mainck_to_xtal+0x50>)
   827f4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   827f6:	620b      	str	r3, [r1, #32]
   827f8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   827fa:	4a0d      	ldr	r2, [pc, #52]	; (82830 <pmc_switch_mainck_to_xtal+0x48>)
   827fc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   827fe:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82802:	f023 0303 	bic.w	r3, r3, #3
   82806:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8280a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8280e:	0209      	lsls	r1, r1, #8
   82810:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82812:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82814:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82816:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82818:	f013 0f01 	tst.w	r3, #1
   8281c:	d0fb      	beq.n	82816 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8281e:	4a04      	ldr	r2, [pc, #16]	; (82830 <pmc_switch_mainck_to_xtal+0x48>)
   82820:	6a13      	ldr	r3, [r2, #32]
   82822:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8282a:	6213      	str	r3, [r2, #32]
   8282c:	4770      	bx	lr
   8282e:	bf00      	nop
   82830:	400e0600 	.word	0x400e0600
   82834:	fec8fffc 	.word	0xfec8fffc
   82838:	01370002 	.word	0x01370002

0008283c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8283c:	4b02      	ldr	r3, [pc, #8]	; (82848 <pmc_osc_is_ready_mainck+0xc>)
   8283e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82840:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82844:	4770      	bx	lr
   82846:	bf00      	nop
   82848:	400e0600 	.word	0x400e0600

0008284c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8284c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82850:	4b01      	ldr	r3, [pc, #4]	; (82858 <pmc_disable_pllack+0xc>)
   82852:	629a      	str	r2, [r3, #40]	; 0x28
   82854:	4770      	bx	lr
   82856:	bf00      	nop
   82858:	400e0600 	.word	0x400e0600

0008285c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8285c:	4b02      	ldr	r3, [pc, #8]	; (82868 <pmc_is_locked_pllack+0xc>)
   8285e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82860:	f000 0002 	and.w	r0, r0, #2
   82864:	4770      	bx	lr
   82866:	bf00      	nop
   82868:	400e0600 	.word	0x400e0600

0008286c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8286c:	282c      	cmp	r0, #44	; 0x2c
   8286e:	d81e      	bhi.n	828ae <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   82870:	281f      	cmp	r0, #31
   82872:	d80c      	bhi.n	8288e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82874:	4b11      	ldr	r3, [pc, #68]	; (828bc <pmc_enable_periph_clk+0x50>)
   82876:	699a      	ldr	r2, [r3, #24]
   82878:	2301      	movs	r3, #1
   8287a:	4083      	lsls	r3, r0
   8287c:	401a      	ands	r2, r3
   8287e:	4293      	cmp	r3, r2
   82880:	d017      	beq.n	828b2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   82882:	2301      	movs	r3, #1
   82884:	4083      	lsls	r3, r0
   82886:	4a0d      	ldr	r2, [pc, #52]	; (828bc <pmc_enable_periph_clk+0x50>)
   82888:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8288a:	2000      	movs	r0, #0
   8288c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8288e:	4b0b      	ldr	r3, [pc, #44]	; (828bc <pmc_enable_periph_clk+0x50>)
   82890:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   82894:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82896:	2301      	movs	r3, #1
   82898:	4083      	lsls	r3, r0
   8289a:	401a      	ands	r2, r3
   8289c:	4293      	cmp	r3, r2
   8289e:	d00a      	beq.n	828b6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   828a0:	2301      	movs	r3, #1
   828a2:	4083      	lsls	r3, r0
   828a4:	4a05      	ldr	r2, [pc, #20]	; (828bc <pmc_enable_periph_clk+0x50>)
   828a6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   828aa:	2000      	movs	r0, #0
   828ac:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   828ae:	2001      	movs	r0, #1
   828b0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   828b2:	2000      	movs	r0, #0
   828b4:	4770      	bx	lr
   828b6:	2000      	movs	r0, #0
}
   828b8:	4770      	bx	lr
   828ba:	bf00      	nop
   828bc:	400e0600 	.word	0x400e0600

000828c0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   828c0:	e7fe      	b.n	828c0 <Dummy_Handler>
   828c2:	bf00      	nop

000828c4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   828c4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   828c6:	4b1f      	ldr	r3, [pc, #124]	; (82944 <Reset_Handler+0x80>)
   828c8:	4a1f      	ldr	r2, [pc, #124]	; (82948 <Reset_Handler+0x84>)
   828ca:	429a      	cmp	r2, r3
   828cc:	d003      	beq.n	828d6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   828ce:	4b1f      	ldr	r3, [pc, #124]	; (8294c <Reset_Handler+0x88>)
   828d0:	4a1c      	ldr	r2, [pc, #112]	; (82944 <Reset_Handler+0x80>)
   828d2:	429a      	cmp	r2, r3
   828d4:	d304      	bcc.n	828e0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   828d6:	4b1e      	ldr	r3, [pc, #120]	; (82950 <Reset_Handler+0x8c>)
   828d8:	4a1e      	ldr	r2, [pc, #120]	; (82954 <Reset_Handler+0x90>)
   828da:	429a      	cmp	r2, r3
   828dc:	d310      	bcc.n	82900 <Reset_Handler+0x3c>
   828de:	e01b      	b.n	82918 <Reset_Handler+0x54>
   828e0:	4918      	ldr	r1, [pc, #96]	; (82944 <Reset_Handler+0x80>)
   828e2:	1d0a      	adds	r2, r1, #4
   828e4:	4b1c      	ldr	r3, [pc, #112]	; (82958 <Reset_Handler+0x94>)
   828e6:	1a9b      	subs	r3, r3, r2
   828e8:	f023 0303 	bic.w	r3, r3, #3
   828ec:	3304      	adds	r3, #4
   828ee:	4a16      	ldr	r2, [pc, #88]	; (82948 <Reset_Handler+0x84>)
   828f0:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   828f2:	f852 0b04 	ldr.w	r0, [r2], #4
   828f6:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   828fa:	429a      	cmp	r2, r3
   828fc:	d1f9      	bne.n	828f2 <Reset_Handler+0x2e>
   828fe:	e7ea      	b.n	828d6 <Reset_Handler+0x12>
   82900:	4b16      	ldr	r3, [pc, #88]	; (8295c <Reset_Handler+0x98>)
   82902:	4a17      	ldr	r2, [pc, #92]	; (82960 <Reset_Handler+0x9c>)
   82904:	1ad2      	subs	r2, r2, r3
   82906:	f022 0203 	bic.w	r2, r2, #3
   8290a:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8290c:	3b04      	subs	r3, #4
		*pDest++ = 0;
   8290e:	2100      	movs	r1, #0
   82910:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82914:	4293      	cmp	r3, r2
   82916:	d1fb      	bne.n	82910 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82918:	4b12      	ldr	r3, [pc, #72]	; (82964 <Reset_Handler+0xa0>)
   8291a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8291e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82922:	4911      	ldr	r1, [pc, #68]	; (82968 <Reset_Handler+0xa4>)
   82924:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82926:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8292a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8292e:	d203      	bcs.n	82938 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82930:	688b      	ldr	r3, [r1, #8]
   82932:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82936:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82938:	4b0c      	ldr	r3, [pc, #48]	; (8296c <Reset_Handler+0xa8>)
   8293a:	4798      	blx	r3

	/* Branch to main function */
	main();
   8293c:	4b0c      	ldr	r3, [pc, #48]	; (82970 <Reset_Handler+0xac>)
   8293e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82940:	e7fe      	b.n	82940 <Reset_Handler+0x7c>
   82942:	bf00      	nop
   82944:	20070000 	.word	0x20070000
   82948:	000865d4 	.word	0x000865d4
   8294c:	20070a08 	.word	0x20070a08
   82950:	20078e3c 	.word	0x20078e3c
   82954:	20070a08 	.word	0x20070a08
   82958:	20070a0b 	.word	0x20070a0b
   8295c:	20070a0c 	.word	0x20070a0c
   82960:	20078e3f 	.word	0x20078e3f
   82964:	00080000 	.word	0x00080000
   82968:	e000ed00 	.word	0xe000ed00
   8296c:	0008304d 	.word	0x0008304d
   82970:	00080881 	.word	0x00080881

00082974 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82974:	4b3e      	ldr	r3, [pc, #248]	; (82a70 <SystemCoreClockUpdate+0xfc>)
   82976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82978:	f003 0303 	and.w	r3, r3, #3
   8297c:	2b03      	cmp	r3, #3
   8297e:	d85f      	bhi.n	82a40 <SystemCoreClockUpdate+0xcc>
   82980:	e8df f003 	tbb	[pc, r3]
   82984:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82988:	4b3a      	ldr	r3, [pc, #232]	; (82a74 <SystemCoreClockUpdate+0x100>)
   8298a:	695b      	ldr	r3, [r3, #20]
   8298c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82990:	bf14      	ite	ne
   82992:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82996:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8299a:	4b37      	ldr	r3, [pc, #220]	; (82a78 <SystemCoreClockUpdate+0x104>)
   8299c:	601a      	str	r2, [r3, #0]
   8299e:	e04f      	b.n	82a40 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   829a0:	4b33      	ldr	r3, [pc, #204]	; (82a70 <SystemCoreClockUpdate+0xfc>)
   829a2:	6a1b      	ldr	r3, [r3, #32]
   829a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   829a8:	d003      	beq.n	829b2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   829aa:	4a34      	ldr	r2, [pc, #208]	; (82a7c <SystemCoreClockUpdate+0x108>)
   829ac:	4b32      	ldr	r3, [pc, #200]	; (82a78 <SystemCoreClockUpdate+0x104>)
   829ae:	601a      	str	r2, [r3, #0]
   829b0:	e046      	b.n	82a40 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   829b2:	4a33      	ldr	r2, [pc, #204]	; (82a80 <SystemCoreClockUpdate+0x10c>)
   829b4:	4b30      	ldr	r3, [pc, #192]	; (82a78 <SystemCoreClockUpdate+0x104>)
   829b6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   829b8:	4b2d      	ldr	r3, [pc, #180]	; (82a70 <SystemCoreClockUpdate+0xfc>)
   829ba:	6a1b      	ldr	r3, [r3, #32]
   829bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   829c0:	2b10      	cmp	r3, #16
   829c2:	d002      	beq.n	829ca <SystemCoreClockUpdate+0x56>
   829c4:	2b20      	cmp	r3, #32
   829c6:	d004      	beq.n	829d2 <SystemCoreClockUpdate+0x5e>
   829c8:	e03a      	b.n	82a40 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   829ca:	4a2e      	ldr	r2, [pc, #184]	; (82a84 <SystemCoreClockUpdate+0x110>)
   829cc:	4b2a      	ldr	r3, [pc, #168]	; (82a78 <SystemCoreClockUpdate+0x104>)
   829ce:	601a      	str	r2, [r3, #0]
				break;
   829d0:	e036      	b.n	82a40 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   829d2:	4a2a      	ldr	r2, [pc, #168]	; (82a7c <SystemCoreClockUpdate+0x108>)
   829d4:	4b28      	ldr	r3, [pc, #160]	; (82a78 <SystemCoreClockUpdate+0x104>)
   829d6:	601a      	str	r2, [r3, #0]
				break;
   829d8:	e032      	b.n	82a40 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   829da:	4b25      	ldr	r3, [pc, #148]	; (82a70 <SystemCoreClockUpdate+0xfc>)
   829dc:	6a1b      	ldr	r3, [r3, #32]
   829de:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   829e2:	d003      	beq.n	829ec <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   829e4:	4a25      	ldr	r2, [pc, #148]	; (82a7c <SystemCoreClockUpdate+0x108>)
   829e6:	4b24      	ldr	r3, [pc, #144]	; (82a78 <SystemCoreClockUpdate+0x104>)
   829e8:	601a      	str	r2, [r3, #0]
   829ea:	e012      	b.n	82a12 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   829ec:	4a24      	ldr	r2, [pc, #144]	; (82a80 <SystemCoreClockUpdate+0x10c>)
   829ee:	4b22      	ldr	r3, [pc, #136]	; (82a78 <SystemCoreClockUpdate+0x104>)
   829f0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   829f2:	4b1f      	ldr	r3, [pc, #124]	; (82a70 <SystemCoreClockUpdate+0xfc>)
   829f4:	6a1b      	ldr	r3, [r3, #32]
   829f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   829fa:	2b10      	cmp	r3, #16
   829fc:	d002      	beq.n	82a04 <SystemCoreClockUpdate+0x90>
   829fe:	2b20      	cmp	r3, #32
   82a00:	d004      	beq.n	82a0c <SystemCoreClockUpdate+0x98>
   82a02:	e006      	b.n	82a12 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82a04:	4a1f      	ldr	r2, [pc, #124]	; (82a84 <SystemCoreClockUpdate+0x110>)
   82a06:	4b1c      	ldr	r3, [pc, #112]	; (82a78 <SystemCoreClockUpdate+0x104>)
   82a08:	601a      	str	r2, [r3, #0]
				break;
   82a0a:	e002      	b.n	82a12 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82a0c:	4a1b      	ldr	r2, [pc, #108]	; (82a7c <SystemCoreClockUpdate+0x108>)
   82a0e:	4b1a      	ldr	r3, [pc, #104]	; (82a78 <SystemCoreClockUpdate+0x104>)
   82a10:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82a12:	4b17      	ldr	r3, [pc, #92]	; (82a70 <SystemCoreClockUpdate+0xfc>)
   82a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a16:	f003 0303 	and.w	r3, r3, #3
   82a1a:	2b02      	cmp	r3, #2
   82a1c:	d10d      	bne.n	82a3a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a1e:	4a14      	ldr	r2, [pc, #80]	; (82a70 <SystemCoreClockUpdate+0xfc>)
   82a20:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82a22:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82a24:	4814      	ldr	r0, [pc, #80]	; (82a78 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a26:	f3c3 410a 	ubfx	r1, r3, #16, #11
   82a2a:	6803      	ldr	r3, [r0, #0]
   82a2c:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82a30:	b2d2      	uxtb	r2, r2
   82a32:	fbb3 f3f2 	udiv	r3, r3, r2
   82a36:	6003      	str	r3, [r0, #0]
   82a38:	e002      	b.n	82a40 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82a3a:	4a13      	ldr	r2, [pc, #76]	; (82a88 <SystemCoreClockUpdate+0x114>)
   82a3c:	4b0e      	ldr	r3, [pc, #56]	; (82a78 <SystemCoreClockUpdate+0x104>)
   82a3e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82a40:	4b0b      	ldr	r3, [pc, #44]	; (82a70 <SystemCoreClockUpdate+0xfc>)
   82a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a44:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a48:	2b70      	cmp	r3, #112	; 0x70
   82a4a:	d107      	bne.n	82a5c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82a4c:	4a0a      	ldr	r2, [pc, #40]	; (82a78 <SystemCoreClockUpdate+0x104>)
   82a4e:	6813      	ldr	r3, [r2, #0]
   82a50:	490e      	ldr	r1, [pc, #56]	; (82a8c <SystemCoreClockUpdate+0x118>)
   82a52:	fba1 1303 	umull	r1, r3, r1, r3
   82a56:	085b      	lsrs	r3, r3, #1
   82a58:	6013      	str	r3, [r2, #0]
   82a5a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82a5c:	4b04      	ldr	r3, [pc, #16]	; (82a70 <SystemCoreClockUpdate+0xfc>)
   82a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82a60:	4905      	ldr	r1, [pc, #20]	; (82a78 <SystemCoreClockUpdate+0x104>)
   82a62:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82a66:	680b      	ldr	r3, [r1, #0]
   82a68:	40d3      	lsrs	r3, r2
   82a6a:	600b      	str	r3, [r1, #0]
   82a6c:	4770      	bx	lr
   82a6e:	bf00      	nop
   82a70:	400e0600 	.word	0x400e0600
   82a74:	400e1a10 	.word	0x400e1a10
   82a78:	20070198 	.word	0x20070198
   82a7c:	00b71b00 	.word	0x00b71b00
   82a80:	003d0900 	.word	0x003d0900
   82a84:	007a1200 	.word	0x007a1200
   82a88:	0e4e1c00 	.word	0x0e4e1c00
   82a8c:	aaaaaaab 	.word	0xaaaaaaab

00082a90 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82a90:	4b09      	ldr	r3, [pc, #36]	; (82ab8 <_sbrk+0x28>)
   82a92:	681b      	ldr	r3, [r3, #0]
   82a94:	b913      	cbnz	r3, 82a9c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   82a96:	4a09      	ldr	r2, [pc, #36]	; (82abc <_sbrk+0x2c>)
   82a98:	4b07      	ldr	r3, [pc, #28]	; (82ab8 <_sbrk+0x28>)
   82a9a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82a9c:	4b06      	ldr	r3, [pc, #24]	; (82ab8 <_sbrk+0x28>)
   82a9e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82aa0:	181a      	adds	r2, r3, r0
   82aa2:	4907      	ldr	r1, [pc, #28]	; (82ac0 <_sbrk+0x30>)
   82aa4:	4291      	cmp	r1, r2
   82aa6:	db04      	blt.n	82ab2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82aa8:	4610      	mov	r0, r2
   82aaa:	4a03      	ldr	r2, [pc, #12]	; (82ab8 <_sbrk+0x28>)
   82aac:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82aae:	4618      	mov	r0, r3
   82ab0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82ab2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82ab6:	4770      	bx	lr
   82ab8:	20078dd8 	.word	0x20078dd8
   82abc:	2007ae40 	.word	0x2007ae40
   82ac0:	20087ffc 	.word	0x20087ffc

00082ac4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82ac4:	f04f 30ff 	mov.w	r0, #4294967295
   82ac8:	4770      	bx	lr
   82aca:	bf00      	nop

00082acc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82ad0:	604b      	str	r3, [r1, #4]

	return 0;
}
   82ad2:	2000      	movs	r0, #0
   82ad4:	4770      	bx	lr
   82ad6:	bf00      	nop

00082ad8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82ad8:	2001      	movs	r0, #1
   82ada:	4770      	bx	lr

00082adc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82adc:	2000      	movs	r0, #0
   82ade:	4770      	bx	lr

00082ae0 <__aeabi_frsub>:
   82ae0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   82ae4:	e002      	b.n	82aec <__addsf3>
   82ae6:	bf00      	nop

00082ae8 <__aeabi_fsub>:
   82ae8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00082aec <__addsf3>:
   82aec:	0042      	lsls	r2, r0, #1
   82aee:	bf1f      	itttt	ne
   82af0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   82af4:	ea92 0f03 	teqne	r2, r3
   82af8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   82afc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82b00:	d06a      	beq.n	82bd8 <__addsf3+0xec>
   82b02:	ea4f 6212 	mov.w	r2, r2, lsr #24
   82b06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   82b0a:	bfc1      	itttt	gt
   82b0c:	18d2      	addgt	r2, r2, r3
   82b0e:	4041      	eorgt	r1, r0
   82b10:	4048      	eorgt	r0, r1
   82b12:	4041      	eorgt	r1, r0
   82b14:	bfb8      	it	lt
   82b16:	425b      	neglt	r3, r3
   82b18:	2b19      	cmp	r3, #25
   82b1a:	bf88      	it	hi
   82b1c:	4770      	bxhi	lr
   82b1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   82b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82b26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   82b2a:	bf18      	it	ne
   82b2c:	4240      	negne	r0, r0
   82b2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82b32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   82b36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   82b3a:	bf18      	it	ne
   82b3c:	4249      	negne	r1, r1
   82b3e:	ea92 0f03 	teq	r2, r3
   82b42:	d03f      	beq.n	82bc4 <__addsf3+0xd8>
   82b44:	f1a2 0201 	sub.w	r2, r2, #1
   82b48:	fa41 fc03 	asr.w	ip, r1, r3
   82b4c:	eb10 000c 	adds.w	r0, r0, ip
   82b50:	f1c3 0320 	rsb	r3, r3, #32
   82b54:	fa01 f103 	lsl.w	r1, r1, r3
   82b58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82b5c:	d502      	bpl.n	82b64 <__addsf3+0x78>
   82b5e:	4249      	negs	r1, r1
   82b60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   82b64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   82b68:	d313      	bcc.n	82b92 <__addsf3+0xa6>
   82b6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   82b6e:	d306      	bcc.n	82b7e <__addsf3+0x92>
   82b70:	0840      	lsrs	r0, r0, #1
   82b72:	ea4f 0131 	mov.w	r1, r1, rrx
   82b76:	f102 0201 	add.w	r2, r2, #1
   82b7a:	2afe      	cmp	r2, #254	; 0xfe
   82b7c:	d251      	bcs.n	82c22 <__addsf3+0x136>
   82b7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   82b82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82b86:	bf08      	it	eq
   82b88:	f020 0001 	biceq.w	r0, r0, #1
   82b8c:	ea40 0003 	orr.w	r0, r0, r3
   82b90:	4770      	bx	lr
   82b92:	0049      	lsls	r1, r1, #1
   82b94:	eb40 0000 	adc.w	r0, r0, r0
   82b98:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   82b9c:	f1a2 0201 	sub.w	r2, r2, #1
   82ba0:	d1ed      	bne.n	82b7e <__addsf3+0x92>
   82ba2:	fab0 fc80 	clz	ip, r0
   82ba6:	f1ac 0c08 	sub.w	ip, ip, #8
   82baa:	ebb2 020c 	subs.w	r2, r2, ip
   82bae:	fa00 f00c 	lsl.w	r0, r0, ip
   82bb2:	bfaa      	itet	ge
   82bb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   82bb8:	4252      	neglt	r2, r2
   82bba:	4318      	orrge	r0, r3
   82bbc:	bfbc      	itt	lt
   82bbe:	40d0      	lsrlt	r0, r2
   82bc0:	4318      	orrlt	r0, r3
   82bc2:	4770      	bx	lr
   82bc4:	f092 0f00 	teq	r2, #0
   82bc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   82bcc:	bf06      	itte	eq
   82bce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   82bd2:	3201      	addeq	r2, #1
   82bd4:	3b01      	subne	r3, #1
   82bd6:	e7b5      	b.n	82b44 <__addsf3+0x58>
   82bd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82bdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82be0:	bf18      	it	ne
   82be2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82be6:	d021      	beq.n	82c2c <__addsf3+0x140>
   82be8:	ea92 0f03 	teq	r2, r3
   82bec:	d004      	beq.n	82bf8 <__addsf3+0x10c>
   82bee:	f092 0f00 	teq	r2, #0
   82bf2:	bf08      	it	eq
   82bf4:	4608      	moveq	r0, r1
   82bf6:	4770      	bx	lr
   82bf8:	ea90 0f01 	teq	r0, r1
   82bfc:	bf1c      	itt	ne
   82bfe:	2000      	movne	r0, #0
   82c00:	4770      	bxne	lr
   82c02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   82c06:	d104      	bne.n	82c12 <__addsf3+0x126>
   82c08:	0040      	lsls	r0, r0, #1
   82c0a:	bf28      	it	cs
   82c0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   82c10:	4770      	bx	lr
   82c12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   82c16:	bf3c      	itt	cc
   82c18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   82c1c:	4770      	bxcc	lr
   82c1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82c22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   82c26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82c2a:	4770      	bx	lr
   82c2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   82c30:	bf16      	itet	ne
   82c32:	4608      	movne	r0, r1
   82c34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   82c38:	4601      	movne	r1, r0
   82c3a:	0242      	lsls	r2, r0, #9
   82c3c:	bf06      	itte	eq
   82c3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   82c42:	ea90 0f01 	teqeq	r0, r1
   82c46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   82c4a:	4770      	bx	lr

00082c4c <__aeabi_ui2f>:
   82c4c:	f04f 0300 	mov.w	r3, #0
   82c50:	e004      	b.n	82c5c <__aeabi_i2f+0x8>
   82c52:	bf00      	nop

00082c54 <__aeabi_i2f>:
   82c54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   82c58:	bf48      	it	mi
   82c5a:	4240      	negmi	r0, r0
   82c5c:	ea5f 0c00 	movs.w	ip, r0
   82c60:	bf08      	it	eq
   82c62:	4770      	bxeq	lr
   82c64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   82c68:	4601      	mov	r1, r0
   82c6a:	f04f 0000 	mov.w	r0, #0
   82c6e:	e01c      	b.n	82caa <__aeabi_l2f+0x2a>

00082c70 <__aeabi_ul2f>:
   82c70:	ea50 0201 	orrs.w	r2, r0, r1
   82c74:	bf08      	it	eq
   82c76:	4770      	bxeq	lr
   82c78:	f04f 0300 	mov.w	r3, #0
   82c7c:	e00a      	b.n	82c94 <__aeabi_l2f+0x14>
   82c7e:	bf00      	nop

00082c80 <__aeabi_l2f>:
   82c80:	ea50 0201 	orrs.w	r2, r0, r1
   82c84:	bf08      	it	eq
   82c86:	4770      	bxeq	lr
   82c88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   82c8c:	d502      	bpl.n	82c94 <__aeabi_l2f+0x14>
   82c8e:	4240      	negs	r0, r0
   82c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82c94:	ea5f 0c01 	movs.w	ip, r1
   82c98:	bf02      	ittt	eq
   82c9a:	4684      	moveq	ip, r0
   82c9c:	4601      	moveq	r1, r0
   82c9e:	2000      	moveq	r0, #0
   82ca0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   82ca4:	bf08      	it	eq
   82ca6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   82caa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   82cae:	fabc f28c 	clz	r2, ip
   82cb2:	3a08      	subs	r2, #8
   82cb4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   82cb8:	db10      	blt.n	82cdc <__aeabi_l2f+0x5c>
   82cba:	fa01 fc02 	lsl.w	ip, r1, r2
   82cbe:	4463      	add	r3, ip
   82cc0:	fa00 fc02 	lsl.w	ip, r0, r2
   82cc4:	f1c2 0220 	rsb	r2, r2, #32
   82cc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82ccc:	fa20 f202 	lsr.w	r2, r0, r2
   82cd0:	eb43 0002 	adc.w	r0, r3, r2
   82cd4:	bf08      	it	eq
   82cd6:	f020 0001 	biceq.w	r0, r0, #1
   82cda:	4770      	bx	lr
   82cdc:	f102 0220 	add.w	r2, r2, #32
   82ce0:	fa01 fc02 	lsl.w	ip, r1, r2
   82ce4:	f1c2 0220 	rsb	r2, r2, #32
   82ce8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   82cec:	fa21 f202 	lsr.w	r2, r1, r2
   82cf0:	eb43 0002 	adc.w	r0, r3, r2
   82cf4:	bf08      	it	eq
   82cf6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   82cfa:	4770      	bx	lr

00082cfc <__aeabi_fmul>:
   82cfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82d00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   82d04:	bf1e      	ittt	ne
   82d06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   82d0a:	ea92 0f0c 	teqne	r2, ip
   82d0e:	ea93 0f0c 	teqne	r3, ip
   82d12:	d06f      	beq.n	82df4 <__aeabi_fmul+0xf8>
   82d14:	441a      	add	r2, r3
   82d16:	ea80 0c01 	eor.w	ip, r0, r1
   82d1a:	0240      	lsls	r0, r0, #9
   82d1c:	bf18      	it	ne
   82d1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   82d22:	d01e      	beq.n	82d62 <__aeabi_fmul+0x66>
   82d24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   82d28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   82d2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   82d30:	fba0 3101 	umull	r3, r1, r0, r1
   82d34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   82d38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   82d3c:	bf3e      	ittt	cc
   82d3e:	0049      	lslcc	r1, r1, #1
   82d40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   82d44:	005b      	lslcc	r3, r3, #1
   82d46:	ea40 0001 	orr.w	r0, r0, r1
   82d4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   82d4e:	2afd      	cmp	r2, #253	; 0xfd
   82d50:	d81d      	bhi.n	82d8e <__aeabi_fmul+0x92>
   82d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   82d56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82d5a:	bf08      	it	eq
   82d5c:	f020 0001 	biceq.w	r0, r0, #1
   82d60:	4770      	bx	lr
   82d62:	f090 0f00 	teq	r0, #0
   82d66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   82d6a:	bf08      	it	eq
   82d6c:	0249      	lsleq	r1, r1, #9
   82d6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   82d72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   82d76:	3a7f      	subs	r2, #127	; 0x7f
   82d78:	bfc2      	ittt	gt
   82d7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   82d7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   82d82:	4770      	bxgt	lr
   82d84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82d88:	f04f 0300 	mov.w	r3, #0
   82d8c:	3a01      	subs	r2, #1
   82d8e:	dc5d      	bgt.n	82e4c <__aeabi_fmul+0x150>
   82d90:	f112 0f19 	cmn.w	r2, #25
   82d94:	bfdc      	itt	le
   82d96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   82d9a:	4770      	bxle	lr
   82d9c:	f1c2 0200 	rsb	r2, r2, #0
   82da0:	0041      	lsls	r1, r0, #1
   82da2:	fa21 f102 	lsr.w	r1, r1, r2
   82da6:	f1c2 0220 	rsb	r2, r2, #32
   82daa:	fa00 fc02 	lsl.w	ip, r0, r2
   82dae:	ea5f 0031 	movs.w	r0, r1, rrx
   82db2:	f140 0000 	adc.w	r0, r0, #0
   82db6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   82dba:	bf08      	it	eq
   82dbc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   82dc0:	4770      	bx	lr
   82dc2:	f092 0f00 	teq	r2, #0
   82dc6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   82dca:	bf02      	ittt	eq
   82dcc:	0040      	lsleq	r0, r0, #1
   82dce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   82dd2:	3a01      	subeq	r2, #1
   82dd4:	d0f9      	beq.n	82dca <__aeabi_fmul+0xce>
   82dd6:	ea40 000c 	orr.w	r0, r0, ip
   82dda:	f093 0f00 	teq	r3, #0
   82dde:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82de2:	bf02      	ittt	eq
   82de4:	0049      	lsleq	r1, r1, #1
   82de6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   82dea:	3b01      	subeq	r3, #1
   82dec:	d0f9      	beq.n	82de2 <__aeabi_fmul+0xe6>
   82dee:	ea41 010c 	orr.w	r1, r1, ip
   82df2:	e78f      	b.n	82d14 <__aeabi_fmul+0x18>
   82df4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   82df8:	ea92 0f0c 	teq	r2, ip
   82dfc:	bf18      	it	ne
   82dfe:	ea93 0f0c 	teqne	r3, ip
   82e02:	d00a      	beq.n	82e1a <__aeabi_fmul+0x11e>
   82e04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   82e08:	bf18      	it	ne
   82e0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   82e0e:	d1d8      	bne.n	82dc2 <__aeabi_fmul+0xc6>
   82e10:	ea80 0001 	eor.w	r0, r0, r1
   82e14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   82e18:	4770      	bx	lr
   82e1a:	f090 0f00 	teq	r0, #0
   82e1e:	bf17      	itett	ne
   82e20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   82e24:	4608      	moveq	r0, r1
   82e26:	f091 0f00 	teqne	r1, #0
   82e2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   82e2e:	d014      	beq.n	82e5a <__aeabi_fmul+0x15e>
   82e30:	ea92 0f0c 	teq	r2, ip
   82e34:	d101      	bne.n	82e3a <__aeabi_fmul+0x13e>
   82e36:	0242      	lsls	r2, r0, #9
   82e38:	d10f      	bne.n	82e5a <__aeabi_fmul+0x15e>
   82e3a:	ea93 0f0c 	teq	r3, ip
   82e3e:	d103      	bne.n	82e48 <__aeabi_fmul+0x14c>
   82e40:	024b      	lsls	r3, r1, #9
   82e42:	bf18      	it	ne
   82e44:	4608      	movne	r0, r1
   82e46:	d108      	bne.n	82e5a <__aeabi_fmul+0x15e>
   82e48:	ea80 0001 	eor.w	r0, r0, r1
   82e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   82e50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82e54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82e58:	4770      	bx	lr
   82e5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82e5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   82e62:	4770      	bx	lr

00082e64 <__aeabi_fdiv>:
   82e64:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82e68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   82e6c:	bf1e      	ittt	ne
   82e6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   82e72:	ea92 0f0c 	teqne	r2, ip
   82e76:	ea93 0f0c 	teqne	r3, ip
   82e7a:	d069      	beq.n	82f50 <__aeabi_fdiv+0xec>
   82e7c:	eba2 0203 	sub.w	r2, r2, r3
   82e80:	ea80 0c01 	eor.w	ip, r0, r1
   82e84:	0249      	lsls	r1, r1, #9
   82e86:	ea4f 2040 	mov.w	r0, r0, lsl #9
   82e8a:	d037      	beq.n	82efc <__aeabi_fdiv+0x98>
   82e8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   82e90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   82e94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   82e98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   82e9c:	428b      	cmp	r3, r1
   82e9e:	bf38      	it	cc
   82ea0:	005b      	lslcc	r3, r3, #1
   82ea2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   82ea6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   82eaa:	428b      	cmp	r3, r1
   82eac:	bf24      	itt	cs
   82eae:	1a5b      	subcs	r3, r3, r1
   82eb0:	ea40 000c 	orrcs.w	r0, r0, ip
   82eb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   82eb8:	bf24      	itt	cs
   82eba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   82ebe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82ec2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   82ec6:	bf24      	itt	cs
   82ec8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   82ecc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82ed0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   82ed4:	bf24      	itt	cs
   82ed6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   82eda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82ede:	011b      	lsls	r3, r3, #4
   82ee0:	bf18      	it	ne
   82ee2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   82ee6:	d1e0      	bne.n	82eaa <__aeabi_fdiv+0x46>
   82ee8:	2afd      	cmp	r2, #253	; 0xfd
   82eea:	f63f af50 	bhi.w	82d8e <__aeabi_fmul+0x92>
   82eee:	428b      	cmp	r3, r1
   82ef0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82ef4:	bf08      	it	eq
   82ef6:	f020 0001 	biceq.w	r0, r0, #1
   82efa:	4770      	bx	lr
   82efc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   82f00:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   82f04:	327f      	adds	r2, #127	; 0x7f
   82f06:	bfc2      	ittt	gt
   82f08:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   82f0c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   82f10:	4770      	bxgt	lr
   82f12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82f16:	f04f 0300 	mov.w	r3, #0
   82f1a:	3a01      	subs	r2, #1
   82f1c:	e737      	b.n	82d8e <__aeabi_fmul+0x92>
   82f1e:	f092 0f00 	teq	r2, #0
   82f22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   82f26:	bf02      	ittt	eq
   82f28:	0040      	lsleq	r0, r0, #1
   82f2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   82f2e:	3a01      	subeq	r2, #1
   82f30:	d0f9      	beq.n	82f26 <__aeabi_fdiv+0xc2>
   82f32:	ea40 000c 	orr.w	r0, r0, ip
   82f36:	f093 0f00 	teq	r3, #0
   82f3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82f3e:	bf02      	ittt	eq
   82f40:	0049      	lsleq	r1, r1, #1
   82f42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   82f46:	3b01      	subeq	r3, #1
   82f48:	d0f9      	beq.n	82f3e <__aeabi_fdiv+0xda>
   82f4a:	ea41 010c 	orr.w	r1, r1, ip
   82f4e:	e795      	b.n	82e7c <__aeabi_fdiv+0x18>
   82f50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   82f54:	ea92 0f0c 	teq	r2, ip
   82f58:	d108      	bne.n	82f6c <__aeabi_fdiv+0x108>
   82f5a:	0242      	lsls	r2, r0, #9
   82f5c:	f47f af7d 	bne.w	82e5a <__aeabi_fmul+0x15e>
   82f60:	ea93 0f0c 	teq	r3, ip
   82f64:	f47f af70 	bne.w	82e48 <__aeabi_fmul+0x14c>
   82f68:	4608      	mov	r0, r1
   82f6a:	e776      	b.n	82e5a <__aeabi_fmul+0x15e>
   82f6c:	ea93 0f0c 	teq	r3, ip
   82f70:	d104      	bne.n	82f7c <__aeabi_fdiv+0x118>
   82f72:	024b      	lsls	r3, r1, #9
   82f74:	f43f af4c 	beq.w	82e10 <__aeabi_fmul+0x114>
   82f78:	4608      	mov	r0, r1
   82f7a:	e76e      	b.n	82e5a <__aeabi_fmul+0x15e>
   82f7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   82f80:	bf18      	it	ne
   82f82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   82f86:	d1ca      	bne.n	82f1e <__aeabi_fdiv+0xba>
   82f88:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   82f8c:	f47f af5c 	bne.w	82e48 <__aeabi_fmul+0x14c>
   82f90:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   82f94:	f47f af3c 	bne.w	82e10 <__aeabi_fmul+0x114>
   82f98:	e75f      	b.n	82e5a <__aeabi_fmul+0x15e>
   82f9a:	bf00      	nop

00082f9c <__aeabi_f2iz>:
   82f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   82fa0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   82fa4:	d30f      	bcc.n	82fc6 <__aeabi_f2iz+0x2a>
   82fa6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   82faa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   82fae:	d90d      	bls.n	82fcc <__aeabi_f2iz+0x30>
   82fb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   82fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   82fb8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   82fbc:	fa23 f002 	lsr.w	r0, r3, r2
   82fc0:	bf18      	it	ne
   82fc2:	4240      	negne	r0, r0
   82fc4:	4770      	bx	lr
   82fc6:	f04f 0000 	mov.w	r0, #0
   82fca:	4770      	bx	lr
   82fcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   82fd0:	d101      	bne.n	82fd6 <__aeabi_f2iz+0x3a>
   82fd2:	0242      	lsls	r2, r0, #9
   82fd4:	d105      	bne.n	82fe2 <__aeabi_f2iz+0x46>
   82fd6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   82fda:	bf08      	it	eq
   82fdc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   82fe0:	4770      	bx	lr
   82fe2:	f04f 0000 	mov.w	r0, #0
   82fe6:	4770      	bx	lr

00082fe8 <atoi>:
   82fe8:	2100      	movs	r1, #0
   82fea:	220a      	movs	r2, #10
   82fec:	f000 bad6 	b.w	8359c <strtol>

00082ff0 <_gets_r>:
   82ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82ff2:	460f      	mov	r7, r1
   82ff4:	4605      	mov	r5, r0
   82ff6:	460c      	mov	r4, r1
   82ff8:	4e0f      	ldr	r6, [pc, #60]	; (83038 <_gets_r+0x48>)
   82ffa:	e007      	b.n	8300c <_gets_r+0x1c>
   82ffc:	680b      	ldr	r3, [r1, #0]
   82ffe:	1c5a      	adds	r2, r3, #1
   83000:	600a      	str	r2, [r1, #0]
   83002:	7818      	ldrb	r0, [r3, #0]
   83004:	280a      	cmp	r0, #10
   83006:	d011      	beq.n	8302c <_gets_r+0x3c>
   83008:	f804 0b01 	strb.w	r0, [r4], #1
   8300c:	6833      	ldr	r3, [r6, #0]
   8300e:	6859      	ldr	r1, [r3, #4]
   83010:	684b      	ldr	r3, [r1, #4]
   83012:	3b01      	subs	r3, #1
   83014:	2b00      	cmp	r3, #0
   83016:	604b      	str	r3, [r1, #4]
   83018:	daf0      	bge.n	82ffc <_gets_r+0xc>
   8301a:	4628      	mov	r0, r5
   8301c:	f000 f930 	bl	83280 <__srget_r>
   83020:	280a      	cmp	r0, #10
   83022:	d003      	beq.n	8302c <_gets_r+0x3c>
   83024:	1c43      	adds	r3, r0, #1
   83026:	d1ef      	bne.n	83008 <_gets_r+0x18>
   83028:	42a7      	cmp	r7, r4
   8302a:	d003      	beq.n	83034 <_gets_r+0x44>
   8302c:	2300      	movs	r3, #0
   8302e:	7023      	strb	r3, [r4, #0]
   83030:	4638      	mov	r0, r7
   83032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83034:	2000      	movs	r0, #0
   83036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83038:	200705c8 	.word	0x200705c8

0008303c <gets>:
   8303c:	4b02      	ldr	r3, [pc, #8]	; (83048 <gets+0xc>)
   8303e:	4601      	mov	r1, r0
   83040:	6818      	ldr	r0, [r3, #0]
   83042:	f7ff bfd5 	b.w	82ff0 <_gets_r>
   83046:	bf00      	nop
   83048:	200705c8 	.word	0x200705c8

0008304c <__libc_init_array>:
   8304c:	b570      	push	{r4, r5, r6, lr}
   8304e:	4e0f      	ldr	r6, [pc, #60]	; (8308c <__libc_init_array+0x40>)
   83050:	4d0f      	ldr	r5, [pc, #60]	; (83090 <__libc_init_array+0x44>)
   83052:	1b76      	subs	r6, r6, r5
   83054:	10b6      	asrs	r6, r6, #2
   83056:	bf18      	it	ne
   83058:	2400      	movne	r4, #0
   8305a:	d005      	beq.n	83068 <__libc_init_array+0x1c>
   8305c:	3401      	adds	r4, #1
   8305e:	f855 3b04 	ldr.w	r3, [r5], #4
   83062:	4798      	blx	r3
   83064:	42a6      	cmp	r6, r4
   83066:	d1f9      	bne.n	8305c <__libc_init_array+0x10>
   83068:	4e0a      	ldr	r6, [pc, #40]	; (83094 <__libc_init_array+0x48>)
   8306a:	4d0b      	ldr	r5, [pc, #44]	; (83098 <__libc_init_array+0x4c>)
   8306c:	f003 fa9c 	bl	865a8 <_init>
   83070:	1b76      	subs	r6, r6, r5
   83072:	10b6      	asrs	r6, r6, #2
   83074:	bf18      	it	ne
   83076:	2400      	movne	r4, #0
   83078:	d006      	beq.n	83088 <__libc_init_array+0x3c>
   8307a:	3401      	adds	r4, #1
   8307c:	f855 3b04 	ldr.w	r3, [r5], #4
   83080:	4798      	blx	r3
   83082:	42a6      	cmp	r6, r4
   83084:	d1f9      	bne.n	8307a <__libc_init_array+0x2e>
   83086:	bd70      	pop	{r4, r5, r6, pc}
   83088:	bd70      	pop	{r4, r5, r6, pc}
   8308a:	bf00      	nop
   8308c:	000865b4 	.word	0x000865b4
   83090:	000865b4 	.word	0x000865b4
   83094:	000865bc 	.word	0x000865bc
   83098:	000865b4 	.word	0x000865b4

0008309c <iprintf>:
   8309c:	b40f      	push	{r0, r1, r2, r3}
   8309e:	b510      	push	{r4, lr}
   830a0:	4b07      	ldr	r3, [pc, #28]	; (830c0 <iprintf+0x24>)
   830a2:	b082      	sub	sp, #8
   830a4:	ac04      	add	r4, sp, #16
   830a6:	f854 2b04 	ldr.w	r2, [r4], #4
   830aa:	6818      	ldr	r0, [r3, #0]
   830ac:	4623      	mov	r3, r4
   830ae:	6881      	ldr	r1, [r0, #8]
   830b0:	9401      	str	r4, [sp, #4]
   830b2:	f000 fafb 	bl	836ac <_vfiprintf_r>
   830b6:	b002      	add	sp, #8
   830b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   830bc:	b004      	add	sp, #16
   830be:	4770      	bx	lr
   830c0:	200705c8 	.word	0x200705c8

000830c4 <__itoa>:
   830c4:	1e93      	subs	r3, r2, #2
   830c6:	2b22      	cmp	r3, #34	; 0x22
   830c8:	d810      	bhi.n	830ec <__itoa+0x28>
   830ca:	2a0a      	cmp	r2, #10
   830cc:	b510      	push	{r4, lr}
   830ce:	d006      	beq.n	830de <__itoa+0x1a>
   830d0:	2300      	movs	r3, #0
   830d2:	460c      	mov	r4, r1
   830d4:	4419      	add	r1, r3
   830d6:	f000 fa6d 	bl	835b4 <__utoa>
   830da:	4620      	mov	r0, r4
   830dc:	bd10      	pop	{r4, pc}
   830de:	2800      	cmp	r0, #0
   830e0:	daf6      	bge.n	830d0 <__itoa+0xc>
   830e2:	232d      	movs	r3, #45	; 0x2d
   830e4:	700b      	strb	r3, [r1, #0]
   830e6:	4240      	negs	r0, r0
   830e8:	2301      	movs	r3, #1
   830ea:	e7f2      	b.n	830d2 <__itoa+0xe>
   830ec:	2000      	movs	r0, #0
   830ee:	7008      	strb	r0, [r1, #0]
   830f0:	4770      	bx	lr
   830f2:	bf00      	nop

000830f4 <itoa>:
   830f4:	f7ff bfe6 	b.w	830c4 <__itoa>

000830f8 <memcpy>:
   830f8:	4684      	mov	ip, r0
   830fa:	ea41 0300 	orr.w	r3, r1, r0
   830fe:	f013 0303 	ands.w	r3, r3, #3
   83102:	d149      	bne.n	83198 <memcpy+0xa0>
   83104:	3a40      	subs	r2, #64	; 0x40
   83106:	d323      	bcc.n	83150 <memcpy+0x58>
   83108:	680b      	ldr	r3, [r1, #0]
   8310a:	6003      	str	r3, [r0, #0]
   8310c:	684b      	ldr	r3, [r1, #4]
   8310e:	6043      	str	r3, [r0, #4]
   83110:	688b      	ldr	r3, [r1, #8]
   83112:	6083      	str	r3, [r0, #8]
   83114:	68cb      	ldr	r3, [r1, #12]
   83116:	60c3      	str	r3, [r0, #12]
   83118:	690b      	ldr	r3, [r1, #16]
   8311a:	6103      	str	r3, [r0, #16]
   8311c:	694b      	ldr	r3, [r1, #20]
   8311e:	6143      	str	r3, [r0, #20]
   83120:	698b      	ldr	r3, [r1, #24]
   83122:	6183      	str	r3, [r0, #24]
   83124:	69cb      	ldr	r3, [r1, #28]
   83126:	61c3      	str	r3, [r0, #28]
   83128:	6a0b      	ldr	r3, [r1, #32]
   8312a:	6203      	str	r3, [r0, #32]
   8312c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8312e:	6243      	str	r3, [r0, #36]	; 0x24
   83130:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83132:	6283      	str	r3, [r0, #40]	; 0x28
   83134:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83136:	62c3      	str	r3, [r0, #44]	; 0x2c
   83138:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8313a:	6303      	str	r3, [r0, #48]	; 0x30
   8313c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8313e:	6343      	str	r3, [r0, #52]	; 0x34
   83140:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83142:	6383      	str	r3, [r0, #56]	; 0x38
   83144:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83146:	63c3      	str	r3, [r0, #60]	; 0x3c
   83148:	3040      	adds	r0, #64	; 0x40
   8314a:	3140      	adds	r1, #64	; 0x40
   8314c:	3a40      	subs	r2, #64	; 0x40
   8314e:	d2db      	bcs.n	83108 <memcpy+0x10>
   83150:	3230      	adds	r2, #48	; 0x30
   83152:	d30b      	bcc.n	8316c <memcpy+0x74>
   83154:	680b      	ldr	r3, [r1, #0]
   83156:	6003      	str	r3, [r0, #0]
   83158:	684b      	ldr	r3, [r1, #4]
   8315a:	6043      	str	r3, [r0, #4]
   8315c:	688b      	ldr	r3, [r1, #8]
   8315e:	6083      	str	r3, [r0, #8]
   83160:	68cb      	ldr	r3, [r1, #12]
   83162:	60c3      	str	r3, [r0, #12]
   83164:	3010      	adds	r0, #16
   83166:	3110      	adds	r1, #16
   83168:	3a10      	subs	r2, #16
   8316a:	d2f3      	bcs.n	83154 <memcpy+0x5c>
   8316c:	320c      	adds	r2, #12
   8316e:	d305      	bcc.n	8317c <memcpy+0x84>
   83170:	f851 3b04 	ldr.w	r3, [r1], #4
   83174:	f840 3b04 	str.w	r3, [r0], #4
   83178:	3a04      	subs	r2, #4
   8317a:	d2f9      	bcs.n	83170 <memcpy+0x78>
   8317c:	3204      	adds	r2, #4
   8317e:	d008      	beq.n	83192 <memcpy+0x9a>
   83180:	07d2      	lsls	r2, r2, #31
   83182:	bf1c      	itt	ne
   83184:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83188:	f800 3b01 	strbne.w	r3, [r0], #1
   8318c:	d301      	bcc.n	83192 <memcpy+0x9a>
   8318e:	880b      	ldrh	r3, [r1, #0]
   83190:	8003      	strh	r3, [r0, #0]
   83192:	4660      	mov	r0, ip
   83194:	4770      	bx	lr
   83196:	bf00      	nop
   83198:	2a08      	cmp	r2, #8
   8319a:	d313      	bcc.n	831c4 <memcpy+0xcc>
   8319c:	078b      	lsls	r3, r1, #30
   8319e:	d0b1      	beq.n	83104 <memcpy+0xc>
   831a0:	f010 0303 	ands.w	r3, r0, #3
   831a4:	d0ae      	beq.n	83104 <memcpy+0xc>
   831a6:	f1c3 0304 	rsb	r3, r3, #4
   831aa:	1ad2      	subs	r2, r2, r3
   831ac:	07db      	lsls	r3, r3, #31
   831ae:	bf1c      	itt	ne
   831b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   831b4:	f800 3b01 	strbne.w	r3, [r0], #1
   831b8:	d3a4      	bcc.n	83104 <memcpy+0xc>
   831ba:	f831 3b02 	ldrh.w	r3, [r1], #2
   831be:	f820 3b02 	strh.w	r3, [r0], #2
   831c2:	e79f      	b.n	83104 <memcpy+0xc>
   831c4:	3a04      	subs	r2, #4
   831c6:	d3d9      	bcc.n	8317c <memcpy+0x84>
   831c8:	3a01      	subs	r2, #1
   831ca:	f811 3b01 	ldrb.w	r3, [r1], #1
   831ce:	f800 3b01 	strb.w	r3, [r0], #1
   831d2:	d2f9      	bcs.n	831c8 <memcpy+0xd0>
   831d4:	780b      	ldrb	r3, [r1, #0]
   831d6:	7003      	strb	r3, [r0, #0]
   831d8:	784b      	ldrb	r3, [r1, #1]
   831da:	7043      	strb	r3, [r0, #1]
   831dc:	788b      	ldrb	r3, [r1, #2]
   831de:	7083      	strb	r3, [r0, #2]
   831e0:	4660      	mov	r0, ip
   831e2:	4770      	bx	lr

000831e4 <memset>:
   831e4:	b470      	push	{r4, r5, r6}
   831e6:	0784      	lsls	r4, r0, #30
   831e8:	d046      	beq.n	83278 <memset+0x94>
   831ea:	1e54      	subs	r4, r2, #1
   831ec:	2a00      	cmp	r2, #0
   831ee:	d041      	beq.n	83274 <memset+0x90>
   831f0:	b2cd      	uxtb	r5, r1
   831f2:	4603      	mov	r3, r0
   831f4:	e002      	b.n	831fc <memset+0x18>
   831f6:	1e62      	subs	r2, r4, #1
   831f8:	b3e4      	cbz	r4, 83274 <memset+0x90>
   831fa:	4614      	mov	r4, r2
   831fc:	f803 5b01 	strb.w	r5, [r3], #1
   83200:	079a      	lsls	r2, r3, #30
   83202:	d1f8      	bne.n	831f6 <memset+0x12>
   83204:	2c03      	cmp	r4, #3
   83206:	d92e      	bls.n	83266 <memset+0x82>
   83208:	b2cd      	uxtb	r5, r1
   8320a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8320e:	2c0f      	cmp	r4, #15
   83210:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83214:	d919      	bls.n	8324a <memset+0x66>
   83216:	4626      	mov	r6, r4
   83218:	f103 0210 	add.w	r2, r3, #16
   8321c:	3e10      	subs	r6, #16
   8321e:	2e0f      	cmp	r6, #15
   83220:	f842 5c10 	str.w	r5, [r2, #-16]
   83224:	f842 5c0c 	str.w	r5, [r2, #-12]
   83228:	f842 5c08 	str.w	r5, [r2, #-8]
   8322c:	f842 5c04 	str.w	r5, [r2, #-4]
   83230:	f102 0210 	add.w	r2, r2, #16
   83234:	d8f2      	bhi.n	8321c <memset+0x38>
   83236:	f1a4 0210 	sub.w	r2, r4, #16
   8323a:	f022 020f 	bic.w	r2, r2, #15
   8323e:	f004 040f 	and.w	r4, r4, #15
   83242:	3210      	adds	r2, #16
   83244:	2c03      	cmp	r4, #3
   83246:	4413      	add	r3, r2
   83248:	d90d      	bls.n	83266 <memset+0x82>
   8324a:	461e      	mov	r6, r3
   8324c:	4622      	mov	r2, r4
   8324e:	3a04      	subs	r2, #4
   83250:	2a03      	cmp	r2, #3
   83252:	f846 5b04 	str.w	r5, [r6], #4
   83256:	d8fa      	bhi.n	8324e <memset+0x6a>
   83258:	1f22      	subs	r2, r4, #4
   8325a:	f022 0203 	bic.w	r2, r2, #3
   8325e:	3204      	adds	r2, #4
   83260:	4413      	add	r3, r2
   83262:	f004 0403 	and.w	r4, r4, #3
   83266:	b12c      	cbz	r4, 83274 <memset+0x90>
   83268:	b2c9      	uxtb	r1, r1
   8326a:	441c      	add	r4, r3
   8326c:	f803 1b01 	strb.w	r1, [r3], #1
   83270:	42a3      	cmp	r3, r4
   83272:	d1fb      	bne.n	8326c <memset+0x88>
   83274:	bc70      	pop	{r4, r5, r6}
   83276:	4770      	bx	lr
   83278:	4614      	mov	r4, r2
   8327a:	4603      	mov	r3, r0
   8327c:	e7c2      	b.n	83204 <memset+0x20>
   8327e:	bf00      	nop

00083280 <__srget_r>:
   83280:	b538      	push	{r3, r4, r5, lr}
   83282:	460c      	mov	r4, r1
   83284:	4605      	mov	r5, r0
   83286:	b108      	cbz	r0, 8328c <__srget_r+0xc>
   83288:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8328a:	b163      	cbz	r3, 832a6 <__srget_r+0x26>
   8328c:	4628      	mov	r0, r5
   8328e:	4621      	mov	r1, r4
   83290:	f002 fb4e 	bl	85930 <__srefill_r>
   83294:	b950      	cbnz	r0, 832ac <__srget_r+0x2c>
   83296:	e894 000c 	ldmia.w	r4, {r2, r3}
   8329a:	3b01      	subs	r3, #1
   8329c:	1c51      	adds	r1, r2, #1
   8329e:	e884 000a 	stmia.w	r4, {r1, r3}
   832a2:	7810      	ldrb	r0, [r2, #0]
   832a4:	bd38      	pop	{r3, r4, r5, pc}
   832a6:	f001 fa03 	bl	846b0 <__sinit>
   832aa:	e7ef      	b.n	8328c <__srget_r+0xc>
   832ac:	f04f 30ff 	mov.w	r0, #4294967295
   832b0:	bd38      	pop	{r3, r4, r5, pc}
   832b2:	bf00      	nop

000832b4 <setbuf>:
   832b4:	2900      	cmp	r1, #0
   832b6:	bf0c      	ite	eq
   832b8:	2202      	moveq	r2, #2
   832ba:	2200      	movne	r2, #0
   832bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   832c0:	f000 b800 	b.w	832c4 <setvbuf>

000832c4 <setvbuf>:
   832c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   832c8:	4d3a      	ldr	r5, [pc, #232]	; (833b4 <setvbuf+0xf0>)
   832ca:	4604      	mov	r4, r0
   832cc:	682e      	ldr	r6, [r5, #0]
   832ce:	4690      	mov	r8, r2
   832d0:	460d      	mov	r5, r1
   832d2:	461f      	mov	r7, r3
   832d4:	b116      	cbz	r6, 832dc <setvbuf+0x18>
   832d6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   832d8:	2b00      	cmp	r3, #0
   832da:	d03c      	beq.n	83356 <setvbuf+0x92>
   832dc:	f1b8 0f02 	cmp.w	r8, #2
   832e0:	d82f      	bhi.n	83342 <setvbuf+0x7e>
   832e2:	2f00      	cmp	r7, #0
   832e4:	db2d      	blt.n	83342 <setvbuf+0x7e>
   832e6:	4621      	mov	r1, r4
   832e8:	4630      	mov	r0, r6
   832ea:	f001 f93b 	bl	84564 <_fflush_r>
   832ee:	89a1      	ldrh	r1, [r4, #12]
   832f0:	2300      	movs	r3, #0
   832f2:	6063      	str	r3, [r4, #4]
   832f4:	61a3      	str	r3, [r4, #24]
   832f6:	060b      	lsls	r3, r1, #24
   832f8:	d427      	bmi.n	8334a <setvbuf+0x86>
   832fa:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   832fe:	b289      	uxth	r1, r1
   83300:	f1b8 0f02 	cmp.w	r8, #2
   83304:	81a1      	strh	r1, [r4, #12]
   83306:	d02a      	beq.n	8335e <setvbuf+0x9a>
   83308:	2d00      	cmp	r5, #0
   8330a:	d036      	beq.n	8337a <setvbuf+0xb6>
   8330c:	f1b8 0f01 	cmp.w	r8, #1
   83310:	d011      	beq.n	83336 <setvbuf+0x72>
   83312:	b289      	uxth	r1, r1
   83314:	f001 0008 	and.w	r0, r1, #8
   83318:	4b27      	ldr	r3, [pc, #156]	; (833b8 <setvbuf+0xf4>)
   8331a:	b280      	uxth	r0, r0
   8331c:	63f3      	str	r3, [r6, #60]	; 0x3c
   8331e:	6025      	str	r5, [r4, #0]
   83320:	6125      	str	r5, [r4, #16]
   83322:	6167      	str	r7, [r4, #20]
   83324:	b178      	cbz	r0, 83346 <setvbuf+0x82>
   83326:	f011 0f03 	tst.w	r1, #3
   8332a:	bf18      	it	ne
   8332c:	2700      	movne	r7, #0
   8332e:	2000      	movs	r0, #0
   83330:	60a7      	str	r7, [r4, #8]
   83332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83336:	f041 0101 	orr.w	r1, r1, #1
   8333a:	427b      	negs	r3, r7
   8333c:	81a1      	strh	r1, [r4, #12]
   8333e:	61a3      	str	r3, [r4, #24]
   83340:	e7e7      	b.n	83312 <setvbuf+0x4e>
   83342:	f04f 30ff 	mov.w	r0, #4294967295
   83346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8334a:	6921      	ldr	r1, [r4, #16]
   8334c:	4630      	mov	r0, r6
   8334e:	f001 fa87 	bl	84860 <_free_r>
   83352:	89a1      	ldrh	r1, [r4, #12]
   83354:	e7d1      	b.n	832fa <setvbuf+0x36>
   83356:	4630      	mov	r0, r6
   83358:	f001 f9aa 	bl	846b0 <__sinit>
   8335c:	e7be      	b.n	832dc <setvbuf+0x18>
   8335e:	2000      	movs	r0, #0
   83360:	f104 0343 	add.w	r3, r4, #67	; 0x43
   83364:	f041 0102 	orr.w	r1, r1, #2
   83368:	2500      	movs	r5, #0
   8336a:	2201      	movs	r2, #1
   8336c:	81a1      	strh	r1, [r4, #12]
   8336e:	60a5      	str	r5, [r4, #8]
   83370:	6023      	str	r3, [r4, #0]
   83372:	6123      	str	r3, [r4, #16]
   83374:	6162      	str	r2, [r4, #20]
   83376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8337a:	2f00      	cmp	r7, #0
   8337c:	bf08      	it	eq
   8337e:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   83382:	4638      	mov	r0, r7
   83384:	f001 fd9a 	bl	84ebc <malloc>
   83388:	4605      	mov	r5, r0
   8338a:	b128      	cbz	r0, 83398 <setvbuf+0xd4>
   8338c:	89a1      	ldrh	r1, [r4, #12]
   8338e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   83392:	b289      	uxth	r1, r1
   83394:	81a1      	strh	r1, [r4, #12]
   83396:	e7b9      	b.n	8330c <setvbuf+0x48>
   83398:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8339c:	f001 fd8e 	bl	84ebc <malloc>
   833a0:	4605      	mov	r5, r0
   833a2:	b918      	cbnz	r0, 833ac <setvbuf+0xe8>
   833a4:	89a1      	ldrh	r1, [r4, #12]
   833a6:	f04f 30ff 	mov.w	r0, #4294967295
   833aa:	e7d9      	b.n	83360 <setvbuf+0x9c>
   833ac:	f44f 6780 	mov.w	r7, #1024	; 0x400
   833b0:	e7ec      	b.n	8338c <setvbuf+0xc8>
   833b2:	bf00      	nop
   833b4:	200705c8 	.word	0x200705c8
   833b8:	000845b5 	.word	0x000845b5

000833bc <strlen>:
   833bc:	f020 0103 	bic.w	r1, r0, #3
   833c0:	f010 0003 	ands.w	r0, r0, #3
   833c4:	f1c0 0000 	rsb	r0, r0, #0
   833c8:	f851 3b04 	ldr.w	r3, [r1], #4
   833cc:	f100 0c04 	add.w	ip, r0, #4
   833d0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   833d4:	f06f 0200 	mvn.w	r2, #0
   833d8:	bf1c      	itt	ne
   833da:	fa22 f20c 	lsrne.w	r2, r2, ip
   833de:	4313      	orrne	r3, r2
   833e0:	f04f 0c01 	mov.w	ip, #1
   833e4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   833e8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   833ec:	eba3 020c 	sub.w	r2, r3, ip
   833f0:	ea22 0203 	bic.w	r2, r2, r3
   833f4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   833f8:	bf04      	itt	eq
   833fa:	f851 3b04 	ldreq.w	r3, [r1], #4
   833fe:	3004      	addeq	r0, #4
   83400:	d0f4      	beq.n	833ec <strlen+0x30>
   83402:	f1c2 0100 	rsb	r1, r2, #0
   83406:	ea02 0201 	and.w	r2, r2, r1
   8340a:	fab2 f282 	clz	r2, r2
   8340e:	f1c2 021f 	rsb	r2, r2, #31
   83412:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83416:	4770      	bx	lr

00083418 <strncpy>:
   83418:	ea40 0301 	orr.w	r3, r0, r1
   8341c:	079b      	lsls	r3, r3, #30
   8341e:	b470      	push	{r4, r5, r6}
   83420:	d12b      	bne.n	8347a <strncpy+0x62>
   83422:	2a03      	cmp	r2, #3
   83424:	d929      	bls.n	8347a <strncpy+0x62>
   83426:	460c      	mov	r4, r1
   83428:	4603      	mov	r3, r0
   8342a:	4621      	mov	r1, r4
   8342c:	f854 6b04 	ldr.w	r6, [r4], #4
   83430:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   83434:	ea25 0506 	bic.w	r5, r5, r6
   83438:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8343c:	d105      	bne.n	8344a <strncpy+0x32>
   8343e:	3a04      	subs	r2, #4
   83440:	2a03      	cmp	r2, #3
   83442:	f843 6b04 	str.w	r6, [r3], #4
   83446:	4621      	mov	r1, r4
   83448:	d8ef      	bhi.n	8342a <strncpy+0x12>
   8344a:	b1a2      	cbz	r2, 83476 <strncpy+0x5e>
   8344c:	780c      	ldrb	r4, [r1, #0]
   8344e:	3a01      	subs	r2, #1
   83450:	701c      	strb	r4, [r3, #0]
   83452:	3101      	adds	r1, #1
   83454:	3301      	adds	r3, #1
   83456:	b13c      	cbz	r4, 83468 <strncpy+0x50>
   83458:	b16a      	cbz	r2, 83476 <strncpy+0x5e>
   8345a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8345e:	3a01      	subs	r2, #1
   83460:	f803 4b01 	strb.w	r4, [r3], #1
   83464:	2c00      	cmp	r4, #0
   83466:	d1f7      	bne.n	83458 <strncpy+0x40>
   83468:	b12a      	cbz	r2, 83476 <strncpy+0x5e>
   8346a:	441a      	add	r2, r3
   8346c:	2100      	movs	r1, #0
   8346e:	f803 1b01 	strb.w	r1, [r3], #1
   83472:	4293      	cmp	r3, r2
   83474:	d1fb      	bne.n	8346e <strncpy+0x56>
   83476:	bc70      	pop	{r4, r5, r6}
   83478:	4770      	bx	lr
   8347a:	4603      	mov	r3, r0
   8347c:	e7e5      	b.n	8344a <strncpy+0x32>
   8347e:	bf00      	nop

00083480 <_strtol_r>:
   83480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83484:	4c44      	ldr	r4, [pc, #272]	; (83598 <_strtol_r+0x118>)
   83486:	4683      	mov	fp, r0
   83488:	460e      	mov	r6, r1
   8348a:	f8d4 e000 	ldr.w	lr, [r4]
   8348e:	e000      	b.n	83492 <_strtol_r+0x12>
   83490:	4626      	mov	r6, r4
   83492:	4634      	mov	r4, r6
   83494:	f814 5b01 	ldrb.w	r5, [r4], #1
   83498:	eb0e 0005 	add.w	r0, lr, r5
   8349c:	7840      	ldrb	r0, [r0, #1]
   8349e:	f000 0008 	and.w	r0, r0, #8
   834a2:	f000 08ff 	and.w	r8, r0, #255	; 0xff
   834a6:	2800      	cmp	r0, #0
   834a8:	d1f2      	bne.n	83490 <_strtol_r+0x10>
   834aa:	2d2d      	cmp	r5, #45	; 0x2d
   834ac:	d04b      	beq.n	83546 <_strtol_r+0xc6>
   834ae:	2d2b      	cmp	r5, #43	; 0x2b
   834b0:	bf04      	itt	eq
   834b2:	7875      	ldrbeq	r5, [r6, #1]
   834b4:	1cb4      	addeq	r4, r6, #2
   834b6:	b11b      	cbz	r3, 834c0 <_strtol_r+0x40>
   834b8:	2b10      	cmp	r3, #16
   834ba:	d060      	beq.n	8357e <_strtol_r+0xfe>
   834bc:	469a      	mov	sl, r3
   834be:	e003      	b.n	834c8 <_strtol_r+0x48>
   834c0:	2d30      	cmp	r5, #48	; 0x30
   834c2:	d054      	beq.n	8356e <_strtol_r+0xee>
   834c4:	230a      	movs	r3, #10
   834c6:	469a      	mov	sl, r3
   834c8:	f1b8 0f00 	cmp.w	r8, #0
   834cc:	bf14      	ite	ne
   834ce:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   834d2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   834d6:	fbb0 f9fa 	udiv	r9, r0, sl
   834da:	2700      	movs	r7, #0
   834dc:	46bc      	mov	ip, r7
   834de:	fb0a 0019 	mls	r0, sl, r9, r0
   834e2:	e00c      	b.n	834fe <_strtol_r+0x7e>
   834e4:	3d30      	subs	r5, #48	; 0x30
   834e6:	42ab      	cmp	r3, r5
   834e8:	dd19      	ble.n	8351e <_strtol_r+0x9e>
   834ea:	1c7e      	adds	r6, r7, #1
   834ec:	d005      	beq.n	834fa <_strtol_r+0x7a>
   834ee:	45cc      	cmp	ip, r9
   834f0:	d824      	bhi.n	8353c <_strtol_r+0xbc>
   834f2:	d021      	beq.n	83538 <_strtol_r+0xb8>
   834f4:	fb0a 5c0c 	mla	ip, sl, ip, r5
   834f8:	2701      	movs	r7, #1
   834fa:	f814 5b01 	ldrb.w	r5, [r4], #1
   834fe:	eb0e 0605 	add.w	r6, lr, r5
   83502:	7876      	ldrb	r6, [r6, #1]
   83504:	f016 0f04 	tst.w	r6, #4
   83508:	d1ec      	bne.n	834e4 <_strtol_r+0x64>
   8350a:	f016 0603 	ands.w	r6, r6, #3
   8350e:	d006      	beq.n	8351e <_strtol_r+0x9e>
   83510:	2e01      	cmp	r6, #1
   83512:	bf0c      	ite	eq
   83514:	2637      	moveq	r6, #55	; 0x37
   83516:	2657      	movne	r6, #87	; 0x57
   83518:	1bad      	subs	r5, r5, r6
   8351a:	42ab      	cmp	r3, r5
   8351c:	dce5      	bgt.n	834ea <_strtol_r+0x6a>
   8351e:	1c7b      	adds	r3, r7, #1
   83520:	d016      	beq.n	83550 <_strtol_r+0xd0>
   83522:	f1c8 0000 	rsb	r0, r8, #0
   83526:	ea8c 0000 	eor.w	r0, ip, r0
   8352a:	4440      	add	r0, r8
   8352c:	b14a      	cbz	r2, 83542 <_strtol_r+0xc2>
   8352e:	b107      	cbz	r7, 83532 <_strtol_r+0xb2>
   83530:	1e61      	subs	r1, r4, #1
   83532:	6011      	str	r1, [r2, #0]
   83534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83538:	4285      	cmp	r5, r0
   8353a:	dddb      	ble.n	834f4 <_strtol_r+0x74>
   8353c:	f04f 37ff 	mov.w	r7, #4294967295
   83540:	e7db      	b.n	834fa <_strtol_r+0x7a>
   83542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83546:	1cb4      	adds	r4, r6, #2
   83548:	7875      	ldrb	r5, [r6, #1]
   8354a:	f04f 0801 	mov.w	r8, #1
   8354e:	e7b2      	b.n	834b6 <_strtol_r+0x36>
   83550:	f1b8 0f00 	cmp.w	r8, #0
   83554:	f04f 0322 	mov.w	r3, #34	; 0x22
   83558:	bf14      	ite	ne
   8355a:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8355e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   83562:	f8cb 3000 	str.w	r3, [fp]
   83566:	2a00      	cmp	r2, #0
   83568:	d1e2      	bne.n	83530 <_strtol_r+0xb0>
   8356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8356e:	7823      	ldrb	r3, [r4, #0]
   83570:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   83574:	2b58      	cmp	r3, #88	; 0x58
   83576:	d009      	beq.n	8358c <_strtol_r+0x10c>
   83578:	2308      	movs	r3, #8
   8357a:	469a      	mov	sl, r3
   8357c:	e7a4      	b.n	834c8 <_strtol_r+0x48>
   8357e:	2d30      	cmp	r5, #48	; 0x30
   83580:	d19c      	bne.n	834bc <_strtol_r+0x3c>
   83582:	7820      	ldrb	r0, [r4, #0]
   83584:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   83588:	2858      	cmp	r0, #88	; 0x58
   8358a:	d197      	bne.n	834bc <_strtol_r+0x3c>
   8358c:	f04f 0a10 	mov.w	sl, #16
   83590:	7865      	ldrb	r5, [r4, #1]
   83592:	4653      	mov	r3, sl
   83594:	3402      	adds	r4, #2
   83596:	e797      	b.n	834c8 <_strtol_r+0x48>
   83598:	200705cc 	.word	0x200705cc

0008359c <strtol>:
   8359c:	b430      	push	{r4, r5}
   8359e:	460d      	mov	r5, r1
   835a0:	4c03      	ldr	r4, [pc, #12]	; (835b0 <strtol+0x14>)
   835a2:	4613      	mov	r3, r2
   835a4:	4601      	mov	r1, r0
   835a6:	462a      	mov	r2, r5
   835a8:	6820      	ldr	r0, [r4, #0]
   835aa:	bc30      	pop	{r4, r5}
   835ac:	f7ff bf68 	b.w	83480 <_strtol_r>
   835b0:	200705c8 	.word	0x200705c8

000835b4 <__utoa>:
   835b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   835b6:	b08b      	sub	sp, #44	; 0x2c
   835b8:	466f      	mov	r7, sp
   835ba:	4615      	mov	r5, r2
   835bc:	f8df e070 	ldr.w	lr, [pc, #112]	; 83630 <__utoa+0x7c>
   835c0:	4604      	mov	r4, r0
   835c2:	460e      	mov	r6, r1
   835c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   835c8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   835ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   835ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   835d0:	e89e 0003 	ldmia.w	lr, {r0, r1}
   835d4:	1eab      	subs	r3, r5, #2
   835d6:	f847 0b04 	str.w	r0, [r7], #4
   835da:	2b22      	cmp	r3, #34	; 0x22
   835dc:	7039      	strb	r1, [r7, #0]
   835de:	d822      	bhi.n	83626 <__utoa+0x72>
   835e0:	1e71      	subs	r1, r6, #1
   835e2:	4608      	mov	r0, r1
   835e4:	2300      	movs	r3, #0
   835e6:	e000      	b.n	835ea <__utoa+0x36>
   835e8:	4613      	mov	r3, r2
   835ea:	fbb4 f2f5 	udiv	r2, r4, r5
   835ee:	fb05 4412 	mls	r4, r5, r2, r4
   835f2:	af0a      	add	r7, sp, #40	; 0x28
   835f4:	443c      	add	r4, r7
   835f6:	f814 7c28 	ldrb.w	r7, [r4, #-40]
   835fa:	4614      	mov	r4, r2
   835fc:	f800 7f01 	strb.w	r7, [r0, #1]!
   83600:	1c5a      	adds	r2, r3, #1
   83602:	2c00      	cmp	r4, #0
   83604:	d1f0      	bne.n	835e8 <__utoa+0x34>
   83606:	54b4      	strb	r4, [r6, r2]
   83608:	18f2      	adds	r2, r6, r3
   8360a:	b14b      	cbz	r3, 83620 <__utoa+0x6c>
   8360c:	3401      	adds	r4, #1
   8360e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   83612:	7817      	ldrb	r7, [r2, #0]
   83614:	1b18      	subs	r0, r3, r4
   83616:	4284      	cmp	r4, r0
   83618:	700f      	strb	r7, [r1, #0]
   8361a:	f802 5901 	strb.w	r5, [r2], #-1
   8361e:	dbf5      	blt.n	8360c <__utoa+0x58>
   83620:	4630      	mov	r0, r6
   83622:	b00b      	add	sp, #44	; 0x2c
   83624:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83626:	2000      	movs	r0, #0
   83628:	7030      	strb	r0, [r6, #0]
   8362a:	b00b      	add	sp, #44	; 0x2c
   8362c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8362e:	bf00      	nop
   83630:	0008642c 	.word	0x0008642c

00083634 <__sprint_r.part.0>:
   83634:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8363a:	049c      	lsls	r4, r3, #18
   8363c:	460f      	mov	r7, r1
   8363e:	4692      	mov	sl, r2
   83640:	d52b      	bpl.n	8369a <__sprint_r.part.0+0x66>
   83642:	6893      	ldr	r3, [r2, #8]
   83644:	6812      	ldr	r2, [r2, #0]
   83646:	b333      	cbz	r3, 83696 <__sprint_r.part.0+0x62>
   83648:	4680      	mov	r8, r0
   8364a:	f102 0908 	add.w	r9, r2, #8
   8364e:	e919 0060 	ldmdb	r9, {r5, r6}
   83652:	08b6      	lsrs	r6, r6, #2
   83654:	d017      	beq.n	83686 <__sprint_r.part.0+0x52>
   83656:	3d04      	subs	r5, #4
   83658:	2400      	movs	r4, #0
   8365a:	e001      	b.n	83660 <__sprint_r.part.0+0x2c>
   8365c:	42a6      	cmp	r6, r4
   8365e:	d010      	beq.n	83682 <__sprint_r.part.0+0x4e>
   83660:	4640      	mov	r0, r8
   83662:	f855 1f04 	ldr.w	r1, [r5, #4]!
   83666:	463a      	mov	r2, r7
   83668:	f001 f89a 	bl	847a0 <_fputwc_r>
   8366c:	1c43      	adds	r3, r0, #1
   8366e:	f104 0401 	add.w	r4, r4, #1
   83672:	d1f3      	bne.n	8365c <__sprint_r.part.0+0x28>
   83674:	2300      	movs	r3, #0
   83676:	f8ca 3008 	str.w	r3, [sl, #8]
   8367a:	f8ca 3004 	str.w	r3, [sl, #4]
   8367e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83682:	f8da 3008 	ldr.w	r3, [sl, #8]
   83686:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   8368a:	f8ca 3008 	str.w	r3, [sl, #8]
   8368e:	f109 0908 	add.w	r9, r9, #8
   83692:	2b00      	cmp	r3, #0
   83694:	d1db      	bne.n	8364e <__sprint_r.part.0+0x1a>
   83696:	2000      	movs	r0, #0
   83698:	e7ec      	b.n	83674 <__sprint_r.part.0+0x40>
   8369a:	f001 f9b9 	bl	84a10 <__sfvwrite_r>
   8369e:	2300      	movs	r3, #0
   836a0:	f8ca 3008 	str.w	r3, [sl, #8]
   836a4:	f8ca 3004 	str.w	r3, [sl, #4]
   836a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000836ac <_vfiprintf_r>:
   836ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   836b0:	b0ab      	sub	sp, #172	; 0xac
   836b2:	461c      	mov	r4, r3
   836b4:	9100      	str	r1, [sp, #0]
   836b6:	4693      	mov	fp, r2
   836b8:	9304      	str	r3, [sp, #16]
   836ba:	9001      	str	r0, [sp, #4]
   836bc:	b118      	cbz	r0, 836c6 <_vfiprintf_r+0x1a>
   836be:	6b83      	ldr	r3, [r0, #56]	; 0x38
   836c0:	2b00      	cmp	r3, #0
   836c2:	f000 80e3 	beq.w	8388c <_vfiprintf_r+0x1e0>
   836c6:	9b00      	ldr	r3, [sp, #0]
   836c8:	8999      	ldrh	r1, [r3, #12]
   836ca:	b28a      	uxth	r2, r1
   836cc:	0490      	lsls	r0, r2, #18
   836ce:	d408      	bmi.n	836e2 <_vfiprintf_r+0x36>
   836d0:	4618      	mov	r0, r3
   836d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   836d4:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   836d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   836dc:	8182      	strh	r2, [r0, #12]
   836de:	6643      	str	r3, [r0, #100]	; 0x64
   836e0:	b292      	uxth	r2, r2
   836e2:	0711      	lsls	r1, r2, #28
   836e4:	f140 80b2 	bpl.w	8384c <_vfiprintf_r+0x1a0>
   836e8:	9b00      	ldr	r3, [sp, #0]
   836ea:	691b      	ldr	r3, [r3, #16]
   836ec:	2b00      	cmp	r3, #0
   836ee:	f000 80ad 	beq.w	8384c <_vfiprintf_r+0x1a0>
   836f2:	f002 021a 	and.w	r2, r2, #26
   836f6:	2a0a      	cmp	r2, #10
   836f8:	f000 80b4 	beq.w	83864 <_vfiprintf_r+0x1b8>
   836fc:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   83700:	4654      	mov	r4, sl
   83702:	2300      	movs	r3, #0
   83704:	9309      	str	r3, [sp, #36]	; 0x24
   83706:	9302      	str	r3, [sp, #8]
   83708:	930f      	str	r3, [sp, #60]	; 0x3c
   8370a:	930e      	str	r3, [sp, #56]	; 0x38
   8370c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   83710:	f89b 3000 	ldrb.w	r3, [fp]
   83714:	2b00      	cmp	r3, #0
   83716:	f000 84a3 	beq.w	84060 <_vfiprintf_r+0x9b4>
   8371a:	2b25      	cmp	r3, #37	; 0x25
   8371c:	f000 84a0 	beq.w	84060 <_vfiprintf_r+0x9b4>
   83720:	465a      	mov	r2, fp
   83722:	e001      	b.n	83728 <_vfiprintf_r+0x7c>
   83724:	2b25      	cmp	r3, #37	; 0x25
   83726:	d003      	beq.n	83730 <_vfiprintf_r+0x84>
   83728:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   8372c:	2b00      	cmp	r3, #0
   8372e:	d1f9      	bne.n	83724 <_vfiprintf_r+0x78>
   83730:	ebcb 0602 	rsb	r6, fp, r2
   83734:	4615      	mov	r5, r2
   83736:	b196      	cbz	r6, 8375e <_vfiprintf_r+0xb2>
   83738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8373a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8373c:	3301      	adds	r3, #1
   8373e:	4432      	add	r2, r6
   83740:	2b07      	cmp	r3, #7
   83742:	f8c4 b000 	str.w	fp, [r4]
   83746:	6066      	str	r6, [r4, #4]
   83748:	920f      	str	r2, [sp, #60]	; 0x3c
   8374a:	930e      	str	r3, [sp, #56]	; 0x38
   8374c:	dd79      	ble.n	83842 <_vfiprintf_r+0x196>
   8374e:	2a00      	cmp	r2, #0
   83750:	f040 84ad 	bne.w	840ae <_vfiprintf_r+0xa02>
   83754:	4654      	mov	r4, sl
   83756:	9b02      	ldr	r3, [sp, #8]
   83758:	920e      	str	r2, [sp, #56]	; 0x38
   8375a:	4433      	add	r3, r6
   8375c:	9302      	str	r3, [sp, #8]
   8375e:	782b      	ldrb	r3, [r5, #0]
   83760:	2b00      	cmp	r3, #0
   83762:	f000 835f 	beq.w	83e24 <_vfiprintf_r+0x778>
   83766:	f04f 0300 	mov.w	r3, #0
   8376a:	2100      	movs	r1, #0
   8376c:	f04f 3cff 	mov.w	ip, #4294967295
   83770:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83774:	1c68      	adds	r0, r5, #1
   83776:	786b      	ldrb	r3, [r5, #1]
   83778:	4688      	mov	r8, r1
   8377a:	460d      	mov	r5, r1
   8377c:	4666      	mov	r6, ip
   8377e:	f100 0b01 	add.w	fp, r0, #1
   83782:	f1a3 0220 	sub.w	r2, r3, #32
   83786:	2a58      	cmp	r2, #88	; 0x58
   83788:	f200 82aa 	bhi.w	83ce0 <_vfiprintf_r+0x634>
   8378c:	e8df f012 	tbh	[pc, r2, lsl #1]
   83790:	02a8029a 	.word	0x02a8029a
   83794:	02a202a8 	.word	0x02a202a8
   83798:	02a802a8 	.word	0x02a802a8
   8379c:	02a802a8 	.word	0x02a802a8
   837a0:	02a802a8 	.word	0x02a802a8
   837a4:	02600254 	.word	0x02600254
   837a8:	010d02a8 	.word	0x010d02a8
   837ac:	02a8026c 	.word	0x02a8026c
   837b0:	012f0129 	.word	0x012f0129
   837b4:	012f012f 	.word	0x012f012f
   837b8:	012f012f 	.word	0x012f012f
   837bc:	012f012f 	.word	0x012f012f
   837c0:	012f012f 	.word	0x012f012f
   837c4:	02a802a8 	.word	0x02a802a8
   837c8:	02a802a8 	.word	0x02a802a8
   837cc:	02a802a8 	.word	0x02a802a8
   837d0:	02a802a8 	.word	0x02a802a8
   837d4:	02a802a8 	.word	0x02a802a8
   837d8:	02a8013d 	.word	0x02a8013d
   837dc:	02a802a8 	.word	0x02a802a8
   837e0:	02a802a8 	.word	0x02a802a8
   837e4:	02a802a8 	.word	0x02a802a8
   837e8:	02a802a8 	.word	0x02a802a8
   837ec:	017402a8 	.word	0x017402a8
   837f0:	02a802a8 	.word	0x02a802a8
   837f4:	02a802a8 	.word	0x02a802a8
   837f8:	018b02a8 	.word	0x018b02a8
   837fc:	02a802a8 	.word	0x02a802a8
   83800:	02a801a3 	.word	0x02a801a3
   83804:	02a802a8 	.word	0x02a802a8
   83808:	02a802a8 	.word	0x02a802a8
   8380c:	02a802a8 	.word	0x02a802a8
   83810:	02a802a8 	.word	0x02a802a8
   83814:	01c702a8 	.word	0x01c702a8
   83818:	02a801da 	.word	0x02a801da
   8381c:	02a802a8 	.word	0x02a802a8
   83820:	01da0123 	.word	0x01da0123
   83824:	02a802a8 	.word	0x02a802a8
   83828:	02a8024b 	.word	0x02a8024b
   8382c:	01130288 	.word	0x01130288
   83830:	020701f4 	.word	0x020701f4
   83834:	020d02a8 	.word	0x020d02a8
   83838:	008102a8 	.word	0x008102a8
   8383c:	02a802a8 	.word	0x02a802a8
   83840:	0232      	.short	0x0232
   83842:	3408      	adds	r4, #8
   83844:	9b02      	ldr	r3, [sp, #8]
   83846:	4433      	add	r3, r6
   83848:	9302      	str	r3, [sp, #8]
   8384a:	e788      	b.n	8375e <_vfiprintf_r+0xb2>
   8384c:	9801      	ldr	r0, [sp, #4]
   8384e:	9900      	ldr	r1, [sp, #0]
   83850:	f000 fd72 	bl	84338 <__swsetup_r>
   83854:	b9a8      	cbnz	r0, 83882 <_vfiprintf_r+0x1d6>
   83856:	9b00      	ldr	r3, [sp, #0]
   83858:	899a      	ldrh	r2, [r3, #12]
   8385a:	f002 021a 	and.w	r2, r2, #26
   8385e:	2a0a      	cmp	r2, #10
   83860:	f47f af4c 	bne.w	836fc <_vfiprintf_r+0x50>
   83864:	9b00      	ldr	r3, [sp, #0]
   83866:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   8386a:	2b00      	cmp	r3, #0
   8386c:	f6ff af46 	blt.w	836fc <_vfiprintf_r+0x50>
   83870:	9801      	ldr	r0, [sp, #4]
   83872:	9900      	ldr	r1, [sp, #0]
   83874:	465a      	mov	r2, fp
   83876:	4623      	mov	r3, r4
   83878:	f000 fd20 	bl	842bc <__sbprintf>
   8387c:	b02b      	add	sp, #172	; 0xac
   8387e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83882:	f04f 30ff 	mov.w	r0, #4294967295
   83886:	b02b      	add	sp, #172	; 0xac
   83888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8388c:	f000 ff10 	bl	846b0 <__sinit>
   83890:	e719      	b.n	836c6 <_vfiprintf_r+0x1a>
   83892:	f018 0f20 	tst.w	r8, #32
   83896:	9503      	str	r5, [sp, #12]
   83898:	46b4      	mov	ip, r6
   8389a:	f000 810c 	beq.w	83ab6 <_vfiprintf_r+0x40a>
   8389e:	9b04      	ldr	r3, [sp, #16]
   838a0:	3307      	adds	r3, #7
   838a2:	f023 0307 	bic.w	r3, r3, #7
   838a6:	f103 0208 	add.w	r2, r3, #8
   838aa:	e9d3 6700 	ldrd	r6, r7, [r3]
   838ae:	9204      	str	r2, [sp, #16]
   838b0:	2301      	movs	r3, #1
   838b2:	f04f 0200 	mov.w	r2, #0
   838b6:	46e1      	mov	r9, ip
   838b8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   838bc:	2500      	movs	r5, #0
   838be:	f1bc 0f00 	cmp.w	ip, #0
   838c2:	bfa8      	it	ge
   838c4:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   838c8:	ea56 0207 	orrs.w	r2, r6, r7
   838cc:	f040 80c4 	bne.w	83a58 <_vfiprintf_r+0x3ac>
   838d0:	f1bc 0f00 	cmp.w	ip, #0
   838d4:	f000 8380 	beq.w	83fd8 <_vfiprintf_r+0x92c>
   838d8:	2b01      	cmp	r3, #1
   838da:	f000 80c5 	beq.w	83a68 <_vfiprintf_r+0x3bc>
   838de:	2b02      	cmp	r3, #2
   838e0:	f000 8386 	beq.w	83ff0 <_vfiprintf_r+0x944>
   838e4:	4651      	mov	r1, sl
   838e6:	08f2      	lsrs	r2, r6, #3
   838e8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   838ec:	08f8      	lsrs	r0, r7, #3
   838ee:	f006 0307 	and.w	r3, r6, #7
   838f2:	4607      	mov	r7, r0
   838f4:	4616      	mov	r6, r2
   838f6:	3330      	adds	r3, #48	; 0x30
   838f8:	ea56 0207 	orrs.w	r2, r6, r7
   838fc:	f801 3d01 	strb.w	r3, [r1, #-1]!
   83900:	d1f1      	bne.n	838e6 <_vfiprintf_r+0x23a>
   83902:	f018 0f01 	tst.w	r8, #1
   83906:	9107      	str	r1, [sp, #28]
   83908:	f040 83fa 	bne.w	84100 <_vfiprintf_r+0xa54>
   8390c:	ebc1 090a 	rsb	r9, r1, sl
   83910:	45e1      	cmp	r9, ip
   83912:	464e      	mov	r6, r9
   83914:	bfb8      	it	lt
   83916:	4666      	movlt	r6, ip
   83918:	b105      	cbz	r5, 8391c <_vfiprintf_r+0x270>
   8391a:	3601      	adds	r6, #1
   8391c:	f018 0302 	ands.w	r3, r8, #2
   83920:	9305      	str	r3, [sp, #20]
   83922:	bf18      	it	ne
   83924:	3602      	addne	r6, #2
   83926:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   8392a:	9306      	str	r3, [sp, #24]
   8392c:	f040 81f9 	bne.w	83d22 <_vfiprintf_r+0x676>
   83930:	9b03      	ldr	r3, [sp, #12]
   83932:	1b9d      	subs	r5, r3, r6
   83934:	2d00      	cmp	r5, #0
   83936:	f340 81f4 	ble.w	83d22 <_vfiprintf_r+0x676>
   8393a:	2d10      	cmp	r5, #16
   8393c:	f340 848a 	ble.w	84254 <_vfiprintf_r+0xba8>
   83940:	4620      	mov	r0, r4
   83942:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   83946:	4664      	mov	r4, ip
   83948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8394a:	4fc4      	ldr	r7, [pc, #784]	; (83c5c <_vfiprintf_r+0x5b0>)
   8394c:	2310      	movs	r3, #16
   8394e:	4671      	mov	r1, lr
   83950:	4684      	mov	ip, r0
   83952:	e007      	b.n	83964 <_vfiprintf_r+0x2b8>
   83954:	f101 0e02 	add.w	lr, r1, #2
   83958:	4601      	mov	r1, r0
   8395a:	f10c 0c08 	add.w	ip, ip, #8
   8395e:	3d10      	subs	r5, #16
   83960:	2d10      	cmp	r5, #16
   83962:	dd13      	ble.n	8398c <_vfiprintf_r+0x2e0>
   83964:	1c48      	adds	r0, r1, #1
   83966:	3210      	adds	r2, #16
   83968:	2807      	cmp	r0, #7
   8396a:	920f      	str	r2, [sp, #60]	; 0x3c
   8396c:	f8cc 7000 	str.w	r7, [ip]
   83970:	f8cc 3004 	str.w	r3, [ip, #4]
   83974:	900e      	str	r0, [sp, #56]	; 0x38
   83976:	dded      	ble.n	83954 <_vfiprintf_r+0x2a8>
   83978:	2a00      	cmp	r2, #0
   8397a:	f040 81c2 	bne.w	83d02 <_vfiprintf_r+0x656>
   8397e:	3d10      	subs	r5, #16
   83980:	2d10      	cmp	r5, #16
   83982:	4611      	mov	r1, r2
   83984:	f04f 0e01 	mov.w	lr, #1
   83988:	46d4      	mov	ip, sl
   8398a:	dceb      	bgt.n	83964 <_vfiprintf_r+0x2b8>
   8398c:	4663      	mov	r3, ip
   8398e:	4671      	mov	r1, lr
   83990:	46a4      	mov	ip, r4
   83992:	461c      	mov	r4, r3
   83994:	442a      	add	r2, r5
   83996:	2907      	cmp	r1, #7
   83998:	920f      	str	r2, [sp, #60]	; 0x3c
   8399a:	6027      	str	r7, [r4, #0]
   8399c:	6065      	str	r5, [r4, #4]
   8399e:	910e      	str	r1, [sp, #56]	; 0x38
   839a0:	f300 8346 	bgt.w	84030 <_vfiprintf_r+0x984>
   839a4:	3408      	adds	r4, #8
   839a6:	1c48      	adds	r0, r1, #1
   839a8:	e1be      	b.n	83d28 <_vfiprintf_r+0x67c>
   839aa:	4658      	mov	r0, fp
   839ac:	f048 0804 	orr.w	r8, r8, #4
   839b0:	f89b 3000 	ldrb.w	r3, [fp]
   839b4:	e6e3      	b.n	8377e <_vfiprintf_r+0xd2>
   839b6:	f018 0320 	ands.w	r3, r8, #32
   839ba:	9503      	str	r5, [sp, #12]
   839bc:	46b4      	mov	ip, r6
   839be:	d062      	beq.n	83a86 <_vfiprintf_r+0x3da>
   839c0:	9b04      	ldr	r3, [sp, #16]
   839c2:	3307      	adds	r3, #7
   839c4:	f023 0307 	bic.w	r3, r3, #7
   839c8:	f103 0208 	add.w	r2, r3, #8
   839cc:	e9d3 6700 	ldrd	r6, r7, [r3]
   839d0:	9204      	str	r2, [sp, #16]
   839d2:	2300      	movs	r3, #0
   839d4:	e76d      	b.n	838b2 <_vfiprintf_r+0x206>
   839d6:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   839da:	f89b 3000 	ldrb.w	r3, [fp]
   839de:	4658      	mov	r0, fp
   839e0:	e6cd      	b.n	8377e <_vfiprintf_r+0xd2>
   839e2:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   839e6:	f89b 3000 	ldrb.w	r3, [fp]
   839ea:	4658      	mov	r0, fp
   839ec:	e6c7      	b.n	8377e <_vfiprintf_r+0xd2>
   839ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   839f2:	2500      	movs	r5, #0
   839f4:	f81b 3b01 	ldrb.w	r3, [fp], #1
   839f8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   839fc:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   83a00:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83a04:	2a09      	cmp	r2, #9
   83a06:	d9f5      	bls.n	839f4 <_vfiprintf_r+0x348>
   83a08:	e6bb      	b.n	83782 <_vfiprintf_r+0xd6>
   83a0a:	f048 0810 	orr.w	r8, r8, #16
   83a0e:	f018 0f20 	tst.w	r8, #32
   83a12:	9503      	str	r5, [sp, #12]
   83a14:	46b4      	mov	ip, r6
   83a16:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83a1a:	f000 809b 	beq.w	83b54 <_vfiprintf_r+0x4a8>
   83a1e:	9904      	ldr	r1, [sp, #16]
   83a20:	3107      	adds	r1, #7
   83a22:	f021 0107 	bic.w	r1, r1, #7
   83a26:	e9d1 2300 	ldrd	r2, r3, [r1]
   83a2a:	4616      	mov	r6, r2
   83a2c:	461f      	mov	r7, r3
   83a2e:	3108      	adds	r1, #8
   83a30:	9104      	str	r1, [sp, #16]
   83a32:	2a00      	cmp	r2, #0
   83a34:	f173 0300 	sbcs.w	r3, r3, #0
   83a38:	f2c0 83a4 	blt.w	84184 <_vfiprintf_r+0xad8>
   83a3c:	f1bc 0f00 	cmp.w	ip, #0
   83a40:	bfa8      	it	ge
   83a42:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   83a46:	ea56 0207 	orrs.w	r2, r6, r7
   83a4a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   83a4e:	46e1      	mov	r9, ip
   83a50:	f04f 0301 	mov.w	r3, #1
   83a54:	f43f af3c 	beq.w	838d0 <_vfiprintf_r+0x224>
   83a58:	2b01      	cmp	r3, #1
   83a5a:	f47f af40 	bne.w	838de <_vfiprintf_r+0x232>
   83a5e:	2f00      	cmp	r7, #0
   83a60:	bf08      	it	eq
   83a62:	2e0a      	cmpeq	r6, #10
   83a64:	f080 8332 	bcs.w	840cc <_vfiprintf_r+0xa20>
   83a68:	ab2a      	add	r3, sp, #168	; 0xa8
   83a6a:	3630      	adds	r6, #48	; 0x30
   83a6c:	f803 6d41 	strb.w	r6, [r3, #-65]!
   83a70:	ebc3 090a 	rsb	r9, r3, sl
   83a74:	9307      	str	r3, [sp, #28]
   83a76:	e74b      	b.n	83910 <_vfiprintf_r+0x264>
   83a78:	f048 0810 	orr.w	r8, r8, #16
   83a7c:	f018 0320 	ands.w	r3, r8, #32
   83a80:	9503      	str	r5, [sp, #12]
   83a82:	46b4      	mov	ip, r6
   83a84:	d19c      	bne.n	839c0 <_vfiprintf_r+0x314>
   83a86:	f018 0210 	ands.w	r2, r8, #16
   83a8a:	f040 82f7 	bne.w	8407c <_vfiprintf_r+0x9d0>
   83a8e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   83a92:	f000 82f3 	beq.w	8407c <_vfiprintf_r+0x9d0>
   83a96:	9904      	ldr	r1, [sp, #16]
   83a98:	4613      	mov	r3, r2
   83a9a:	460a      	mov	r2, r1
   83a9c:	3204      	adds	r2, #4
   83a9e:	880e      	ldrh	r6, [r1, #0]
   83aa0:	2700      	movs	r7, #0
   83aa2:	9204      	str	r2, [sp, #16]
   83aa4:	e705      	b.n	838b2 <_vfiprintf_r+0x206>
   83aa6:	f048 0810 	orr.w	r8, r8, #16
   83aaa:	f018 0f20 	tst.w	r8, #32
   83aae:	9503      	str	r5, [sp, #12]
   83ab0:	46b4      	mov	ip, r6
   83ab2:	f47f aef4 	bne.w	8389e <_vfiprintf_r+0x1f2>
   83ab6:	9a04      	ldr	r2, [sp, #16]
   83ab8:	f018 0f10 	tst.w	r8, #16
   83abc:	4613      	mov	r3, r2
   83abe:	f040 82e4 	bne.w	8408a <_vfiprintf_r+0x9de>
   83ac2:	f018 0f40 	tst.w	r8, #64	; 0x40
   83ac6:	f000 82e0 	beq.w	8408a <_vfiprintf_r+0x9de>
   83aca:	8816      	ldrh	r6, [r2, #0]
   83acc:	3204      	adds	r2, #4
   83ace:	2700      	movs	r7, #0
   83ad0:	2301      	movs	r3, #1
   83ad2:	9204      	str	r2, [sp, #16]
   83ad4:	e6ed      	b.n	838b2 <_vfiprintf_r+0x206>
   83ad6:	4a62      	ldr	r2, [pc, #392]	; (83c60 <_vfiprintf_r+0x5b4>)
   83ad8:	f018 0f20 	tst.w	r8, #32
   83adc:	9503      	str	r5, [sp, #12]
   83ade:	46b4      	mov	ip, r6
   83ae0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83ae4:	9209      	str	r2, [sp, #36]	; 0x24
   83ae6:	f000 808f 	beq.w	83c08 <_vfiprintf_r+0x55c>
   83aea:	9a04      	ldr	r2, [sp, #16]
   83aec:	3207      	adds	r2, #7
   83aee:	f022 0207 	bic.w	r2, r2, #7
   83af2:	f102 0108 	add.w	r1, r2, #8
   83af6:	9104      	str	r1, [sp, #16]
   83af8:	e9d2 6700 	ldrd	r6, r7, [r2]
   83afc:	f018 0f01 	tst.w	r8, #1
   83b00:	f000 828f 	beq.w	84022 <_vfiprintf_r+0x976>
   83b04:	ea56 0207 	orrs.w	r2, r6, r7
   83b08:	f000 828b 	beq.w	84022 <_vfiprintf_r+0x976>
   83b0c:	2230      	movs	r2, #48	; 0x30
   83b0e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   83b12:	f048 0802 	orr.w	r8, r8, #2
   83b16:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   83b1a:	2302      	movs	r3, #2
   83b1c:	e6c9      	b.n	838b2 <_vfiprintf_r+0x206>
   83b1e:	9a04      	ldr	r2, [sp, #16]
   83b20:	2601      	movs	r6, #1
   83b22:	6813      	ldr	r3, [r2, #0]
   83b24:	f04f 0100 	mov.w	r1, #0
   83b28:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   83b2c:	4613      	mov	r3, r2
   83b2e:	46b1      	mov	r9, r6
   83b30:	3304      	adds	r3, #4
   83b32:	9304      	str	r3, [sp, #16]
   83b34:	ab10      	add	r3, sp, #64	; 0x40
   83b36:	9503      	str	r5, [sp, #12]
   83b38:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83b3c:	9307      	str	r3, [sp, #28]
   83b3e:	f04f 0c00 	mov.w	ip, #0
   83b42:	e6eb      	b.n	8391c <_vfiprintf_r+0x270>
   83b44:	f018 0f20 	tst.w	r8, #32
   83b48:	9503      	str	r5, [sp, #12]
   83b4a:	46b4      	mov	ip, r6
   83b4c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83b50:	f47f af65 	bne.w	83a1e <_vfiprintf_r+0x372>
   83b54:	9a04      	ldr	r2, [sp, #16]
   83b56:	f018 0f10 	tst.w	r8, #16
   83b5a:	4613      	mov	r3, r2
   83b5c:	f040 82a0 	bne.w	840a0 <_vfiprintf_r+0x9f4>
   83b60:	f018 0f40 	tst.w	r8, #64	; 0x40
   83b64:	f000 829c 	beq.w	840a0 <_vfiprintf_r+0x9f4>
   83b68:	f9b2 6000 	ldrsh.w	r6, [r2]
   83b6c:	3304      	adds	r3, #4
   83b6e:	17f7      	asrs	r7, r6, #31
   83b70:	9304      	str	r3, [sp, #16]
   83b72:	4632      	mov	r2, r6
   83b74:	463b      	mov	r3, r7
   83b76:	e75c      	b.n	83a32 <_vfiprintf_r+0x386>
   83b78:	9904      	ldr	r1, [sp, #16]
   83b7a:	2378      	movs	r3, #120	; 0x78
   83b7c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   83b80:	4b38      	ldr	r3, [pc, #224]	; (83c64 <_vfiprintf_r+0x5b8>)
   83b82:	46b4      	mov	ip, r6
   83b84:	2230      	movs	r2, #48	; 0x30
   83b86:	680e      	ldr	r6, [r1, #0]
   83b88:	3104      	adds	r1, #4
   83b8a:	9309      	str	r3, [sp, #36]	; 0x24
   83b8c:	9503      	str	r5, [sp, #12]
   83b8e:	f048 0802 	orr.w	r8, r8, #2
   83b92:	9104      	str	r1, [sp, #16]
   83b94:	2700      	movs	r7, #0
   83b96:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   83b9a:	2302      	movs	r3, #2
   83b9c:	e689      	b.n	838b2 <_vfiprintf_r+0x206>
   83b9e:	f048 0820 	orr.w	r8, r8, #32
   83ba2:	f89b 3000 	ldrb.w	r3, [fp]
   83ba6:	4658      	mov	r0, fp
   83ba8:	e5e9      	b.n	8377e <_vfiprintf_r+0xd2>
   83baa:	f04f 0100 	mov.w	r1, #0
   83bae:	9a04      	ldr	r2, [sp, #16]
   83bb0:	9503      	str	r5, [sp, #12]
   83bb2:	6813      	ldr	r3, [r2, #0]
   83bb4:	46b4      	mov	ip, r6
   83bb6:	9307      	str	r3, [sp, #28]
   83bb8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83bbc:	1d15      	adds	r5, r2, #4
   83bbe:	2b00      	cmp	r3, #0
   83bc0:	f000 834e 	beq.w	84260 <_vfiprintf_r+0xbb4>
   83bc4:	2e00      	cmp	r6, #0
   83bc6:	f2c0 8329 	blt.w	8421c <_vfiprintf_r+0xb70>
   83bca:	9e07      	ldr	r6, [sp, #28]
   83bcc:	4662      	mov	r2, ip
   83bce:	4630      	mov	r0, r6
   83bd0:	2100      	movs	r1, #0
   83bd2:	f8cd c010 	str.w	ip, [sp, #16]
   83bd6:	f001 fbff 	bl	853d8 <memchr>
   83bda:	f8dd c010 	ldr.w	ip, [sp, #16]
   83bde:	2800      	cmp	r0, #0
   83be0:	f000 834e 	beq.w	84280 <_vfiprintf_r+0xbd4>
   83be4:	9504      	str	r5, [sp, #16]
   83be6:	ebc6 0900 	rsb	r9, r6, r0
   83bea:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   83bee:	f04f 0c00 	mov.w	ip, #0
   83bf2:	e68d      	b.n	83910 <_vfiprintf_r+0x264>
   83bf4:	4a1b      	ldr	r2, [pc, #108]	; (83c64 <_vfiprintf_r+0x5b8>)
   83bf6:	f018 0f20 	tst.w	r8, #32
   83bfa:	9503      	str	r5, [sp, #12]
   83bfc:	46b4      	mov	ip, r6
   83bfe:	9209      	str	r2, [sp, #36]	; 0x24
   83c00:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83c04:	f47f af71 	bne.w	83aea <_vfiprintf_r+0x43e>
   83c08:	9904      	ldr	r1, [sp, #16]
   83c0a:	f018 0f10 	tst.w	r8, #16
   83c0e:	460a      	mov	r2, r1
   83c10:	f040 8241 	bne.w	84096 <_vfiprintf_r+0x9ea>
   83c14:	f018 0f40 	tst.w	r8, #64	; 0x40
   83c18:	f000 823d 	beq.w	84096 <_vfiprintf_r+0x9ea>
   83c1c:	3204      	adds	r2, #4
   83c1e:	880e      	ldrh	r6, [r1, #0]
   83c20:	2700      	movs	r7, #0
   83c22:	9204      	str	r2, [sp, #16]
   83c24:	e76a      	b.n	83afc <_vfiprintf_r+0x450>
   83c26:	f89b 3000 	ldrb.w	r3, [fp]
   83c2a:	2b6c      	cmp	r3, #108	; 0x6c
   83c2c:	f000 82e9 	beq.w	84202 <_vfiprintf_r+0xb56>
   83c30:	f048 0810 	orr.w	r8, r8, #16
   83c34:	4658      	mov	r0, fp
   83c36:	e5a2      	b.n	8377e <_vfiprintf_r+0xd2>
   83c38:	9a04      	ldr	r2, [sp, #16]
   83c3a:	4613      	mov	r3, r2
   83c3c:	6815      	ldr	r5, [r2, #0]
   83c3e:	3304      	adds	r3, #4
   83c40:	2d00      	cmp	r5, #0
   83c42:	f2c0 82e6 	blt.w	84212 <_vfiprintf_r+0xb66>
   83c46:	9304      	str	r3, [sp, #16]
   83c48:	f89b 3000 	ldrb.w	r3, [fp]
   83c4c:	4658      	mov	r0, fp
   83c4e:	e596      	b.n	8377e <_vfiprintf_r+0xd2>
   83c50:	f89b 3000 	ldrb.w	r3, [fp]
   83c54:	4658      	mov	r0, fp
   83c56:	212b      	movs	r1, #43	; 0x2b
   83c58:	e591      	b.n	8377e <_vfiprintf_r+0xd2>
   83c5a:	bf00      	nop
   83c5c:	00086494 	.word	0x00086494
   83c60:	00086464 	.word	0x00086464
   83c64:	00086478 	.word	0x00086478
   83c68:	f89b 3000 	ldrb.w	r3, [fp]
   83c6c:	f10b 0001 	add.w	r0, fp, #1
   83c70:	2b2a      	cmp	r3, #42	; 0x2a
   83c72:	f000 830f 	beq.w	84294 <_vfiprintf_r+0xbe8>
   83c76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83c7a:	2a09      	cmp	r2, #9
   83c7c:	4683      	mov	fp, r0
   83c7e:	f04f 0600 	mov.w	r6, #0
   83c82:	f63f ad7e 	bhi.w	83782 <_vfiprintf_r+0xd6>
   83c86:	f81b 3b01 	ldrb.w	r3, [fp], #1
   83c8a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   83c8e:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   83c92:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83c96:	2a09      	cmp	r2, #9
   83c98:	d9f5      	bls.n	83c86 <_vfiprintf_r+0x5da>
   83c9a:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   83c9e:	e570      	b.n	83782 <_vfiprintf_r+0xd6>
   83ca0:	f018 0f20 	tst.w	r8, #32
   83ca4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83ca8:	f000 8283 	beq.w	841b2 <_vfiprintf_r+0xb06>
   83cac:	9a04      	ldr	r2, [sp, #16]
   83cae:	4613      	mov	r3, r2
   83cb0:	3304      	adds	r3, #4
   83cb2:	9304      	str	r3, [sp, #16]
   83cb4:	9b02      	ldr	r3, [sp, #8]
   83cb6:	6811      	ldr	r1, [r2, #0]
   83cb8:	17df      	asrs	r7, r3, #31
   83cba:	461a      	mov	r2, r3
   83cbc:	463b      	mov	r3, r7
   83cbe:	e9c1 2300 	strd	r2, r3, [r1]
   83cc2:	e525      	b.n	83710 <_vfiprintf_r+0x64>
   83cc4:	4658      	mov	r0, fp
   83cc6:	f89b 3000 	ldrb.w	r3, [fp]
   83cca:	2900      	cmp	r1, #0
   83ccc:	f47f ad57 	bne.w	8377e <_vfiprintf_r+0xd2>
   83cd0:	2120      	movs	r1, #32
   83cd2:	e554      	b.n	8377e <_vfiprintf_r+0xd2>
   83cd4:	f048 0801 	orr.w	r8, r8, #1
   83cd8:	4658      	mov	r0, fp
   83cda:	f89b 3000 	ldrb.w	r3, [fp]
   83cde:	e54e      	b.n	8377e <_vfiprintf_r+0xd2>
   83ce0:	9503      	str	r5, [sp, #12]
   83ce2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83ce6:	2b00      	cmp	r3, #0
   83ce8:	f000 809c 	beq.w	83e24 <_vfiprintf_r+0x778>
   83cec:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   83cf0:	f04f 0300 	mov.w	r3, #0
   83cf4:	2601      	movs	r6, #1
   83cf6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83cfa:	ab10      	add	r3, sp, #64	; 0x40
   83cfc:	46b1      	mov	r9, r6
   83cfe:	9307      	str	r3, [sp, #28]
   83d00:	e71d      	b.n	83b3e <_vfiprintf_r+0x492>
   83d02:	9801      	ldr	r0, [sp, #4]
   83d04:	9900      	ldr	r1, [sp, #0]
   83d06:	aa0d      	add	r2, sp, #52	; 0x34
   83d08:	9308      	str	r3, [sp, #32]
   83d0a:	f7ff fc93 	bl	83634 <__sprint_r.part.0>
   83d0e:	2800      	cmp	r0, #0
   83d10:	f040 808f 	bne.w	83e32 <_vfiprintf_r+0x786>
   83d14:	990e      	ldr	r1, [sp, #56]	; 0x38
   83d16:	46d4      	mov	ip, sl
   83d18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83d1a:	f101 0e01 	add.w	lr, r1, #1
   83d1e:	9b08      	ldr	r3, [sp, #32]
   83d20:	e61d      	b.n	8395e <_vfiprintf_r+0x2b2>
   83d22:	990e      	ldr	r1, [sp, #56]	; 0x38
   83d24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83d26:	1c48      	adds	r0, r1, #1
   83d28:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   83d2c:	b16b      	cbz	r3, 83d4a <_vfiprintf_r+0x69e>
   83d2e:	3201      	adds	r2, #1
   83d30:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   83d34:	2101      	movs	r1, #1
   83d36:	2807      	cmp	r0, #7
   83d38:	920f      	str	r2, [sp, #60]	; 0x3c
   83d3a:	900e      	str	r0, [sp, #56]	; 0x38
   83d3c:	6023      	str	r3, [r4, #0]
   83d3e:	6061      	str	r1, [r4, #4]
   83d40:	f300 8134 	bgt.w	83fac <_vfiprintf_r+0x900>
   83d44:	4601      	mov	r1, r0
   83d46:	3408      	adds	r4, #8
   83d48:	3001      	adds	r0, #1
   83d4a:	9b05      	ldr	r3, [sp, #20]
   83d4c:	b163      	cbz	r3, 83d68 <_vfiprintf_r+0x6bc>
   83d4e:	3202      	adds	r2, #2
   83d50:	a90c      	add	r1, sp, #48	; 0x30
   83d52:	2302      	movs	r3, #2
   83d54:	2807      	cmp	r0, #7
   83d56:	920f      	str	r2, [sp, #60]	; 0x3c
   83d58:	900e      	str	r0, [sp, #56]	; 0x38
   83d5a:	e884 000a 	stmia.w	r4, {r1, r3}
   83d5e:	f300 8134 	bgt.w	83fca <_vfiprintf_r+0x91e>
   83d62:	4601      	mov	r1, r0
   83d64:	3408      	adds	r4, #8
   83d66:	3001      	adds	r0, #1
   83d68:	9b06      	ldr	r3, [sp, #24]
   83d6a:	2b80      	cmp	r3, #128	; 0x80
   83d6c:	f000 80d4 	beq.w	83f18 <_vfiprintf_r+0x86c>
   83d70:	ebc9 070c 	rsb	r7, r9, ip
   83d74:	2f00      	cmp	r7, #0
   83d76:	dd2b      	ble.n	83dd0 <_vfiprintf_r+0x724>
   83d78:	2f10      	cmp	r7, #16
   83d7a:	4dab      	ldr	r5, [pc, #684]	; (84028 <_vfiprintf_r+0x97c>)
   83d7c:	dd1f      	ble.n	83dbe <_vfiprintf_r+0x712>
   83d7e:	46a6      	mov	lr, r4
   83d80:	2310      	movs	r3, #16
   83d82:	9c01      	ldr	r4, [sp, #4]
   83d84:	e007      	b.n	83d96 <_vfiprintf_r+0x6ea>
   83d86:	f101 0c02 	add.w	ip, r1, #2
   83d8a:	4601      	mov	r1, r0
   83d8c:	f10e 0e08 	add.w	lr, lr, #8
   83d90:	3f10      	subs	r7, #16
   83d92:	2f10      	cmp	r7, #16
   83d94:	dd11      	ble.n	83dba <_vfiprintf_r+0x70e>
   83d96:	1c48      	adds	r0, r1, #1
   83d98:	3210      	adds	r2, #16
   83d9a:	2807      	cmp	r0, #7
   83d9c:	920f      	str	r2, [sp, #60]	; 0x3c
   83d9e:	f8ce 5000 	str.w	r5, [lr]
   83da2:	f8ce 3004 	str.w	r3, [lr, #4]
   83da6:	900e      	str	r0, [sp, #56]	; 0x38
   83da8:	dded      	ble.n	83d86 <_vfiprintf_r+0x6da>
   83daa:	bb6a      	cbnz	r2, 83e08 <_vfiprintf_r+0x75c>
   83dac:	3f10      	subs	r7, #16
   83dae:	2f10      	cmp	r7, #16
   83db0:	f04f 0c01 	mov.w	ip, #1
   83db4:	4611      	mov	r1, r2
   83db6:	46d6      	mov	lr, sl
   83db8:	dced      	bgt.n	83d96 <_vfiprintf_r+0x6ea>
   83dba:	4674      	mov	r4, lr
   83dbc:	4660      	mov	r0, ip
   83dbe:	443a      	add	r2, r7
   83dc0:	2807      	cmp	r0, #7
   83dc2:	920f      	str	r2, [sp, #60]	; 0x3c
   83dc4:	e884 00a0 	stmia.w	r4, {r5, r7}
   83dc8:	900e      	str	r0, [sp, #56]	; 0x38
   83dca:	dc3b      	bgt.n	83e44 <_vfiprintf_r+0x798>
   83dcc:	3408      	adds	r4, #8
   83dce:	3001      	adds	r0, #1
   83dd0:	eb02 0309 	add.w	r3, r2, r9
   83dd4:	9a07      	ldr	r2, [sp, #28]
   83dd6:	2807      	cmp	r0, #7
   83dd8:	930f      	str	r3, [sp, #60]	; 0x3c
   83dda:	e884 0204 	stmia.w	r4, {r2, r9}
   83dde:	900e      	str	r0, [sp, #56]	; 0x38
   83de0:	dd3d      	ble.n	83e5e <_vfiprintf_r+0x7b2>
   83de2:	2b00      	cmp	r3, #0
   83de4:	f040 813f 	bne.w	84066 <_vfiprintf_r+0x9ba>
   83de8:	f018 0f04 	tst.w	r8, #4
   83dec:	930e      	str	r3, [sp, #56]	; 0x38
   83dee:	f040 8130 	bne.w	84052 <_vfiprintf_r+0x9a6>
   83df2:	9b02      	ldr	r3, [sp, #8]
   83df4:	9a03      	ldr	r2, [sp, #12]
   83df6:	4296      	cmp	r6, r2
   83df8:	bfac      	ite	ge
   83dfa:	199b      	addge	r3, r3, r6
   83dfc:	189b      	addlt	r3, r3, r2
   83dfe:	9302      	str	r3, [sp, #8]
   83e00:	2300      	movs	r3, #0
   83e02:	930e      	str	r3, [sp, #56]	; 0x38
   83e04:	4654      	mov	r4, sl
   83e06:	e483      	b.n	83710 <_vfiprintf_r+0x64>
   83e08:	4620      	mov	r0, r4
   83e0a:	9900      	ldr	r1, [sp, #0]
   83e0c:	aa0d      	add	r2, sp, #52	; 0x34
   83e0e:	9305      	str	r3, [sp, #20]
   83e10:	f7ff fc10 	bl	83634 <__sprint_r.part.0>
   83e14:	b968      	cbnz	r0, 83e32 <_vfiprintf_r+0x786>
   83e16:	990e      	ldr	r1, [sp, #56]	; 0x38
   83e18:	46d6      	mov	lr, sl
   83e1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83e1c:	f101 0c01 	add.w	ip, r1, #1
   83e20:	9b05      	ldr	r3, [sp, #20]
   83e22:	e7b5      	b.n	83d90 <_vfiprintf_r+0x6e4>
   83e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   83e26:	b123      	cbz	r3, 83e32 <_vfiprintf_r+0x786>
   83e28:	9801      	ldr	r0, [sp, #4]
   83e2a:	9900      	ldr	r1, [sp, #0]
   83e2c:	aa0d      	add	r2, sp, #52	; 0x34
   83e2e:	f7ff fc01 	bl	83634 <__sprint_r.part.0>
   83e32:	9b00      	ldr	r3, [sp, #0]
   83e34:	899b      	ldrh	r3, [r3, #12]
   83e36:	065b      	lsls	r3, r3, #25
   83e38:	f53f ad23 	bmi.w	83882 <_vfiprintf_r+0x1d6>
   83e3c:	9802      	ldr	r0, [sp, #8]
   83e3e:	b02b      	add	sp, #172	; 0xac
   83e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e44:	2a00      	cmp	r2, #0
   83e46:	f040 8190 	bne.w	8416a <_vfiprintf_r+0xabe>
   83e4a:	464b      	mov	r3, r9
   83e4c:	4654      	mov	r4, sl
   83e4e:	9907      	ldr	r1, [sp, #28]
   83e50:	2201      	movs	r2, #1
   83e52:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   83e56:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   83e5a:	911a      	str	r1, [sp, #104]	; 0x68
   83e5c:	920e      	str	r2, [sp, #56]	; 0x38
   83e5e:	f104 0208 	add.w	r2, r4, #8
   83e62:	f018 0f04 	tst.w	r8, #4
   83e66:	d039      	beq.n	83edc <_vfiprintf_r+0x830>
   83e68:	9903      	ldr	r1, [sp, #12]
   83e6a:	1b8d      	subs	r5, r1, r6
   83e6c:	2d00      	cmp	r5, #0
   83e6e:	dd35      	ble.n	83edc <_vfiprintf_r+0x830>
   83e70:	2d10      	cmp	r5, #16
   83e72:	f340 8200 	ble.w	84276 <_vfiprintf_r+0xbca>
   83e76:	980e      	ldr	r0, [sp, #56]	; 0x38
   83e78:	4f6c      	ldr	r7, [pc, #432]	; (8402c <_vfiprintf_r+0x980>)
   83e7a:	2410      	movs	r4, #16
   83e7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
   83e80:	f8dd 9000 	ldr.w	r9, [sp]
   83e84:	e006      	b.n	83e94 <_vfiprintf_r+0x7e8>
   83e86:	f100 0e02 	add.w	lr, r0, #2
   83e8a:	4608      	mov	r0, r1
   83e8c:	3208      	adds	r2, #8
   83e8e:	3d10      	subs	r5, #16
   83e90:	2d10      	cmp	r5, #16
   83e92:	dd10      	ble.n	83eb6 <_vfiprintf_r+0x80a>
   83e94:	1c41      	adds	r1, r0, #1
   83e96:	3310      	adds	r3, #16
   83e98:	2907      	cmp	r1, #7
   83e9a:	930f      	str	r3, [sp, #60]	; 0x3c
   83e9c:	6017      	str	r7, [r2, #0]
   83e9e:	6054      	str	r4, [r2, #4]
   83ea0:	910e      	str	r1, [sp, #56]	; 0x38
   83ea2:	ddf0      	ble.n	83e86 <_vfiprintf_r+0x7da>
   83ea4:	2b00      	cmp	r3, #0
   83ea6:	d12a      	bne.n	83efe <_vfiprintf_r+0x852>
   83ea8:	3d10      	subs	r5, #16
   83eaa:	2d10      	cmp	r5, #16
   83eac:	f04f 0e01 	mov.w	lr, #1
   83eb0:	4618      	mov	r0, r3
   83eb2:	4652      	mov	r2, sl
   83eb4:	dcee      	bgt.n	83e94 <_vfiprintf_r+0x7e8>
   83eb6:	442b      	add	r3, r5
   83eb8:	f1be 0f07 	cmp.w	lr, #7
   83ebc:	930f      	str	r3, [sp, #60]	; 0x3c
   83ebe:	6017      	str	r7, [r2, #0]
   83ec0:	6055      	str	r5, [r2, #4]
   83ec2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83ec6:	dd09      	ble.n	83edc <_vfiprintf_r+0x830>
   83ec8:	2b00      	cmp	r3, #0
   83eca:	d092      	beq.n	83df2 <_vfiprintf_r+0x746>
   83ecc:	9801      	ldr	r0, [sp, #4]
   83ece:	9900      	ldr	r1, [sp, #0]
   83ed0:	aa0d      	add	r2, sp, #52	; 0x34
   83ed2:	f7ff fbaf 	bl	83634 <__sprint_r.part.0>
   83ed6:	2800      	cmp	r0, #0
   83ed8:	d1ab      	bne.n	83e32 <_vfiprintf_r+0x786>
   83eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   83edc:	9a02      	ldr	r2, [sp, #8]
   83ede:	9903      	ldr	r1, [sp, #12]
   83ee0:	428e      	cmp	r6, r1
   83ee2:	bfac      	ite	ge
   83ee4:	1992      	addge	r2, r2, r6
   83ee6:	1852      	addlt	r2, r2, r1
   83ee8:	9202      	str	r2, [sp, #8]
   83eea:	2b00      	cmp	r3, #0
   83eec:	d088      	beq.n	83e00 <_vfiprintf_r+0x754>
   83eee:	9801      	ldr	r0, [sp, #4]
   83ef0:	9900      	ldr	r1, [sp, #0]
   83ef2:	aa0d      	add	r2, sp, #52	; 0x34
   83ef4:	f7ff fb9e 	bl	83634 <__sprint_r.part.0>
   83ef8:	2800      	cmp	r0, #0
   83efa:	d081      	beq.n	83e00 <_vfiprintf_r+0x754>
   83efc:	e799      	b.n	83e32 <_vfiprintf_r+0x786>
   83efe:	4640      	mov	r0, r8
   83f00:	4649      	mov	r1, r9
   83f02:	aa0d      	add	r2, sp, #52	; 0x34
   83f04:	f7ff fb96 	bl	83634 <__sprint_r.part.0>
   83f08:	2800      	cmp	r0, #0
   83f0a:	d192      	bne.n	83e32 <_vfiprintf_r+0x786>
   83f0c:	980e      	ldr	r0, [sp, #56]	; 0x38
   83f0e:	4652      	mov	r2, sl
   83f10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   83f12:	f100 0e01 	add.w	lr, r0, #1
   83f16:	e7ba      	b.n	83e8e <_vfiprintf_r+0x7e2>
   83f18:	9b03      	ldr	r3, [sp, #12]
   83f1a:	1b9f      	subs	r7, r3, r6
   83f1c:	2f00      	cmp	r7, #0
   83f1e:	f77f af27 	ble.w	83d70 <_vfiprintf_r+0x6c4>
   83f22:	2f10      	cmp	r7, #16
   83f24:	f340 81b3 	ble.w	8428e <_vfiprintf_r+0xbe2>
   83f28:	4620      	mov	r0, r4
   83f2a:	4d3f      	ldr	r5, [pc, #252]	; (84028 <_vfiprintf_r+0x97c>)
   83f2c:	4664      	mov	r4, ip
   83f2e:	2310      	movs	r3, #16
   83f30:	4684      	mov	ip, r0
   83f32:	e007      	b.n	83f44 <_vfiprintf_r+0x898>
   83f34:	f101 0e02 	add.w	lr, r1, #2
   83f38:	4601      	mov	r1, r0
   83f3a:	f10c 0c08 	add.w	ip, ip, #8
   83f3e:	3f10      	subs	r7, #16
   83f40:	2f10      	cmp	r7, #16
   83f42:	dd11      	ble.n	83f68 <_vfiprintf_r+0x8bc>
   83f44:	1c48      	adds	r0, r1, #1
   83f46:	3210      	adds	r2, #16
   83f48:	2807      	cmp	r0, #7
   83f4a:	920f      	str	r2, [sp, #60]	; 0x3c
   83f4c:	f8cc 5000 	str.w	r5, [ip]
   83f50:	f8cc 3004 	str.w	r3, [ip, #4]
   83f54:	900e      	str	r0, [sp, #56]	; 0x38
   83f56:	dded      	ble.n	83f34 <_vfiprintf_r+0x888>
   83f58:	b9c2      	cbnz	r2, 83f8c <_vfiprintf_r+0x8e0>
   83f5a:	3f10      	subs	r7, #16
   83f5c:	2f10      	cmp	r7, #16
   83f5e:	f04f 0e01 	mov.w	lr, #1
   83f62:	4611      	mov	r1, r2
   83f64:	46d4      	mov	ip, sl
   83f66:	dced      	bgt.n	83f44 <_vfiprintf_r+0x898>
   83f68:	4663      	mov	r3, ip
   83f6a:	46a4      	mov	ip, r4
   83f6c:	461c      	mov	r4, r3
   83f6e:	443a      	add	r2, r7
   83f70:	f1be 0f07 	cmp.w	lr, #7
   83f74:	920f      	str	r2, [sp, #60]	; 0x3c
   83f76:	e884 00a0 	stmia.w	r4, {r5, r7}
   83f7a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83f7e:	f300 80ee 	bgt.w	8415e <_vfiprintf_r+0xab2>
   83f82:	3408      	adds	r4, #8
   83f84:	f10e 0001 	add.w	r0, lr, #1
   83f88:	4671      	mov	r1, lr
   83f8a:	e6f1      	b.n	83d70 <_vfiprintf_r+0x6c4>
   83f8c:	9801      	ldr	r0, [sp, #4]
   83f8e:	9900      	ldr	r1, [sp, #0]
   83f90:	aa0d      	add	r2, sp, #52	; 0x34
   83f92:	9305      	str	r3, [sp, #20]
   83f94:	f7ff fb4e 	bl	83634 <__sprint_r.part.0>
   83f98:	2800      	cmp	r0, #0
   83f9a:	f47f af4a 	bne.w	83e32 <_vfiprintf_r+0x786>
   83f9e:	990e      	ldr	r1, [sp, #56]	; 0x38
   83fa0:	46d4      	mov	ip, sl
   83fa2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83fa4:	f101 0e01 	add.w	lr, r1, #1
   83fa8:	9b05      	ldr	r3, [sp, #20]
   83faa:	e7c8      	b.n	83f3e <_vfiprintf_r+0x892>
   83fac:	2a00      	cmp	r2, #0
   83fae:	f040 80c5 	bne.w	8413c <_vfiprintf_r+0xa90>
   83fb2:	9b05      	ldr	r3, [sp, #20]
   83fb4:	2b00      	cmp	r3, #0
   83fb6:	f000 8085 	beq.w	840c4 <_vfiprintf_r+0xa18>
   83fba:	aa0c      	add	r2, sp, #48	; 0x30
   83fbc:	2302      	movs	r3, #2
   83fbe:	921a      	str	r2, [sp, #104]	; 0x68
   83fc0:	4608      	mov	r0, r1
   83fc2:	931b      	str	r3, [sp, #108]	; 0x6c
   83fc4:	461a      	mov	r2, r3
   83fc6:	4654      	mov	r4, sl
   83fc8:	e6cb      	b.n	83d62 <_vfiprintf_r+0x6b6>
   83fca:	2a00      	cmp	r2, #0
   83fcc:	f040 80a5 	bne.w	8411a <_vfiprintf_r+0xa6e>
   83fd0:	2001      	movs	r0, #1
   83fd2:	4611      	mov	r1, r2
   83fd4:	4654      	mov	r4, sl
   83fd6:	e6c7      	b.n	83d68 <_vfiprintf_r+0x6bc>
   83fd8:	bb03      	cbnz	r3, 8401c <_vfiprintf_r+0x970>
   83fda:	f018 0f01 	tst.w	r8, #1
   83fde:	d01d      	beq.n	8401c <_vfiprintf_r+0x970>
   83fe0:	ab2a      	add	r3, sp, #168	; 0xa8
   83fe2:	2230      	movs	r2, #48	; 0x30
   83fe4:	f803 2d41 	strb.w	r2, [r3, #-65]!
   83fe8:	ebc3 090a 	rsb	r9, r3, sl
   83fec:	9307      	str	r3, [sp, #28]
   83fee:	e48f      	b.n	83910 <_vfiprintf_r+0x264>
   83ff0:	46d1      	mov	r9, sl
   83ff2:	9809      	ldr	r0, [sp, #36]	; 0x24
   83ff4:	0933      	lsrs	r3, r6, #4
   83ff6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   83ffa:	0939      	lsrs	r1, r7, #4
   83ffc:	f006 020f 	and.w	r2, r6, #15
   84000:	460f      	mov	r7, r1
   84002:	461e      	mov	r6, r3
   84004:	5c83      	ldrb	r3, [r0, r2]
   84006:	f809 3d01 	strb.w	r3, [r9, #-1]!
   8400a:	ea56 0307 	orrs.w	r3, r6, r7
   8400e:	d1f1      	bne.n	83ff4 <_vfiprintf_r+0x948>
   84010:	464b      	mov	r3, r9
   84012:	f8cd 901c 	str.w	r9, [sp, #28]
   84016:	ebc3 090a 	rsb	r9, r3, sl
   8401a:	e479      	b.n	83910 <_vfiprintf_r+0x264>
   8401c:	f8cd a01c 	str.w	sl, [sp, #28]
   84020:	e476      	b.n	83910 <_vfiprintf_r+0x264>
   84022:	2302      	movs	r3, #2
   84024:	e445      	b.n	838b2 <_vfiprintf_r+0x206>
   84026:	bf00      	nop
   84028:	00086454 	.word	0x00086454
   8402c:	00086494 	.word	0x00086494
   84030:	2a00      	cmp	r2, #0
   84032:	f040 80d5 	bne.w	841e0 <_vfiprintf_r+0xb34>
   84036:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8403a:	2b00      	cmp	r3, #0
   8403c:	f000 80ac 	beq.w	84198 <_vfiprintf_r+0xaec>
   84040:	2301      	movs	r3, #1
   84042:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   84046:	4618      	mov	r0, r3
   84048:	931b      	str	r3, [sp, #108]	; 0x6c
   8404a:	461a      	mov	r2, r3
   8404c:	911a      	str	r1, [sp, #104]	; 0x68
   8404e:	4654      	mov	r4, sl
   84050:	e678      	b.n	83d44 <_vfiprintf_r+0x698>
   84052:	9a03      	ldr	r2, [sp, #12]
   84054:	1b95      	subs	r5, r2, r6
   84056:	2d00      	cmp	r5, #0
   84058:	4652      	mov	r2, sl
   8405a:	f73f af09 	bgt.w	83e70 <_vfiprintf_r+0x7c4>
   8405e:	e6c8      	b.n	83df2 <_vfiprintf_r+0x746>
   84060:	465d      	mov	r5, fp
   84062:	f7ff bb7c 	b.w	8375e <_vfiprintf_r+0xb2>
   84066:	9801      	ldr	r0, [sp, #4]
   84068:	9900      	ldr	r1, [sp, #0]
   8406a:	aa0d      	add	r2, sp, #52	; 0x34
   8406c:	f7ff fae2 	bl	83634 <__sprint_r.part.0>
   84070:	2800      	cmp	r0, #0
   84072:	f47f aede 	bne.w	83e32 <_vfiprintf_r+0x786>
   84076:	4652      	mov	r2, sl
   84078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8407a:	e6f2      	b.n	83e62 <_vfiprintf_r+0x7b6>
   8407c:	9904      	ldr	r1, [sp, #16]
   8407e:	2700      	movs	r7, #0
   84080:	460a      	mov	r2, r1
   84082:	3204      	adds	r2, #4
   84084:	680e      	ldr	r6, [r1, #0]
   84086:	9204      	str	r2, [sp, #16]
   84088:	e413      	b.n	838b2 <_vfiprintf_r+0x206>
   8408a:	3204      	adds	r2, #4
   8408c:	681e      	ldr	r6, [r3, #0]
   8408e:	2700      	movs	r7, #0
   84090:	2301      	movs	r3, #1
   84092:	9204      	str	r2, [sp, #16]
   84094:	e40d      	b.n	838b2 <_vfiprintf_r+0x206>
   84096:	6816      	ldr	r6, [r2, #0]
   84098:	3204      	adds	r2, #4
   8409a:	9204      	str	r2, [sp, #16]
   8409c:	2700      	movs	r7, #0
   8409e:	e52d      	b.n	83afc <_vfiprintf_r+0x450>
   840a0:	681e      	ldr	r6, [r3, #0]
   840a2:	3304      	adds	r3, #4
   840a4:	17f7      	asrs	r7, r6, #31
   840a6:	9304      	str	r3, [sp, #16]
   840a8:	4632      	mov	r2, r6
   840aa:	463b      	mov	r3, r7
   840ac:	e4c1      	b.n	83a32 <_vfiprintf_r+0x386>
   840ae:	9801      	ldr	r0, [sp, #4]
   840b0:	9900      	ldr	r1, [sp, #0]
   840b2:	aa0d      	add	r2, sp, #52	; 0x34
   840b4:	f7ff fabe 	bl	83634 <__sprint_r.part.0>
   840b8:	2800      	cmp	r0, #0
   840ba:	f47f aeba 	bne.w	83e32 <_vfiprintf_r+0x786>
   840be:	4654      	mov	r4, sl
   840c0:	f7ff bbc0 	b.w	83844 <_vfiprintf_r+0x198>
   840c4:	4608      	mov	r0, r1
   840c6:	4654      	mov	r4, sl
   840c8:	4611      	mov	r1, r2
   840ca:	e64d      	b.n	83d68 <_vfiprintf_r+0x6bc>
   840cc:	46d1      	mov	r9, sl
   840ce:	f8cd c014 	str.w	ip, [sp, #20]
   840d2:	4630      	mov	r0, r6
   840d4:	4639      	mov	r1, r7
   840d6:	220a      	movs	r2, #10
   840d8:	2300      	movs	r3, #0
   840da:	f001 fe99 	bl	85e10 <__aeabi_uldivmod>
   840de:	3230      	adds	r2, #48	; 0x30
   840e0:	4630      	mov	r0, r6
   840e2:	4639      	mov	r1, r7
   840e4:	f809 2d01 	strb.w	r2, [r9, #-1]!
   840e8:	2300      	movs	r3, #0
   840ea:	220a      	movs	r2, #10
   840ec:	f001 fe90 	bl	85e10 <__aeabi_uldivmod>
   840f0:	4606      	mov	r6, r0
   840f2:	460f      	mov	r7, r1
   840f4:	ea56 0307 	orrs.w	r3, r6, r7
   840f8:	d1eb      	bne.n	840d2 <_vfiprintf_r+0xa26>
   840fa:	f8dd c014 	ldr.w	ip, [sp, #20]
   840fe:	e787      	b.n	84010 <_vfiprintf_r+0x964>
   84100:	2b30      	cmp	r3, #48	; 0x30
   84102:	9b07      	ldr	r3, [sp, #28]
   84104:	d087      	beq.n	84016 <_vfiprintf_r+0x96a>
   84106:	3b01      	subs	r3, #1
   84108:	461a      	mov	r2, r3
   8410a:	9307      	str	r3, [sp, #28]
   8410c:	2330      	movs	r3, #48	; 0x30
   8410e:	ebc2 090a 	rsb	r9, r2, sl
   84112:	f801 3c01 	strb.w	r3, [r1, #-1]
   84116:	f7ff bbfb 	b.w	83910 <_vfiprintf_r+0x264>
   8411a:	9801      	ldr	r0, [sp, #4]
   8411c:	9900      	ldr	r1, [sp, #0]
   8411e:	aa0d      	add	r2, sp, #52	; 0x34
   84120:	f8cd c014 	str.w	ip, [sp, #20]
   84124:	f7ff fa86 	bl	83634 <__sprint_r.part.0>
   84128:	2800      	cmp	r0, #0
   8412a:	f47f ae82 	bne.w	83e32 <_vfiprintf_r+0x786>
   8412e:	990e      	ldr	r1, [sp, #56]	; 0x38
   84130:	4654      	mov	r4, sl
   84132:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84134:	1c48      	adds	r0, r1, #1
   84136:	f8dd c014 	ldr.w	ip, [sp, #20]
   8413a:	e615      	b.n	83d68 <_vfiprintf_r+0x6bc>
   8413c:	9801      	ldr	r0, [sp, #4]
   8413e:	9900      	ldr	r1, [sp, #0]
   84140:	aa0d      	add	r2, sp, #52	; 0x34
   84142:	f8cd c020 	str.w	ip, [sp, #32]
   84146:	f7ff fa75 	bl	83634 <__sprint_r.part.0>
   8414a:	2800      	cmp	r0, #0
   8414c:	f47f ae71 	bne.w	83e32 <_vfiprintf_r+0x786>
   84150:	990e      	ldr	r1, [sp, #56]	; 0x38
   84152:	4654      	mov	r4, sl
   84154:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84156:	1c48      	adds	r0, r1, #1
   84158:	f8dd c020 	ldr.w	ip, [sp, #32]
   8415c:	e5f5      	b.n	83d4a <_vfiprintf_r+0x69e>
   8415e:	2a00      	cmp	r2, #0
   84160:	d167      	bne.n	84232 <_vfiprintf_r+0xb86>
   84162:	2001      	movs	r0, #1
   84164:	4611      	mov	r1, r2
   84166:	4654      	mov	r4, sl
   84168:	e602      	b.n	83d70 <_vfiprintf_r+0x6c4>
   8416a:	9801      	ldr	r0, [sp, #4]
   8416c:	9900      	ldr	r1, [sp, #0]
   8416e:	aa0d      	add	r2, sp, #52	; 0x34
   84170:	f7ff fa60 	bl	83634 <__sprint_r.part.0>
   84174:	2800      	cmp	r0, #0
   84176:	f47f ae5c 	bne.w	83e32 <_vfiprintf_r+0x786>
   8417a:	980e      	ldr	r0, [sp, #56]	; 0x38
   8417c:	4654      	mov	r4, sl
   8417e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84180:	3001      	adds	r0, #1
   84182:	e625      	b.n	83dd0 <_vfiprintf_r+0x724>
   84184:	252d      	movs	r5, #45	; 0x2d
   84186:	4276      	negs	r6, r6
   84188:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   8418c:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   84190:	46e1      	mov	r9, ip
   84192:	2301      	movs	r3, #1
   84194:	f7ff bb93 	b.w	838be <_vfiprintf_r+0x212>
   84198:	9b05      	ldr	r3, [sp, #20]
   8419a:	4611      	mov	r1, r2
   8419c:	2001      	movs	r0, #1
   8419e:	4654      	mov	r4, sl
   841a0:	2b00      	cmp	r3, #0
   841a2:	f43f ade5 	beq.w	83d70 <_vfiprintf_r+0x6c4>
   841a6:	aa0c      	add	r2, sp, #48	; 0x30
   841a8:	2302      	movs	r3, #2
   841aa:	e88a 000c 	stmia.w	sl, {r2, r3}
   841ae:	461a      	mov	r2, r3
   841b0:	e5d7      	b.n	83d62 <_vfiprintf_r+0x6b6>
   841b2:	f018 0f10 	tst.w	r8, #16
   841b6:	d10b      	bne.n	841d0 <_vfiprintf_r+0xb24>
   841b8:	f018 0f40 	tst.w	r8, #64	; 0x40
   841bc:	d008      	beq.n	841d0 <_vfiprintf_r+0xb24>
   841be:	9a04      	ldr	r2, [sp, #16]
   841c0:	6813      	ldr	r3, [r2, #0]
   841c2:	3204      	adds	r2, #4
   841c4:	9204      	str	r2, [sp, #16]
   841c6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   841ca:	801a      	strh	r2, [r3, #0]
   841cc:	f7ff baa0 	b.w	83710 <_vfiprintf_r+0x64>
   841d0:	9a04      	ldr	r2, [sp, #16]
   841d2:	6813      	ldr	r3, [r2, #0]
   841d4:	3204      	adds	r2, #4
   841d6:	9204      	str	r2, [sp, #16]
   841d8:	9a02      	ldr	r2, [sp, #8]
   841da:	601a      	str	r2, [r3, #0]
   841dc:	f7ff ba98 	b.w	83710 <_vfiprintf_r+0x64>
   841e0:	9801      	ldr	r0, [sp, #4]
   841e2:	9900      	ldr	r1, [sp, #0]
   841e4:	aa0d      	add	r2, sp, #52	; 0x34
   841e6:	f8cd c020 	str.w	ip, [sp, #32]
   841ea:	f7ff fa23 	bl	83634 <__sprint_r.part.0>
   841ee:	2800      	cmp	r0, #0
   841f0:	f47f ae1f 	bne.w	83e32 <_vfiprintf_r+0x786>
   841f4:	990e      	ldr	r1, [sp, #56]	; 0x38
   841f6:	4654      	mov	r4, sl
   841f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   841fa:	1c48      	adds	r0, r1, #1
   841fc:	f8dd c020 	ldr.w	ip, [sp, #32]
   84200:	e592      	b.n	83d28 <_vfiprintf_r+0x67c>
   84202:	f048 0820 	orr.w	r8, r8, #32
   84206:	f10b 0001 	add.w	r0, fp, #1
   8420a:	f89b 3001 	ldrb.w	r3, [fp, #1]
   8420e:	f7ff bab6 	b.w	8377e <_vfiprintf_r+0xd2>
   84212:	426d      	negs	r5, r5
   84214:	9304      	str	r3, [sp, #16]
   84216:	4658      	mov	r0, fp
   84218:	f7ff bbc8 	b.w	839ac <_vfiprintf_r+0x300>
   8421c:	9807      	ldr	r0, [sp, #28]
   8421e:	9504      	str	r5, [sp, #16]
   84220:	f7ff f8cc 	bl	833bc <strlen>
   84224:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84228:	4681      	mov	r9, r0
   8422a:	f04f 0c00 	mov.w	ip, #0
   8422e:	f7ff bb6f 	b.w	83910 <_vfiprintf_r+0x264>
   84232:	9801      	ldr	r0, [sp, #4]
   84234:	9900      	ldr	r1, [sp, #0]
   84236:	aa0d      	add	r2, sp, #52	; 0x34
   84238:	f8cd c014 	str.w	ip, [sp, #20]
   8423c:	f7ff f9fa 	bl	83634 <__sprint_r.part.0>
   84240:	2800      	cmp	r0, #0
   84242:	f47f adf6 	bne.w	83e32 <_vfiprintf_r+0x786>
   84246:	990e      	ldr	r1, [sp, #56]	; 0x38
   84248:	4654      	mov	r4, sl
   8424a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8424c:	1c48      	adds	r0, r1, #1
   8424e:	f8dd c014 	ldr.w	ip, [sp, #20]
   84252:	e58d      	b.n	83d70 <_vfiprintf_r+0x6c4>
   84254:	990e      	ldr	r1, [sp, #56]	; 0x38
   84256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84258:	3101      	adds	r1, #1
   8425a:	4f15      	ldr	r7, [pc, #84]	; (842b0 <_vfiprintf_r+0xc04>)
   8425c:	f7ff bb9a 	b.w	83994 <_vfiprintf_r+0x2e8>
   84260:	2e06      	cmp	r6, #6
   84262:	4b14      	ldr	r3, [pc, #80]	; (842b4 <_vfiprintf_r+0xc08>)
   84264:	bf28      	it	cs
   84266:	f04f 0c06 	movcs.w	ip, #6
   8426a:	46e1      	mov	r9, ip
   8426c:	9504      	str	r5, [sp, #16]
   8426e:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   84272:	9307      	str	r3, [sp, #28]
   84274:	e463      	b.n	83b3e <_vfiprintf_r+0x492>
   84276:	990e      	ldr	r1, [sp, #56]	; 0x38
   84278:	4f0d      	ldr	r7, [pc, #52]	; (842b0 <_vfiprintf_r+0xc04>)
   8427a:	f101 0e01 	add.w	lr, r1, #1
   8427e:	e61a      	b.n	83eb6 <_vfiprintf_r+0x80a>
   84280:	46e1      	mov	r9, ip
   84282:	9504      	str	r5, [sp, #16]
   84284:	4684      	mov	ip, r0
   84286:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   8428a:	f7ff bb41 	b.w	83910 <_vfiprintf_r+0x264>
   8428e:	4686      	mov	lr, r0
   84290:	4d09      	ldr	r5, [pc, #36]	; (842b8 <_vfiprintf_r+0xc0c>)
   84292:	e66c      	b.n	83f6e <_vfiprintf_r+0x8c2>
   84294:	9a04      	ldr	r2, [sp, #16]
   84296:	f89b 3001 	ldrb.w	r3, [fp, #1]
   8429a:	6816      	ldr	r6, [r2, #0]
   8429c:	3204      	adds	r2, #4
   8429e:	2e00      	cmp	r6, #0
   842a0:	9204      	str	r2, [sp, #16]
   842a2:	f6bf aa6c 	bge.w	8377e <_vfiprintf_r+0xd2>
   842a6:	f04f 36ff 	mov.w	r6, #4294967295
   842aa:	f7ff ba68 	b.w	8377e <_vfiprintf_r+0xd2>
   842ae:	bf00      	nop
   842b0:	00086494 	.word	0x00086494
   842b4:	0008648c 	.word	0x0008648c
   842b8:	00086454 	.word	0x00086454

000842bc <__sbprintf>:
   842bc:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   842c0:	4688      	mov	r8, r1
   842c2:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   842c4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   842c8:	9719      	str	r7, [sp, #100]	; 0x64
   842ca:	f8d8 701c 	ldr.w	r7, [r8, #28]
   842ce:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   842d2:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   842d6:	9707      	str	r7, [sp, #28]
   842d8:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   842dc:	ac1a      	add	r4, sp, #104	; 0x68
   842de:	f44f 6580 	mov.w	r5, #1024	; 0x400
   842e2:	f02e 0e02 	bic.w	lr, lr, #2
   842e6:	2600      	movs	r6, #0
   842e8:	4669      	mov	r1, sp
   842ea:	9400      	str	r4, [sp, #0]
   842ec:	9404      	str	r4, [sp, #16]
   842ee:	9502      	str	r5, [sp, #8]
   842f0:	9505      	str	r5, [sp, #20]
   842f2:	f8ad e00c 	strh.w	lr, [sp, #12]
   842f6:	f8ad a00e 	strh.w	sl, [sp, #14]
   842fa:	9709      	str	r7, [sp, #36]	; 0x24
   842fc:	9606      	str	r6, [sp, #24]
   842fe:	4605      	mov	r5, r0
   84300:	f7ff f9d4 	bl	836ac <_vfiprintf_r>
   84304:	1e04      	subs	r4, r0, #0
   84306:	db07      	blt.n	84318 <__sbprintf+0x5c>
   84308:	4628      	mov	r0, r5
   8430a:	4669      	mov	r1, sp
   8430c:	f000 f92a 	bl	84564 <_fflush_r>
   84310:	42b0      	cmp	r0, r6
   84312:	bf18      	it	ne
   84314:	f04f 34ff 	movne.w	r4, #4294967295
   84318:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8431c:	065b      	lsls	r3, r3, #25
   8431e:	d505      	bpl.n	8432c <__sbprintf+0x70>
   84320:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   84324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84328:	f8a8 300c 	strh.w	r3, [r8, #12]
   8432c:	4620      	mov	r0, r4
   8432e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   84332:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   84336:	bf00      	nop

00084338 <__swsetup_r>:
   84338:	b538      	push	{r3, r4, r5, lr}
   8433a:	4b2f      	ldr	r3, [pc, #188]	; (843f8 <__swsetup_r+0xc0>)
   8433c:	4605      	mov	r5, r0
   8433e:	6818      	ldr	r0, [r3, #0]
   84340:	460c      	mov	r4, r1
   84342:	b110      	cbz	r0, 8434a <__swsetup_r+0x12>
   84344:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84346:	2b00      	cmp	r3, #0
   84348:	d036      	beq.n	843b8 <__swsetup_r+0x80>
   8434a:	89a2      	ldrh	r2, [r4, #12]
   8434c:	b293      	uxth	r3, r2
   8434e:	0718      	lsls	r0, r3, #28
   84350:	d50c      	bpl.n	8436c <__swsetup_r+0x34>
   84352:	6920      	ldr	r0, [r4, #16]
   84354:	b1a8      	cbz	r0, 84382 <__swsetup_r+0x4a>
   84356:	f013 0201 	ands.w	r2, r3, #1
   8435a:	d01e      	beq.n	8439a <__swsetup_r+0x62>
   8435c:	6963      	ldr	r3, [r4, #20]
   8435e:	2200      	movs	r2, #0
   84360:	425b      	negs	r3, r3
   84362:	61a3      	str	r3, [r4, #24]
   84364:	60a2      	str	r2, [r4, #8]
   84366:	b1f0      	cbz	r0, 843a6 <__swsetup_r+0x6e>
   84368:	2000      	movs	r0, #0
   8436a:	bd38      	pop	{r3, r4, r5, pc}
   8436c:	06d9      	lsls	r1, r3, #27
   8436e:	d53a      	bpl.n	843e6 <__swsetup_r+0xae>
   84370:	0758      	lsls	r0, r3, #29
   84372:	d424      	bmi.n	843be <__swsetup_r+0x86>
   84374:	6920      	ldr	r0, [r4, #16]
   84376:	f042 0308 	orr.w	r3, r2, #8
   8437a:	81a3      	strh	r3, [r4, #12]
   8437c:	b29b      	uxth	r3, r3
   8437e:	2800      	cmp	r0, #0
   84380:	d1e9      	bne.n	84356 <__swsetup_r+0x1e>
   84382:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84386:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8438a:	d0e4      	beq.n	84356 <__swsetup_r+0x1e>
   8438c:	4628      	mov	r0, r5
   8438e:	4621      	mov	r1, r4
   84390:	f000 fd24 	bl	84ddc <__smakebuf_r>
   84394:	89a3      	ldrh	r3, [r4, #12]
   84396:	6920      	ldr	r0, [r4, #16]
   84398:	e7dd      	b.n	84356 <__swsetup_r+0x1e>
   8439a:	0799      	lsls	r1, r3, #30
   8439c:	bf58      	it	pl
   8439e:	6962      	ldrpl	r2, [r4, #20]
   843a0:	60a2      	str	r2, [r4, #8]
   843a2:	2800      	cmp	r0, #0
   843a4:	d1e0      	bne.n	84368 <__swsetup_r+0x30>
   843a6:	89a3      	ldrh	r3, [r4, #12]
   843a8:	061a      	lsls	r2, r3, #24
   843aa:	d5de      	bpl.n	8436a <__swsetup_r+0x32>
   843ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   843b0:	81a3      	strh	r3, [r4, #12]
   843b2:	f04f 30ff 	mov.w	r0, #4294967295
   843b6:	bd38      	pop	{r3, r4, r5, pc}
   843b8:	f000 f97a 	bl	846b0 <__sinit>
   843bc:	e7c5      	b.n	8434a <__swsetup_r+0x12>
   843be:	6b21      	ldr	r1, [r4, #48]	; 0x30
   843c0:	b149      	cbz	r1, 843d6 <__swsetup_r+0x9e>
   843c2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   843c6:	4299      	cmp	r1, r3
   843c8:	d003      	beq.n	843d2 <__swsetup_r+0x9a>
   843ca:	4628      	mov	r0, r5
   843cc:	f000 fa48 	bl	84860 <_free_r>
   843d0:	89a2      	ldrh	r2, [r4, #12]
   843d2:	2300      	movs	r3, #0
   843d4:	6323      	str	r3, [r4, #48]	; 0x30
   843d6:	6920      	ldr	r0, [r4, #16]
   843d8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   843dc:	2300      	movs	r3, #0
   843de:	b292      	uxth	r2, r2
   843e0:	e884 0009 	stmia.w	r4, {r0, r3}
   843e4:	e7c7      	b.n	84376 <__swsetup_r+0x3e>
   843e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   843ea:	2309      	movs	r3, #9
   843ec:	602b      	str	r3, [r5, #0]
   843ee:	f04f 30ff 	mov.w	r0, #4294967295
   843f2:	81a2      	strh	r2, [r4, #12]
   843f4:	bd38      	pop	{r3, r4, r5, pc}
   843f6:	bf00      	nop
   843f8:	200705c8 	.word	0x200705c8

000843fc <register_fini>:
   843fc:	4b02      	ldr	r3, [pc, #8]	; (84408 <register_fini+0xc>)
   843fe:	b113      	cbz	r3, 84406 <register_fini+0xa>
   84400:	4802      	ldr	r0, [pc, #8]	; (8440c <register_fini+0x10>)
   84402:	f000 b805 	b.w	84410 <atexit>
   84406:	4770      	bx	lr
   84408:	00000000 	.word	0x00000000
   8440c:	000846c5 	.word	0x000846c5

00084410 <atexit>:
   84410:	4601      	mov	r1, r0
   84412:	2000      	movs	r0, #0
   84414:	4602      	mov	r2, r0
   84416:	4603      	mov	r3, r0
   84418:	f001 bc06 	b.w	85c28 <__register_exitproc>

0008441c <__sflush_r>:
   8441c:	898b      	ldrh	r3, [r1, #12]
   8441e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84422:	b29a      	uxth	r2, r3
   84424:	460d      	mov	r5, r1
   84426:	0711      	lsls	r1, r2, #28
   84428:	4680      	mov	r8, r0
   8442a:	d43c      	bmi.n	844a6 <__sflush_r+0x8a>
   8442c:	686a      	ldr	r2, [r5, #4]
   8442e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84432:	2a00      	cmp	r2, #0
   84434:	81ab      	strh	r3, [r5, #12]
   84436:	dd65      	ble.n	84504 <__sflush_r+0xe8>
   84438:	6aae      	ldr	r6, [r5, #40]	; 0x28
   8443a:	2e00      	cmp	r6, #0
   8443c:	d04b      	beq.n	844d6 <__sflush_r+0xba>
   8443e:	b29b      	uxth	r3, r3
   84440:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84444:	2100      	movs	r1, #0
   84446:	b292      	uxth	r2, r2
   84448:	f8d8 4000 	ldr.w	r4, [r8]
   8444c:	f8c8 1000 	str.w	r1, [r8]
   84450:	2a00      	cmp	r2, #0
   84452:	d05b      	beq.n	8450c <__sflush_r+0xf0>
   84454:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84456:	075f      	lsls	r7, r3, #29
   84458:	d505      	bpl.n	84466 <__sflush_r+0x4a>
   8445a:	6869      	ldr	r1, [r5, #4]
   8445c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8445e:	1a52      	subs	r2, r2, r1
   84460:	b10b      	cbz	r3, 84466 <__sflush_r+0x4a>
   84462:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84464:	1ad2      	subs	r2, r2, r3
   84466:	4640      	mov	r0, r8
   84468:	69e9      	ldr	r1, [r5, #28]
   8446a:	2300      	movs	r3, #0
   8446c:	47b0      	blx	r6
   8446e:	1c46      	adds	r6, r0, #1
   84470:	d056      	beq.n	84520 <__sflush_r+0x104>
   84472:	89ab      	ldrh	r3, [r5, #12]
   84474:	692a      	ldr	r2, [r5, #16]
   84476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8447a:	b29b      	uxth	r3, r3
   8447c:	2100      	movs	r1, #0
   8447e:	602a      	str	r2, [r5, #0]
   84480:	04da      	lsls	r2, r3, #19
   84482:	81ab      	strh	r3, [r5, #12]
   84484:	6069      	str	r1, [r5, #4]
   84486:	d43b      	bmi.n	84500 <__sflush_r+0xe4>
   84488:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8448a:	f8c8 4000 	str.w	r4, [r8]
   8448e:	b311      	cbz	r1, 844d6 <__sflush_r+0xba>
   84490:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84494:	4299      	cmp	r1, r3
   84496:	d002      	beq.n	8449e <__sflush_r+0x82>
   84498:	4640      	mov	r0, r8
   8449a:	f000 f9e1 	bl	84860 <_free_r>
   8449e:	2000      	movs	r0, #0
   844a0:	6328      	str	r0, [r5, #48]	; 0x30
   844a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   844a6:	692e      	ldr	r6, [r5, #16]
   844a8:	b1ae      	cbz	r6, 844d6 <__sflush_r+0xba>
   844aa:	0791      	lsls	r1, r2, #30
   844ac:	682c      	ldr	r4, [r5, #0]
   844ae:	bf0c      	ite	eq
   844b0:	696b      	ldreq	r3, [r5, #20]
   844b2:	2300      	movne	r3, #0
   844b4:	602e      	str	r6, [r5, #0]
   844b6:	1ba4      	subs	r4, r4, r6
   844b8:	60ab      	str	r3, [r5, #8]
   844ba:	e00a      	b.n	844d2 <__sflush_r+0xb6>
   844bc:	4632      	mov	r2, r6
   844be:	4623      	mov	r3, r4
   844c0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   844c2:	4640      	mov	r0, r8
   844c4:	69e9      	ldr	r1, [r5, #28]
   844c6:	47b8      	blx	r7
   844c8:	2800      	cmp	r0, #0
   844ca:	eba4 0400 	sub.w	r4, r4, r0
   844ce:	4406      	add	r6, r0
   844d0:	dd04      	ble.n	844dc <__sflush_r+0xc0>
   844d2:	2c00      	cmp	r4, #0
   844d4:	dcf2      	bgt.n	844bc <__sflush_r+0xa0>
   844d6:	2000      	movs	r0, #0
   844d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   844dc:	89ab      	ldrh	r3, [r5, #12]
   844de:	f04f 30ff 	mov.w	r0, #4294967295
   844e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   844e6:	81ab      	strh	r3, [r5, #12]
   844e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   844ec:	89ab      	ldrh	r3, [r5, #12]
   844ee:	692a      	ldr	r2, [r5, #16]
   844f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   844f4:	b29b      	uxth	r3, r3
   844f6:	81ab      	strh	r3, [r5, #12]
   844f8:	04db      	lsls	r3, r3, #19
   844fa:	6069      	str	r1, [r5, #4]
   844fc:	602a      	str	r2, [r5, #0]
   844fe:	d5c3      	bpl.n	84488 <__sflush_r+0x6c>
   84500:	6528      	str	r0, [r5, #80]	; 0x50
   84502:	e7c1      	b.n	84488 <__sflush_r+0x6c>
   84504:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84506:	2a00      	cmp	r2, #0
   84508:	dc96      	bgt.n	84438 <__sflush_r+0x1c>
   8450a:	e7e4      	b.n	844d6 <__sflush_r+0xba>
   8450c:	2301      	movs	r3, #1
   8450e:	4640      	mov	r0, r8
   84510:	69e9      	ldr	r1, [r5, #28]
   84512:	47b0      	blx	r6
   84514:	1c43      	adds	r3, r0, #1
   84516:	4602      	mov	r2, r0
   84518:	d019      	beq.n	8454e <__sflush_r+0x132>
   8451a:	89ab      	ldrh	r3, [r5, #12]
   8451c:	6aae      	ldr	r6, [r5, #40]	; 0x28
   8451e:	e79a      	b.n	84456 <__sflush_r+0x3a>
   84520:	f8d8 1000 	ldr.w	r1, [r8]
   84524:	2900      	cmp	r1, #0
   84526:	d0e1      	beq.n	844ec <__sflush_r+0xd0>
   84528:	291d      	cmp	r1, #29
   8452a:	d007      	beq.n	8453c <__sflush_r+0x120>
   8452c:	2916      	cmp	r1, #22
   8452e:	d005      	beq.n	8453c <__sflush_r+0x120>
   84530:	89ab      	ldrh	r3, [r5, #12]
   84532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84536:	81ab      	strh	r3, [r5, #12]
   84538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8453c:	89ab      	ldrh	r3, [r5, #12]
   8453e:	6929      	ldr	r1, [r5, #16]
   84540:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84544:	2200      	movs	r2, #0
   84546:	81ab      	strh	r3, [r5, #12]
   84548:	e885 0006 	stmia.w	r5, {r1, r2}
   8454c:	e79c      	b.n	84488 <__sflush_r+0x6c>
   8454e:	f8d8 3000 	ldr.w	r3, [r8]
   84552:	2b00      	cmp	r3, #0
   84554:	d0e1      	beq.n	8451a <__sflush_r+0xfe>
   84556:	2b1d      	cmp	r3, #29
   84558:	d001      	beq.n	8455e <__sflush_r+0x142>
   8455a:	2b16      	cmp	r3, #22
   8455c:	d1be      	bne.n	844dc <__sflush_r+0xc0>
   8455e:	f8c8 4000 	str.w	r4, [r8]
   84562:	e7b8      	b.n	844d6 <__sflush_r+0xba>

00084564 <_fflush_r>:
   84564:	b510      	push	{r4, lr}
   84566:	4604      	mov	r4, r0
   84568:	b082      	sub	sp, #8
   8456a:	b108      	cbz	r0, 84570 <_fflush_r+0xc>
   8456c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8456e:	b153      	cbz	r3, 84586 <_fflush_r+0x22>
   84570:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84574:	b908      	cbnz	r0, 8457a <_fflush_r+0x16>
   84576:	b002      	add	sp, #8
   84578:	bd10      	pop	{r4, pc}
   8457a:	4620      	mov	r0, r4
   8457c:	b002      	add	sp, #8
   8457e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84582:	f7ff bf4b 	b.w	8441c <__sflush_r>
   84586:	9101      	str	r1, [sp, #4]
   84588:	f000 f892 	bl	846b0 <__sinit>
   8458c:	9901      	ldr	r1, [sp, #4]
   8458e:	e7ef      	b.n	84570 <_fflush_r+0xc>

00084590 <fflush>:
   84590:	b120      	cbz	r0, 8459c <fflush+0xc>
   84592:	4b05      	ldr	r3, [pc, #20]	; (845a8 <fflush+0x18>)
   84594:	4601      	mov	r1, r0
   84596:	6818      	ldr	r0, [r3, #0]
   84598:	f7ff bfe4 	b.w	84564 <_fflush_r>
   8459c:	4b03      	ldr	r3, [pc, #12]	; (845ac <fflush+0x1c>)
   8459e:	4904      	ldr	r1, [pc, #16]	; (845b0 <fflush+0x20>)
   845a0:	6818      	ldr	r0, [r3, #0]
   845a2:	f000 bbe9 	b.w	84d78 <_fwalk_reent>
   845a6:	bf00      	nop
   845a8:	200705c8 	.word	0x200705c8
   845ac:	00086428 	.word	0x00086428
   845b0:	00084565 	.word	0x00084565

000845b4 <_cleanup_r>:
   845b4:	4901      	ldr	r1, [pc, #4]	; (845bc <_cleanup_r+0x8>)
   845b6:	f000 bbdf 	b.w	84d78 <_fwalk_reent>
   845ba:	bf00      	nop
   845bc:	00085cf1 	.word	0x00085cf1

000845c0 <__sinit.part.1>:
   845c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   845c4:	4607      	mov	r7, r0
   845c6:	4835      	ldr	r0, [pc, #212]	; (8469c <__sinit.part.1+0xdc>)
   845c8:	687d      	ldr	r5, [r7, #4]
   845ca:	2400      	movs	r4, #0
   845cc:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   845d0:	2304      	movs	r3, #4
   845d2:	2103      	movs	r1, #3
   845d4:	63f8      	str	r0, [r7, #60]	; 0x3c
   845d6:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   845da:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   845de:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   845e2:	b083      	sub	sp, #12
   845e4:	602c      	str	r4, [r5, #0]
   845e6:	606c      	str	r4, [r5, #4]
   845e8:	60ac      	str	r4, [r5, #8]
   845ea:	666c      	str	r4, [r5, #100]	; 0x64
   845ec:	81ec      	strh	r4, [r5, #14]
   845ee:	612c      	str	r4, [r5, #16]
   845f0:	616c      	str	r4, [r5, #20]
   845f2:	61ac      	str	r4, [r5, #24]
   845f4:	81ab      	strh	r3, [r5, #12]
   845f6:	4621      	mov	r1, r4
   845f8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   845fc:	2208      	movs	r2, #8
   845fe:	f7fe fdf1 	bl	831e4 <memset>
   84602:	f8df b09c 	ldr.w	fp, [pc, #156]	; 846a0 <__sinit.part.1+0xe0>
   84606:	68be      	ldr	r6, [r7, #8]
   84608:	f8df a098 	ldr.w	sl, [pc, #152]	; 846a4 <__sinit.part.1+0xe4>
   8460c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 846a8 <__sinit.part.1+0xe8>
   84610:	f8df 8098 	ldr.w	r8, [pc, #152]	; 846ac <__sinit.part.1+0xec>
   84614:	2301      	movs	r3, #1
   84616:	2209      	movs	r2, #9
   84618:	f8c5 b020 	str.w	fp, [r5, #32]
   8461c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84620:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84624:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84628:	61ed      	str	r5, [r5, #28]
   8462a:	4621      	mov	r1, r4
   8462c:	81f3      	strh	r3, [r6, #14]
   8462e:	81b2      	strh	r2, [r6, #12]
   84630:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84634:	6034      	str	r4, [r6, #0]
   84636:	6074      	str	r4, [r6, #4]
   84638:	60b4      	str	r4, [r6, #8]
   8463a:	6674      	str	r4, [r6, #100]	; 0x64
   8463c:	6134      	str	r4, [r6, #16]
   8463e:	6174      	str	r4, [r6, #20]
   84640:	61b4      	str	r4, [r6, #24]
   84642:	2208      	movs	r2, #8
   84644:	9301      	str	r3, [sp, #4]
   84646:	f7fe fdcd 	bl	831e4 <memset>
   8464a:	68fd      	ldr	r5, [r7, #12]
   8464c:	2012      	movs	r0, #18
   8464e:	2202      	movs	r2, #2
   84650:	61f6      	str	r6, [r6, #28]
   84652:	f8c6 b020 	str.w	fp, [r6, #32]
   84656:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8465a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8465e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   84662:	4621      	mov	r1, r4
   84664:	81a8      	strh	r0, [r5, #12]
   84666:	81ea      	strh	r2, [r5, #14]
   84668:	602c      	str	r4, [r5, #0]
   8466a:	606c      	str	r4, [r5, #4]
   8466c:	60ac      	str	r4, [r5, #8]
   8466e:	666c      	str	r4, [r5, #100]	; 0x64
   84670:	612c      	str	r4, [r5, #16]
   84672:	616c      	str	r4, [r5, #20]
   84674:	61ac      	str	r4, [r5, #24]
   84676:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8467a:	2208      	movs	r2, #8
   8467c:	f7fe fdb2 	bl	831e4 <memset>
   84680:	9b01      	ldr	r3, [sp, #4]
   84682:	61ed      	str	r5, [r5, #28]
   84684:	f8c5 b020 	str.w	fp, [r5, #32]
   84688:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8468c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84690:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84694:	63bb      	str	r3, [r7, #56]	; 0x38
   84696:	b003      	add	sp, #12
   84698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8469c:	000845b5 	.word	0x000845b5
   846a0:	00085a65 	.word	0x00085a65
   846a4:	00085a89 	.word	0x00085a89
   846a8:	00085ac1 	.word	0x00085ac1
   846ac:	00085ae1 	.word	0x00085ae1

000846b0 <__sinit>:
   846b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   846b2:	b103      	cbz	r3, 846b6 <__sinit+0x6>
   846b4:	4770      	bx	lr
   846b6:	f7ff bf83 	b.w	845c0 <__sinit.part.1>
   846ba:	bf00      	nop

000846bc <__sfp_lock_acquire>:
   846bc:	4770      	bx	lr
   846be:	bf00      	nop

000846c0 <__sfp_lock_release>:
   846c0:	4770      	bx	lr
   846c2:	bf00      	nop

000846c4 <__libc_fini_array>:
   846c4:	b538      	push	{r3, r4, r5, lr}
   846c6:	4b08      	ldr	r3, [pc, #32]	; (846e8 <__libc_fini_array+0x24>)
   846c8:	4d08      	ldr	r5, [pc, #32]	; (846ec <__libc_fini_array+0x28>)
   846ca:	1aed      	subs	r5, r5, r3
   846cc:	10ac      	asrs	r4, r5, #2
   846ce:	bf18      	it	ne
   846d0:	18ed      	addne	r5, r5, r3
   846d2:	d005      	beq.n	846e0 <__libc_fini_array+0x1c>
   846d4:	3c01      	subs	r4, #1
   846d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   846da:	4798      	blx	r3
   846dc:	2c00      	cmp	r4, #0
   846de:	d1f9      	bne.n	846d4 <__libc_fini_array+0x10>
   846e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   846e4:	f001 bf6a 	b.w	865bc <_fini>
   846e8:	000865c8 	.word	0x000865c8
   846ec:	000865cc 	.word	0x000865cc

000846f0 <__fputwc>:
   846f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   846f4:	b082      	sub	sp, #8
   846f6:	4607      	mov	r7, r0
   846f8:	460e      	mov	r6, r1
   846fa:	4614      	mov	r4, r2
   846fc:	f000 fb68 	bl	84dd0 <__locale_mb_cur_max>
   84700:	2801      	cmp	r0, #1
   84702:	d040      	beq.n	84786 <__fputwc+0x96>
   84704:	4638      	mov	r0, r7
   84706:	a901      	add	r1, sp, #4
   84708:	4632      	mov	r2, r6
   8470a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8470e:	f001 fa3f 	bl	85b90 <_wcrtomb_r>
   84712:	f1b0 3fff 	cmp.w	r0, #4294967295
   84716:	4680      	mov	r8, r0
   84718:	d02e      	beq.n	84778 <__fputwc+0x88>
   8471a:	2800      	cmp	r0, #0
   8471c:	d03b      	beq.n	84796 <__fputwc+0xa6>
   8471e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   84722:	2500      	movs	r5, #0
   84724:	e009      	b.n	8473a <__fputwc+0x4a>
   84726:	6823      	ldr	r3, [r4, #0]
   84728:	7019      	strb	r1, [r3, #0]
   8472a:	6823      	ldr	r3, [r4, #0]
   8472c:	3301      	adds	r3, #1
   8472e:	6023      	str	r3, [r4, #0]
   84730:	3501      	adds	r5, #1
   84732:	45a8      	cmp	r8, r5
   84734:	d92f      	bls.n	84796 <__fputwc+0xa6>
   84736:	ab01      	add	r3, sp, #4
   84738:	5d59      	ldrb	r1, [r3, r5]
   8473a:	68a3      	ldr	r3, [r4, #8]
   8473c:	3b01      	subs	r3, #1
   8473e:	2b00      	cmp	r3, #0
   84740:	60a3      	str	r3, [r4, #8]
   84742:	daf0      	bge.n	84726 <__fputwc+0x36>
   84744:	69a2      	ldr	r2, [r4, #24]
   84746:	4293      	cmp	r3, r2
   84748:	db06      	blt.n	84758 <__fputwc+0x68>
   8474a:	6823      	ldr	r3, [r4, #0]
   8474c:	7019      	strb	r1, [r3, #0]
   8474e:	6823      	ldr	r3, [r4, #0]
   84750:	7819      	ldrb	r1, [r3, #0]
   84752:	3301      	adds	r3, #1
   84754:	290a      	cmp	r1, #10
   84756:	d1ea      	bne.n	8472e <__fputwc+0x3e>
   84758:	4638      	mov	r0, r7
   8475a:	4622      	mov	r2, r4
   8475c:	f001 f9c4 	bl	85ae8 <__swbuf_r>
   84760:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   84764:	fab0 f080 	clz	r0, r0
   84768:	0940      	lsrs	r0, r0, #5
   8476a:	2800      	cmp	r0, #0
   8476c:	d0e0      	beq.n	84730 <__fputwc+0x40>
   8476e:	f04f 30ff 	mov.w	r0, #4294967295
   84772:	b002      	add	sp, #8
   84774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84778:	89a3      	ldrh	r3, [r4, #12]
   8477a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8477e:	81a3      	strh	r3, [r4, #12]
   84780:	b002      	add	sp, #8
   84782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84786:	1e73      	subs	r3, r6, #1
   84788:	2bfe      	cmp	r3, #254	; 0xfe
   8478a:	d8bb      	bhi.n	84704 <__fputwc+0x14>
   8478c:	b2f1      	uxtb	r1, r6
   8478e:	4680      	mov	r8, r0
   84790:	f88d 1004 	strb.w	r1, [sp, #4]
   84794:	e7c5      	b.n	84722 <__fputwc+0x32>
   84796:	4630      	mov	r0, r6
   84798:	b002      	add	sp, #8
   8479a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8479e:	bf00      	nop

000847a0 <_fputwc_r>:
   847a0:	8993      	ldrh	r3, [r2, #12]
   847a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   847a6:	d10b      	bne.n	847c0 <_fputwc_r+0x20>
   847a8:	b410      	push	{r4}
   847aa:	6e54      	ldr	r4, [r2, #100]	; 0x64
   847ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   847b0:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   847b4:	6654      	str	r4, [r2, #100]	; 0x64
   847b6:	8193      	strh	r3, [r2, #12]
   847b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   847bc:	f7ff bf98 	b.w	846f0 <__fputwc>
   847c0:	f7ff bf96 	b.w	846f0 <__fputwc>

000847c4 <_malloc_trim_r>:
   847c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   847c6:	460c      	mov	r4, r1
   847c8:	4f22      	ldr	r7, [pc, #136]	; (84854 <_malloc_trim_r+0x90>)
   847ca:	4606      	mov	r6, r0
   847cc:	f000 feb2 	bl	85534 <__malloc_lock>
   847d0:	68bb      	ldr	r3, [r7, #8]
   847d2:	685d      	ldr	r5, [r3, #4]
   847d4:	f025 0503 	bic.w	r5, r5, #3
   847d8:	1b29      	subs	r1, r5, r4
   847da:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   847de:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   847e2:	f021 010f 	bic.w	r1, r1, #15
   847e6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   847ea:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   847ee:	db07      	blt.n	84800 <_malloc_trim_r+0x3c>
   847f0:	4630      	mov	r0, r6
   847f2:	2100      	movs	r1, #0
   847f4:	f001 f924 	bl	85a40 <_sbrk_r>
   847f8:	68bb      	ldr	r3, [r7, #8]
   847fa:	442b      	add	r3, r5
   847fc:	4298      	cmp	r0, r3
   847fe:	d004      	beq.n	8480a <_malloc_trim_r+0x46>
   84800:	4630      	mov	r0, r6
   84802:	f000 fe99 	bl	85538 <__malloc_unlock>
   84806:	2000      	movs	r0, #0
   84808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8480a:	4630      	mov	r0, r6
   8480c:	4261      	negs	r1, r4
   8480e:	f001 f917 	bl	85a40 <_sbrk_r>
   84812:	3001      	adds	r0, #1
   84814:	d00d      	beq.n	84832 <_malloc_trim_r+0x6e>
   84816:	4b10      	ldr	r3, [pc, #64]	; (84858 <_malloc_trim_r+0x94>)
   84818:	68ba      	ldr	r2, [r7, #8]
   8481a:	6819      	ldr	r1, [r3, #0]
   8481c:	1b2d      	subs	r5, r5, r4
   8481e:	f045 0501 	orr.w	r5, r5, #1
   84822:	4630      	mov	r0, r6
   84824:	1b09      	subs	r1, r1, r4
   84826:	6055      	str	r5, [r2, #4]
   84828:	6019      	str	r1, [r3, #0]
   8482a:	f000 fe85 	bl	85538 <__malloc_unlock>
   8482e:	2001      	movs	r0, #1
   84830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84832:	4630      	mov	r0, r6
   84834:	2100      	movs	r1, #0
   84836:	f001 f903 	bl	85a40 <_sbrk_r>
   8483a:	68ba      	ldr	r2, [r7, #8]
   8483c:	1a83      	subs	r3, r0, r2
   8483e:	2b0f      	cmp	r3, #15
   84840:	ddde      	ble.n	84800 <_malloc_trim_r+0x3c>
   84842:	4c06      	ldr	r4, [pc, #24]	; (8485c <_malloc_trim_r+0x98>)
   84844:	4904      	ldr	r1, [pc, #16]	; (84858 <_malloc_trim_r+0x94>)
   84846:	6824      	ldr	r4, [r4, #0]
   84848:	f043 0301 	orr.w	r3, r3, #1
   8484c:	1b00      	subs	r0, r0, r4
   8484e:	6053      	str	r3, [r2, #4]
   84850:	6008      	str	r0, [r1, #0]
   84852:	e7d5      	b.n	84800 <_malloc_trim_r+0x3c>
   84854:	200705f4 	.word	0x200705f4
   84858:	20078de8 	.word	0x20078de8
   8485c:	20070a00 	.word	0x20070a00

00084860 <_free_r>:
   84860:	2900      	cmp	r1, #0
   84862:	d04e      	beq.n	84902 <_free_r+0xa2>
   84864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84868:	460c      	mov	r4, r1
   8486a:	4680      	mov	r8, r0
   8486c:	f000 fe62 	bl	85534 <__malloc_lock>
   84870:	f854 7c04 	ldr.w	r7, [r4, #-4]
   84874:	4962      	ldr	r1, [pc, #392]	; (84a00 <_free_r+0x1a0>)
   84876:	f1a4 0508 	sub.w	r5, r4, #8
   8487a:	f027 0201 	bic.w	r2, r7, #1
   8487e:	18ab      	adds	r3, r5, r2
   84880:	688e      	ldr	r6, [r1, #8]
   84882:	6858      	ldr	r0, [r3, #4]
   84884:	429e      	cmp	r6, r3
   84886:	f020 0003 	bic.w	r0, r0, #3
   8488a:	d05a      	beq.n	84942 <_free_r+0xe2>
   8488c:	07fe      	lsls	r6, r7, #31
   8488e:	6058      	str	r0, [r3, #4]
   84890:	d40b      	bmi.n	848aa <_free_r+0x4a>
   84892:	f854 7c08 	ldr.w	r7, [r4, #-8]
   84896:	f101 0e08 	add.w	lr, r1, #8
   8489a:	1bed      	subs	r5, r5, r7
   8489c:	68ac      	ldr	r4, [r5, #8]
   8489e:	443a      	add	r2, r7
   848a0:	4574      	cmp	r4, lr
   848a2:	d067      	beq.n	84974 <_free_r+0x114>
   848a4:	68ef      	ldr	r7, [r5, #12]
   848a6:	60e7      	str	r7, [r4, #12]
   848a8:	60bc      	str	r4, [r7, #8]
   848aa:	181c      	adds	r4, r3, r0
   848ac:	6864      	ldr	r4, [r4, #4]
   848ae:	07e4      	lsls	r4, r4, #31
   848b0:	d40c      	bmi.n	848cc <_free_r+0x6c>
   848b2:	4f54      	ldr	r7, [pc, #336]	; (84a04 <_free_r+0x1a4>)
   848b4:	689c      	ldr	r4, [r3, #8]
   848b6:	4402      	add	r2, r0
   848b8:	42bc      	cmp	r4, r7
   848ba:	d07c      	beq.n	849b6 <_free_r+0x156>
   848bc:	68d8      	ldr	r0, [r3, #12]
   848be:	f042 0301 	orr.w	r3, r2, #1
   848c2:	60e0      	str	r0, [r4, #12]
   848c4:	6084      	str	r4, [r0, #8]
   848c6:	606b      	str	r3, [r5, #4]
   848c8:	50aa      	str	r2, [r5, r2]
   848ca:	e003      	b.n	848d4 <_free_r+0x74>
   848cc:	f042 0301 	orr.w	r3, r2, #1
   848d0:	606b      	str	r3, [r5, #4]
   848d2:	50aa      	str	r2, [r5, r2]
   848d4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   848d8:	d214      	bcs.n	84904 <_free_r+0xa4>
   848da:	08d2      	lsrs	r2, r2, #3
   848dc:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   848e0:	2401      	movs	r4, #1
   848e2:	6848      	ldr	r0, [r1, #4]
   848e4:	1092      	asrs	r2, r2, #2
   848e6:	fa04 f202 	lsl.w	r2, r4, r2
   848ea:	689c      	ldr	r4, [r3, #8]
   848ec:	4310      	orrs	r0, r2
   848ee:	60ac      	str	r4, [r5, #8]
   848f0:	60eb      	str	r3, [r5, #12]
   848f2:	6048      	str	r0, [r1, #4]
   848f4:	609d      	str	r5, [r3, #8]
   848f6:	60e5      	str	r5, [r4, #12]
   848f8:	4640      	mov	r0, r8
   848fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   848fe:	f000 be1b 	b.w	85538 <__malloc_unlock>
   84902:	4770      	bx	lr
   84904:	0a53      	lsrs	r3, r2, #9
   84906:	2b04      	cmp	r3, #4
   84908:	d847      	bhi.n	8499a <_free_r+0x13a>
   8490a:	0993      	lsrs	r3, r2, #6
   8490c:	f103 0438 	add.w	r4, r3, #56	; 0x38
   84910:	0060      	lsls	r0, r4, #1
   84912:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   84916:	6883      	ldr	r3, [r0, #8]
   84918:	4939      	ldr	r1, [pc, #228]	; (84a00 <_free_r+0x1a0>)
   8491a:	4283      	cmp	r3, r0
   8491c:	d043      	beq.n	849a6 <_free_r+0x146>
   8491e:	6859      	ldr	r1, [r3, #4]
   84920:	f021 0103 	bic.w	r1, r1, #3
   84924:	4291      	cmp	r1, r2
   84926:	d902      	bls.n	8492e <_free_r+0xce>
   84928:	689b      	ldr	r3, [r3, #8]
   8492a:	4298      	cmp	r0, r3
   8492c:	d1f7      	bne.n	8491e <_free_r+0xbe>
   8492e:	68da      	ldr	r2, [r3, #12]
   84930:	60ea      	str	r2, [r5, #12]
   84932:	60ab      	str	r3, [r5, #8]
   84934:	4640      	mov	r0, r8
   84936:	6095      	str	r5, [r2, #8]
   84938:	60dd      	str	r5, [r3, #12]
   8493a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8493e:	f000 bdfb 	b.w	85538 <__malloc_unlock>
   84942:	07ff      	lsls	r7, r7, #31
   84944:	4402      	add	r2, r0
   84946:	d407      	bmi.n	84958 <_free_r+0xf8>
   84948:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8494c:	1b2d      	subs	r5, r5, r4
   8494e:	68eb      	ldr	r3, [r5, #12]
   84950:	68a8      	ldr	r0, [r5, #8]
   84952:	4422      	add	r2, r4
   84954:	60c3      	str	r3, [r0, #12]
   84956:	6098      	str	r0, [r3, #8]
   84958:	4b2b      	ldr	r3, [pc, #172]	; (84a08 <_free_r+0x1a8>)
   8495a:	f042 0001 	orr.w	r0, r2, #1
   8495e:	681b      	ldr	r3, [r3, #0]
   84960:	6068      	str	r0, [r5, #4]
   84962:	429a      	cmp	r2, r3
   84964:	608d      	str	r5, [r1, #8]
   84966:	d3c7      	bcc.n	848f8 <_free_r+0x98>
   84968:	4b28      	ldr	r3, [pc, #160]	; (84a0c <_free_r+0x1ac>)
   8496a:	4640      	mov	r0, r8
   8496c:	6819      	ldr	r1, [r3, #0]
   8496e:	f7ff ff29 	bl	847c4 <_malloc_trim_r>
   84972:	e7c1      	b.n	848f8 <_free_r+0x98>
   84974:	1819      	adds	r1, r3, r0
   84976:	6849      	ldr	r1, [r1, #4]
   84978:	07c9      	lsls	r1, r1, #31
   8497a:	d409      	bmi.n	84990 <_free_r+0x130>
   8497c:	68d9      	ldr	r1, [r3, #12]
   8497e:	4402      	add	r2, r0
   84980:	689b      	ldr	r3, [r3, #8]
   84982:	f042 0001 	orr.w	r0, r2, #1
   84986:	60d9      	str	r1, [r3, #12]
   84988:	608b      	str	r3, [r1, #8]
   8498a:	6068      	str	r0, [r5, #4]
   8498c:	50aa      	str	r2, [r5, r2]
   8498e:	e7b3      	b.n	848f8 <_free_r+0x98>
   84990:	f042 0301 	orr.w	r3, r2, #1
   84994:	606b      	str	r3, [r5, #4]
   84996:	50aa      	str	r2, [r5, r2]
   84998:	e7ae      	b.n	848f8 <_free_r+0x98>
   8499a:	2b14      	cmp	r3, #20
   8499c:	d814      	bhi.n	849c8 <_free_r+0x168>
   8499e:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   849a2:	0060      	lsls	r0, r4, #1
   849a4:	e7b5      	b.n	84912 <_free_r+0xb2>
   849a6:	684a      	ldr	r2, [r1, #4]
   849a8:	10a4      	asrs	r4, r4, #2
   849aa:	2001      	movs	r0, #1
   849ac:	40a0      	lsls	r0, r4
   849ae:	4302      	orrs	r2, r0
   849b0:	604a      	str	r2, [r1, #4]
   849b2:	461a      	mov	r2, r3
   849b4:	e7bc      	b.n	84930 <_free_r+0xd0>
   849b6:	f042 0301 	orr.w	r3, r2, #1
   849ba:	614d      	str	r5, [r1, #20]
   849bc:	610d      	str	r5, [r1, #16]
   849be:	60ec      	str	r4, [r5, #12]
   849c0:	60ac      	str	r4, [r5, #8]
   849c2:	606b      	str	r3, [r5, #4]
   849c4:	50aa      	str	r2, [r5, r2]
   849c6:	e797      	b.n	848f8 <_free_r+0x98>
   849c8:	2b54      	cmp	r3, #84	; 0x54
   849ca:	d804      	bhi.n	849d6 <_free_r+0x176>
   849cc:	0b13      	lsrs	r3, r2, #12
   849ce:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   849d2:	0060      	lsls	r0, r4, #1
   849d4:	e79d      	b.n	84912 <_free_r+0xb2>
   849d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   849da:	d804      	bhi.n	849e6 <_free_r+0x186>
   849dc:	0bd3      	lsrs	r3, r2, #15
   849de:	f103 0477 	add.w	r4, r3, #119	; 0x77
   849e2:	0060      	lsls	r0, r4, #1
   849e4:	e795      	b.n	84912 <_free_r+0xb2>
   849e6:	f240 5054 	movw	r0, #1364	; 0x554
   849ea:	4283      	cmp	r3, r0
   849ec:	d804      	bhi.n	849f8 <_free_r+0x198>
   849ee:	0c93      	lsrs	r3, r2, #18
   849f0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   849f4:	0060      	lsls	r0, r4, #1
   849f6:	e78c      	b.n	84912 <_free_r+0xb2>
   849f8:	20fc      	movs	r0, #252	; 0xfc
   849fa:	247e      	movs	r4, #126	; 0x7e
   849fc:	e789      	b.n	84912 <_free_r+0xb2>
   849fe:	bf00      	nop
   84a00:	200705f4 	.word	0x200705f4
   84a04:	200705fc 	.word	0x200705fc
   84a08:	200709fc 	.word	0x200709fc
   84a0c:	20078de4 	.word	0x20078de4

00084a10 <__sfvwrite_r>:
   84a10:	6893      	ldr	r3, [r2, #8]
   84a12:	2b00      	cmp	r3, #0
   84a14:	f000 80b1 	beq.w	84b7a <__sfvwrite_r+0x16a>
   84a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a1c:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   84a20:	b083      	sub	sp, #12
   84a22:	f01e 0f08 	tst.w	lr, #8
   84a26:	460c      	mov	r4, r1
   84a28:	4681      	mov	r9, r0
   84a2a:	4616      	mov	r6, r2
   84a2c:	d028      	beq.n	84a80 <__sfvwrite_r+0x70>
   84a2e:	690b      	ldr	r3, [r1, #16]
   84a30:	b333      	cbz	r3, 84a80 <__sfvwrite_r+0x70>
   84a32:	f00e 0802 	and.w	r8, lr, #2
   84a36:	fa1f f088 	uxth.w	r0, r8
   84a3a:	6835      	ldr	r5, [r6, #0]
   84a3c:	b380      	cbz	r0, 84aa0 <__sfvwrite_r+0x90>
   84a3e:	f04f 0b00 	mov.w	fp, #0
   84a42:	46d8      	mov	r8, fp
   84a44:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 84d2c <__sfvwrite_r+0x31c>
   84a48:	f1b8 0f00 	cmp.w	r8, #0
   84a4c:	f000 808f 	beq.w	84b6e <__sfvwrite_r+0x15e>
   84a50:	45d0      	cmp	r8, sl
   84a52:	4643      	mov	r3, r8
   84a54:	4648      	mov	r0, r9
   84a56:	bf28      	it	cs
   84a58:	4653      	movcs	r3, sl
   84a5a:	69e1      	ldr	r1, [r4, #28]
   84a5c:	465a      	mov	r2, fp
   84a5e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84a60:	47b8      	blx	r7
   84a62:	2800      	cmp	r0, #0
   84a64:	f340 80a8 	ble.w	84bb8 <__sfvwrite_r+0x1a8>
   84a68:	68b3      	ldr	r3, [r6, #8]
   84a6a:	4483      	add	fp, r0
   84a6c:	1a1b      	subs	r3, r3, r0
   84a6e:	ebc0 0808 	rsb	r8, r0, r8
   84a72:	60b3      	str	r3, [r6, #8]
   84a74:	2b00      	cmp	r3, #0
   84a76:	d1e7      	bne.n	84a48 <__sfvwrite_r+0x38>
   84a78:	2000      	movs	r0, #0
   84a7a:	b003      	add	sp, #12
   84a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84a80:	4648      	mov	r0, r9
   84a82:	4621      	mov	r1, r4
   84a84:	f7ff fc58 	bl	84338 <__swsetup_r>
   84a88:	2800      	cmp	r0, #0
   84a8a:	f040 8146 	bne.w	84d1a <__sfvwrite_r+0x30a>
   84a8e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   84a92:	6835      	ldr	r5, [r6, #0]
   84a94:	f00e 0802 	and.w	r8, lr, #2
   84a98:	fa1f f088 	uxth.w	r0, r8
   84a9c:	2800      	cmp	r0, #0
   84a9e:	d1ce      	bne.n	84a3e <__sfvwrite_r+0x2e>
   84aa0:	f01e 0b01 	ands.w	fp, lr, #1
   84aa4:	f040 8091 	bne.w	84bca <__sfvwrite_r+0x1ba>
   84aa8:	46d8      	mov	r8, fp
   84aaa:	f1b8 0f00 	cmp.w	r8, #0
   84aae:	d058      	beq.n	84b62 <__sfvwrite_r+0x152>
   84ab0:	f41e 7f00 	tst.w	lr, #512	; 0x200
   84ab4:	68a7      	ldr	r7, [r4, #8]
   84ab6:	d062      	beq.n	84b7e <__sfvwrite_r+0x16e>
   84ab8:	45b8      	cmp	r8, r7
   84aba:	46ba      	mov	sl, r7
   84abc:	f0c0 80c2 	bcc.w	84c44 <__sfvwrite_r+0x234>
   84ac0:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   84ac4:	f000 80c0 	beq.w	84c48 <__sfvwrite_r+0x238>
   84ac8:	6967      	ldr	r7, [r4, #20]
   84aca:	6921      	ldr	r1, [r4, #16]
   84acc:	6823      	ldr	r3, [r4, #0]
   84ace:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   84ad2:	1a5b      	subs	r3, r3, r1
   84ad4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   84ad8:	1c58      	adds	r0, r3, #1
   84ada:	107f      	asrs	r7, r7, #1
   84adc:	4440      	add	r0, r8
   84ade:	4287      	cmp	r7, r0
   84ae0:	463a      	mov	r2, r7
   84ae2:	bf3c      	itt	cc
   84ae4:	4607      	movcc	r7, r0
   84ae6:	463a      	movcc	r2, r7
   84ae8:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   84aec:	9300      	str	r3, [sp, #0]
   84aee:	f000 80fb 	beq.w	84ce8 <__sfvwrite_r+0x2d8>
   84af2:	4611      	mov	r1, r2
   84af4:	4648      	mov	r0, r9
   84af6:	f000 f9e9 	bl	84ecc <_malloc_r>
   84afa:	9b00      	ldr	r3, [sp, #0]
   84afc:	4682      	mov	sl, r0
   84afe:	2800      	cmp	r0, #0
   84b00:	f000 810e 	beq.w	84d20 <__sfvwrite_r+0x310>
   84b04:	461a      	mov	r2, r3
   84b06:	6921      	ldr	r1, [r4, #16]
   84b08:	9300      	str	r3, [sp, #0]
   84b0a:	f7fe faf5 	bl	830f8 <memcpy>
   84b0e:	89a2      	ldrh	r2, [r4, #12]
   84b10:	9b00      	ldr	r3, [sp, #0]
   84b12:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   84b16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84b1a:	81a2      	strh	r2, [r4, #12]
   84b1c:	eb0a 0003 	add.w	r0, sl, r3
   84b20:	f8c4 a010 	str.w	sl, [r4, #16]
   84b24:	1afb      	subs	r3, r7, r3
   84b26:	6167      	str	r7, [r4, #20]
   84b28:	46c2      	mov	sl, r8
   84b2a:	4647      	mov	r7, r8
   84b2c:	6020      	str	r0, [r4, #0]
   84b2e:	60a3      	str	r3, [r4, #8]
   84b30:	4652      	mov	r2, sl
   84b32:	4659      	mov	r1, fp
   84b34:	f000 fc9a 	bl	8546c <memmove>
   84b38:	68a0      	ldr	r0, [r4, #8]
   84b3a:	6822      	ldr	r2, [r4, #0]
   84b3c:	1bc0      	subs	r0, r0, r7
   84b3e:	60a0      	str	r0, [r4, #8]
   84b40:	4640      	mov	r0, r8
   84b42:	eb02 030a 	add.w	r3, r2, sl
   84b46:	6023      	str	r3, [r4, #0]
   84b48:	68b3      	ldr	r3, [r6, #8]
   84b4a:	4483      	add	fp, r0
   84b4c:	1a1b      	subs	r3, r3, r0
   84b4e:	ebc0 0808 	rsb	r8, r0, r8
   84b52:	60b3      	str	r3, [r6, #8]
   84b54:	2b00      	cmp	r3, #0
   84b56:	d08f      	beq.n	84a78 <__sfvwrite_r+0x68>
   84b58:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   84b5c:	f1b8 0f00 	cmp.w	r8, #0
   84b60:	d1a6      	bne.n	84ab0 <__sfvwrite_r+0xa0>
   84b62:	f8d5 b000 	ldr.w	fp, [r5]
   84b66:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84b6a:	3508      	adds	r5, #8
   84b6c:	e79d      	b.n	84aaa <__sfvwrite_r+0x9a>
   84b6e:	f8d5 b000 	ldr.w	fp, [r5]
   84b72:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84b76:	3508      	adds	r5, #8
   84b78:	e766      	b.n	84a48 <__sfvwrite_r+0x38>
   84b7a:	2000      	movs	r0, #0
   84b7c:	4770      	bx	lr
   84b7e:	6820      	ldr	r0, [r4, #0]
   84b80:	6923      	ldr	r3, [r4, #16]
   84b82:	4298      	cmp	r0, r3
   84b84:	d803      	bhi.n	84b8e <__sfvwrite_r+0x17e>
   84b86:	6962      	ldr	r2, [r4, #20]
   84b88:	4590      	cmp	r8, r2
   84b8a:	f080 8085 	bcs.w	84c98 <__sfvwrite_r+0x288>
   84b8e:	4547      	cmp	r7, r8
   84b90:	bf28      	it	cs
   84b92:	4647      	movcs	r7, r8
   84b94:	4659      	mov	r1, fp
   84b96:	463a      	mov	r2, r7
   84b98:	f000 fc68 	bl	8546c <memmove>
   84b9c:	68a3      	ldr	r3, [r4, #8]
   84b9e:	6822      	ldr	r2, [r4, #0]
   84ba0:	1bdb      	subs	r3, r3, r7
   84ba2:	443a      	add	r2, r7
   84ba4:	60a3      	str	r3, [r4, #8]
   84ba6:	6022      	str	r2, [r4, #0]
   84ba8:	2b00      	cmp	r3, #0
   84baa:	d149      	bne.n	84c40 <__sfvwrite_r+0x230>
   84bac:	4648      	mov	r0, r9
   84bae:	4621      	mov	r1, r4
   84bb0:	f7ff fcd8 	bl	84564 <_fflush_r>
   84bb4:	2800      	cmp	r0, #0
   84bb6:	d043      	beq.n	84c40 <__sfvwrite_r+0x230>
   84bb8:	89a3      	ldrh	r3, [r4, #12]
   84bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84bbe:	f04f 30ff 	mov.w	r0, #4294967295
   84bc2:	81a3      	strh	r3, [r4, #12]
   84bc4:	b003      	add	sp, #12
   84bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84bca:	4680      	mov	r8, r0
   84bcc:	4683      	mov	fp, r0
   84bce:	4682      	mov	sl, r0
   84bd0:	9000      	str	r0, [sp, #0]
   84bd2:	f1ba 0f00 	cmp.w	sl, #0
   84bd6:	d02b      	beq.n	84c30 <__sfvwrite_r+0x220>
   84bd8:	9b00      	ldr	r3, [sp, #0]
   84bda:	2b00      	cmp	r3, #0
   84bdc:	d04f      	beq.n	84c7e <__sfvwrite_r+0x26e>
   84bde:	45d0      	cmp	r8, sl
   84be0:	4643      	mov	r3, r8
   84be2:	bf28      	it	cs
   84be4:	4653      	movcs	r3, sl
   84be6:	6820      	ldr	r0, [r4, #0]
   84be8:	6921      	ldr	r1, [r4, #16]
   84bea:	461f      	mov	r7, r3
   84bec:	4288      	cmp	r0, r1
   84bee:	f8d4 e008 	ldr.w	lr, [r4, #8]
   84bf2:	6962      	ldr	r2, [r4, #20]
   84bf4:	d903      	bls.n	84bfe <__sfvwrite_r+0x1ee>
   84bf6:	eb0e 0c02 	add.w	ip, lr, r2
   84bfa:	4563      	cmp	r3, ip
   84bfc:	dc5e      	bgt.n	84cbc <__sfvwrite_r+0x2ac>
   84bfe:	4293      	cmp	r3, r2
   84c00:	db24      	blt.n	84c4c <__sfvwrite_r+0x23c>
   84c02:	4613      	mov	r3, r2
   84c04:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84c06:	4648      	mov	r0, r9
   84c08:	69e1      	ldr	r1, [r4, #28]
   84c0a:	465a      	mov	r2, fp
   84c0c:	47b8      	blx	r7
   84c0e:	1e07      	subs	r7, r0, #0
   84c10:	ddd2      	ble.n	84bb8 <__sfvwrite_r+0x1a8>
   84c12:	ebb8 0807 	subs.w	r8, r8, r7
   84c16:	d029      	beq.n	84c6c <__sfvwrite_r+0x25c>
   84c18:	68b3      	ldr	r3, [r6, #8]
   84c1a:	44bb      	add	fp, r7
   84c1c:	1bdb      	subs	r3, r3, r7
   84c1e:	ebc7 0a0a 	rsb	sl, r7, sl
   84c22:	60b3      	str	r3, [r6, #8]
   84c24:	2b00      	cmp	r3, #0
   84c26:	f43f af27 	beq.w	84a78 <__sfvwrite_r+0x68>
   84c2a:	f1ba 0f00 	cmp.w	sl, #0
   84c2e:	d1d3      	bne.n	84bd8 <__sfvwrite_r+0x1c8>
   84c30:	2300      	movs	r3, #0
   84c32:	f8d5 b000 	ldr.w	fp, [r5]
   84c36:	f8d5 a004 	ldr.w	sl, [r5, #4]
   84c3a:	9300      	str	r3, [sp, #0]
   84c3c:	3508      	adds	r5, #8
   84c3e:	e7c8      	b.n	84bd2 <__sfvwrite_r+0x1c2>
   84c40:	4638      	mov	r0, r7
   84c42:	e781      	b.n	84b48 <__sfvwrite_r+0x138>
   84c44:	4647      	mov	r7, r8
   84c46:	46c2      	mov	sl, r8
   84c48:	6820      	ldr	r0, [r4, #0]
   84c4a:	e771      	b.n	84b30 <__sfvwrite_r+0x120>
   84c4c:	461a      	mov	r2, r3
   84c4e:	4659      	mov	r1, fp
   84c50:	9301      	str	r3, [sp, #4]
   84c52:	f000 fc0b 	bl	8546c <memmove>
   84c56:	68a2      	ldr	r2, [r4, #8]
   84c58:	6821      	ldr	r1, [r4, #0]
   84c5a:	9b01      	ldr	r3, [sp, #4]
   84c5c:	ebb8 0807 	subs.w	r8, r8, r7
   84c60:	eba2 0203 	sub.w	r2, r2, r3
   84c64:	440b      	add	r3, r1
   84c66:	60a2      	str	r2, [r4, #8]
   84c68:	6023      	str	r3, [r4, #0]
   84c6a:	d1d5      	bne.n	84c18 <__sfvwrite_r+0x208>
   84c6c:	4648      	mov	r0, r9
   84c6e:	4621      	mov	r1, r4
   84c70:	f7ff fc78 	bl	84564 <_fflush_r>
   84c74:	2800      	cmp	r0, #0
   84c76:	d19f      	bne.n	84bb8 <__sfvwrite_r+0x1a8>
   84c78:	f8cd 8000 	str.w	r8, [sp]
   84c7c:	e7cc      	b.n	84c18 <__sfvwrite_r+0x208>
   84c7e:	4658      	mov	r0, fp
   84c80:	210a      	movs	r1, #10
   84c82:	4652      	mov	r2, sl
   84c84:	f000 fba8 	bl	853d8 <memchr>
   84c88:	2800      	cmp	r0, #0
   84c8a:	d041      	beq.n	84d10 <__sfvwrite_r+0x300>
   84c8c:	3001      	adds	r0, #1
   84c8e:	2301      	movs	r3, #1
   84c90:	ebcb 0800 	rsb	r8, fp, r0
   84c94:	9300      	str	r3, [sp, #0]
   84c96:	e7a2      	b.n	84bde <__sfvwrite_r+0x1ce>
   84c98:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   84c9c:	4543      	cmp	r3, r8
   84c9e:	bf28      	it	cs
   84ca0:	4643      	movcs	r3, r8
   84ca2:	fb93 f3f2 	sdiv	r3, r3, r2
   84ca6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84ca8:	fb03 f302 	mul.w	r3, r3, r2
   84cac:	4648      	mov	r0, r9
   84cae:	69e1      	ldr	r1, [r4, #28]
   84cb0:	465a      	mov	r2, fp
   84cb2:	47b8      	blx	r7
   84cb4:	2800      	cmp	r0, #0
   84cb6:	f73f af47 	bgt.w	84b48 <__sfvwrite_r+0x138>
   84cba:	e77d      	b.n	84bb8 <__sfvwrite_r+0x1a8>
   84cbc:	4662      	mov	r2, ip
   84cbe:	4659      	mov	r1, fp
   84cc0:	f8cd c004 	str.w	ip, [sp, #4]
   84cc4:	f000 fbd2 	bl	8546c <memmove>
   84cc8:	6823      	ldr	r3, [r4, #0]
   84cca:	f8dd c004 	ldr.w	ip, [sp, #4]
   84cce:	4648      	mov	r0, r9
   84cd0:	4463      	add	r3, ip
   84cd2:	6023      	str	r3, [r4, #0]
   84cd4:	4621      	mov	r1, r4
   84cd6:	f7ff fc45 	bl	84564 <_fflush_r>
   84cda:	f8dd c004 	ldr.w	ip, [sp, #4]
   84cde:	2800      	cmp	r0, #0
   84ce0:	f47f af6a 	bne.w	84bb8 <__sfvwrite_r+0x1a8>
   84ce4:	4667      	mov	r7, ip
   84ce6:	e794      	b.n	84c12 <__sfvwrite_r+0x202>
   84ce8:	4648      	mov	r0, r9
   84cea:	f000 fc27 	bl	8553c <_realloc_r>
   84cee:	9b00      	ldr	r3, [sp, #0]
   84cf0:	4682      	mov	sl, r0
   84cf2:	2800      	cmp	r0, #0
   84cf4:	f47f af12 	bne.w	84b1c <__sfvwrite_r+0x10c>
   84cf8:	4648      	mov	r0, r9
   84cfa:	6921      	ldr	r1, [r4, #16]
   84cfc:	f7ff fdb0 	bl	84860 <_free_r>
   84d00:	89a3      	ldrh	r3, [r4, #12]
   84d02:	220c      	movs	r2, #12
   84d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84d08:	b29b      	uxth	r3, r3
   84d0a:	f8c9 2000 	str.w	r2, [r9]
   84d0e:	e754      	b.n	84bba <__sfvwrite_r+0x1aa>
   84d10:	2301      	movs	r3, #1
   84d12:	f10a 0801 	add.w	r8, sl, #1
   84d16:	9300      	str	r3, [sp, #0]
   84d18:	e761      	b.n	84bde <__sfvwrite_r+0x1ce>
   84d1a:	f04f 30ff 	mov.w	r0, #4294967295
   84d1e:	e6ac      	b.n	84a7a <__sfvwrite_r+0x6a>
   84d20:	230c      	movs	r3, #12
   84d22:	f8c9 3000 	str.w	r3, [r9]
   84d26:	89a3      	ldrh	r3, [r4, #12]
   84d28:	e747      	b.n	84bba <__sfvwrite_r+0x1aa>
   84d2a:	bf00      	nop
   84d2c:	7ffffc00 	.word	0x7ffffc00

00084d30 <_fwalk>:
   84d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d34:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   84d38:	d01a      	beq.n	84d70 <_fwalk+0x40>
   84d3a:	4688      	mov	r8, r1
   84d3c:	2600      	movs	r6, #0
   84d3e:	687d      	ldr	r5, [r7, #4]
   84d40:	68bc      	ldr	r4, [r7, #8]
   84d42:	3d01      	subs	r5, #1
   84d44:	d40e      	bmi.n	84d64 <_fwalk+0x34>
   84d46:	89a3      	ldrh	r3, [r4, #12]
   84d48:	3d01      	subs	r5, #1
   84d4a:	2b01      	cmp	r3, #1
   84d4c:	d906      	bls.n	84d5c <_fwalk+0x2c>
   84d4e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   84d52:	3301      	adds	r3, #1
   84d54:	d002      	beq.n	84d5c <_fwalk+0x2c>
   84d56:	4620      	mov	r0, r4
   84d58:	47c0      	blx	r8
   84d5a:	4306      	orrs	r6, r0
   84d5c:	1c6b      	adds	r3, r5, #1
   84d5e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   84d62:	d1f0      	bne.n	84d46 <_fwalk+0x16>
   84d64:	683f      	ldr	r7, [r7, #0]
   84d66:	2f00      	cmp	r7, #0
   84d68:	d1e9      	bne.n	84d3e <_fwalk+0xe>
   84d6a:	4630      	mov	r0, r6
   84d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d70:	463e      	mov	r6, r7
   84d72:	4630      	mov	r0, r6
   84d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084d78 <_fwalk_reent>:
   84d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84d7c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   84d80:	d01e      	beq.n	84dc0 <_fwalk_reent+0x48>
   84d82:	4688      	mov	r8, r1
   84d84:	4607      	mov	r7, r0
   84d86:	f04f 0900 	mov.w	r9, #0
   84d8a:	6875      	ldr	r5, [r6, #4]
   84d8c:	68b4      	ldr	r4, [r6, #8]
   84d8e:	3d01      	subs	r5, #1
   84d90:	d410      	bmi.n	84db4 <_fwalk_reent+0x3c>
   84d92:	89a3      	ldrh	r3, [r4, #12]
   84d94:	3d01      	subs	r5, #1
   84d96:	2b01      	cmp	r3, #1
   84d98:	d908      	bls.n	84dac <_fwalk_reent+0x34>
   84d9a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   84d9e:	3301      	adds	r3, #1
   84da0:	d004      	beq.n	84dac <_fwalk_reent+0x34>
   84da2:	4638      	mov	r0, r7
   84da4:	4621      	mov	r1, r4
   84da6:	47c0      	blx	r8
   84da8:	ea49 0900 	orr.w	r9, r9, r0
   84dac:	1c6b      	adds	r3, r5, #1
   84dae:	f104 0468 	add.w	r4, r4, #104	; 0x68
   84db2:	d1ee      	bne.n	84d92 <_fwalk_reent+0x1a>
   84db4:	6836      	ldr	r6, [r6, #0]
   84db6:	2e00      	cmp	r6, #0
   84db8:	d1e7      	bne.n	84d8a <_fwalk_reent+0x12>
   84dba:	4648      	mov	r0, r9
   84dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84dc0:	46b1      	mov	r9, r6
   84dc2:	4648      	mov	r0, r9
   84dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00084dc8 <__locale_charset>:
   84dc8:	4800      	ldr	r0, [pc, #0]	; (84dcc <__locale_charset+0x4>)
   84dca:	4770      	bx	lr
   84dcc:	200705d0 	.word	0x200705d0

00084dd0 <__locale_mb_cur_max>:
   84dd0:	4b01      	ldr	r3, [pc, #4]	; (84dd8 <__locale_mb_cur_max+0x8>)
   84dd2:	6818      	ldr	r0, [r3, #0]
   84dd4:	4770      	bx	lr
   84dd6:	bf00      	nop
   84dd8:	200705f0 	.word	0x200705f0

00084ddc <__smakebuf_r>:
   84ddc:	898b      	ldrh	r3, [r1, #12]
   84dde:	b29a      	uxth	r2, r3
   84de0:	f012 0f02 	tst.w	r2, #2
   84de4:	d13c      	bne.n	84e60 <__smakebuf_r+0x84>
   84de6:	b5f0      	push	{r4, r5, r6, r7, lr}
   84de8:	460c      	mov	r4, r1
   84dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84dee:	b091      	sub	sp, #68	; 0x44
   84df0:	2900      	cmp	r1, #0
   84df2:	4605      	mov	r5, r0
   84df4:	db19      	blt.n	84e2a <__smakebuf_r+0x4e>
   84df6:	aa01      	add	r2, sp, #4
   84df8:	f000 ffbc 	bl	85d74 <_fstat_r>
   84dfc:	2800      	cmp	r0, #0
   84dfe:	db12      	blt.n	84e26 <__smakebuf_r+0x4a>
   84e00:	9b02      	ldr	r3, [sp, #8]
   84e02:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   84e06:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   84e0a:	fab7 f787 	clz	r7, r7
   84e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84e12:	ea4f 1757 	mov.w	r7, r7, lsr #5
   84e16:	d02a      	beq.n	84e6e <__smakebuf_r+0x92>
   84e18:	89a3      	ldrh	r3, [r4, #12]
   84e1a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84e1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84e22:	81a3      	strh	r3, [r4, #12]
   84e24:	e00b      	b.n	84e3e <__smakebuf_r+0x62>
   84e26:	89a3      	ldrh	r3, [r4, #12]
   84e28:	b29a      	uxth	r2, r3
   84e2a:	f012 0f80 	tst.w	r2, #128	; 0x80
   84e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84e32:	81a3      	strh	r3, [r4, #12]
   84e34:	bf0c      	ite	eq
   84e36:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   84e3a:	2640      	movne	r6, #64	; 0x40
   84e3c:	2700      	movs	r7, #0
   84e3e:	4628      	mov	r0, r5
   84e40:	4631      	mov	r1, r6
   84e42:	f000 f843 	bl	84ecc <_malloc_r>
   84e46:	89a3      	ldrh	r3, [r4, #12]
   84e48:	b340      	cbz	r0, 84e9c <__smakebuf_r+0xc0>
   84e4a:	4a1a      	ldr	r2, [pc, #104]	; (84eb4 <__smakebuf_r+0xd8>)
   84e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84e50:	63ea      	str	r2, [r5, #60]	; 0x3c
   84e52:	81a3      	strh	r3, [r4, #12]
   84e54:	6020      	str	r0, [r4, #0]
   84e56:	6120      	str	r0, [r4, #16]
   84e58:	6166      	str	r6, [r4, #20]
   84e5a:	b99f      	cbnz	r7, 84e84 <__smakebuf_r+0xa8>
   84e5c:	b011      	add	sp, #68	; 0x44
   84e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84e60:	f101 0343 	add.w	r3, r1, #67	; 0x43
   84e64:	2201      	movs	r2, #1
   84e66:	600b      	str	r3, [r1, #0]
   84e68:	610b      	str	r3, [r1, #16]
   84e6a:	614a      	str	r2, [r1, #20]
   84e6c:	4770      	bx	lr
   84e6e:	4b12      	ldr	r3, [pc, #72]	; (84eb8 <__smakebuf_r+0xdc>)
   84e70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   84e72:	429a      	cmp	r2, r3
   84e74:	d1d0      	bne.n	84e18 <__smakebuf_r+0x3c>
   84e76:	89a3      	ldrh	r3, [r4, #12]
   84e78:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84e7c:	4333      	orrs	r3, r6
   84e7e:	81a3      	strh	r3, [r4, #12]
   84e80:	64e6      	str	r6, [r4, #76]	; 0x4c
   84e82:	e7dc      	b.n	84e3e <__smakebuf_r+0x62>
   84e84:	4628      	mov	r0, r5
   84e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84e8a:	f000 ff87 	bl	85d9c <_isatty_r>
   84e8e:	2800      	cmp	r0, #0
   84e90:	d0e4      	beq.n	84e5c <__smakebuf_r+0x80>
   84e92:	89a3      	ldrh	r3, [r4, #12]
   84e94:	f043 0301 	orr.w	r3, r3, #1
   84e98:	81a3      	strh	r3, [r4, #12]
   84e9a:	e7df      	b.n	84e5c <__smakebuf_r+0x80>
   84e9c:	059a      	lsls	r2, r3, #22
   84e9e:	d4dd      	bmi.n	84e5c <__smakebuf_r+0x80>
   84ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84ea4:	f043 0302 	orr.w	r3, r3, #2
   84ea8:	2101      	movs	r1, #1
   84eaa:	81a3      	strh	r3, [r4, #12]
   84eac:	6022      	str	r2, [r4, #0]
   84eae:	6122      	str	r2, [r4, #16]
   84eb0:	6161      	str	r1, [r4, #20]
   84eb2:	e7d3      	b.n	84e5c <__smakebuf_r+0x80>
   84eb4:	000845b5 	.word	0x000845b5
   84eb8:	00085ac1 	.word	0x00085ac1

00084ebc <malloc>:
   84ebc:	4b02      	ldr	r3, [pc, #8]	; (84ec8 <malloc+0xc>)
   84ebe:	4601      	mov	r1, r0
   84ec0:	6818      	ldr	r0, [r3, #0]
   84ec2:	f000 b803 	b.w	84ecc <_malloc_r>
   84ec6:	bf00      	nop
   84ec8:	200705c8 	.word	0x200705c8

00084ecc <_malloc_r>:
   84ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84ed0:	f101 050b 	add.w	r5, r1, #11
   84ed4:	2d16      	cmp	r5, #22
   84ed6:	b083      	sub	sp, #12
   84ed8:	4606      	mov	r6, r0
   84eda:	d927      	bls.n	84f2c <_malloc_r+0x60>
   84edc:	f035 0507 	bics.w	r5, r5, #7
   84ee0:	f100 80b6 	bmi.w	85050 <_malloc_r+0x184>
   84ee4:	42a9      	cmp	r1, r5
   84ee6:	f200 80b3 	bhi.w	85050 <_malloc_r+0x184>
   84eea:	f000 fb23 	bl	85534 <__malloc_lock>
   84eee:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84ef2:	d222      	bcs.n	84f3a <_malloc_r+0x6e>
   84ef4:	4fbc      	ldr	r7, [pc, #752]	; (851e8 <_malloc_r+0x31c>)
   84ef6:	08e8      	lsrs	r0, r5, #3
   84ef8:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   84efc:	68dc      	ldr	r4, [r3, #12]
   84efe:	429c      	cmp	r4, r3
   84f00:	f000 81bc 	beq.w	8527c <_malloc_r+0x3b0>
   84f04:	6863      	ldr	r3, [r4, #4]
   84f06:	68e1      	ldr	r1, [r4, #12]
   84f08:	f023 0303 	bic.w	r3, r3, #3
   84f0c:	4423      	add	r3, r4
   84f0e:	685a      	ldr	r2, [r3, #4]
   84f10:	68a5      	ldr	r5, [r4, #8]
   84f12:	f042 0201 	orr.w	r2, r2, #1
   84f16:	60e9      	str	r1, [r5, #12]
   84f18:	4630      	mov	r0, r6
   84f1a:	608d      	str	r5, [r1, #8]
   84f1c:	605a      	str	r2, [r3, #4]
   84f1e:	f000 fb0b 	bl	85538 <__malloc_unlock>
   84f22:	3408      	adds	r4, #8
   84f24:	4620      	mov	r0, r4
   84f26:	b003      	add	sp, #12
   84f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f2c:	2910      	cmp	r1, #16
   84f2e:	f200 808f 	bhi.w	85050 <_malloc_r+0x184>
   84f32:	f000 faff 	bl	85534 <__malloc_lock>
   84f36:	2510      	movs	r5, #16
   84f38:	e7dc      	b.n	84ef4 <_malloc_r+0x28>
   84f3a:	0a68      	lsrs	r0, r5, #9
   84f3c:	f000 808f 	beq.w	8505e <_malloc_r+0x192>
   84f40:	2804      	cmp	r0, #4
   84f42:	f200 8147 	bhi.w	851d4 <_malloc_r+0x308>
   84f46:	09a8      	lsrs	r0, r5, #6
   84f48:	3038      	adds	r0, #56	; 0x38
   84f4a:	0041      	lsls	r1, r0, #1
   84f4c:	4fa6      	ldr	r7, [pc, #664]	; (851e8 <_malloc_r+0x31c>)
   84f4e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   84f52:	68cc      	ldr	r4, [r1, #12]
   84f54:	42a1      	cmp	r1, r4
   84f56:	d106      	bne.n	84f66 <_malloc_r+0x9a>
   84f58:	e00c      	b.n	84f74 <_malloc_r+0xa8>
   84f5a:	2a00      	cmp	r2, #0
   84f5c:	f280 8082 	bge.w	85064 <_malloc_r+0x198>
   84f60:	68e4      	ldr	r4, [r4, #12]
   84f62:	42a1      	cmp	r1, r4
   84f64:	d006      	beq.n	84f74 <_malloc_r+0xa8>
   84f66:	6863      	ldr	r3, [r4, #4]
   84f68:	f023 0303 	bic.w	r3, r3, #3
   84f6c:	1b5a      	subs	r2, r3, r5
   84f6e:	2a0f      	cmp	r2, #15
   84f70:	ddf3      	ble.n	84f5a <_malloc_r+0x8e>
   84f72:	3801      	subs	r0, #1
   84f74:	3001      	adds	r0, #1
   84f76:	499c      	ldr	r1, [pc, #624]	; (851e8 <_malloc_r+0x31c>)
   84f78:	693c      	ldr	r4, [r7, #16]
   84f7a:	f101 0e08 	add.w	lr, r1, #8
   84f7e:	4574      	cmp	r4, lr
   84f80:	f000 8171 	beq.w	85266 <_malloc_r+0x39a>
   84f84:	6863      	ldr	r3, [r4, #4]
   84f86:	f023 0303 	bic.w	r3, r3, #3
   84f8a:	1b5a      	subs	r2, r3, r5
   84f8c:	2a0f      	cmp	r2, #15
   84f8e:	f300 8157 	bgt.w	85240 <_malloc_r+0x374>
   84f92:	2a00      	cmp	r2, #0
   84f94:	f8c1 e014 	str.w	lr, [r1, #20]
   84f98:	f8c1 e010 	str.w	lr, [r1, #16]
   84f9c:	da66      	bge.n	8506c <_malloc_r+0x1a0>
   84f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84fa2:	f080 812d 	bcs.w	85200 <_malloc_r+0x334>
   84fa6:	08db      	lsrs	r3, r3, #3
   84fa8:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   84fac:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   84fb0:	684a      	ldr	r2, [r1, #4]
   84fb2:	2301      	movs	r3, #1
   84fb4:	fa03 f30c 	lsl.w	r3, r3, ip
   84fb8:	f8d8 c008 	ldr.w	ip, [r8, #8]
   84fbc:	4313      	orrs	r3, r2
   84fbe:	f8c4 c008 	str.w	ip, [r4, #8]
   84fc2:	f8c4 800c 	str.w	r8, [r4, #12]
   84fc6:	604b      	str	r3, [r1, #4]
   84fc8:	f8c8 4008 	str.w	r4, [r8, #8]
   84fcc:	f8cc 400c 	str.w	r4, [ip, #12]
   84fd0:	1082      	asrs	r2, r0, #2
   84fd2:	2401      	movs	r4, #1
   84fd4:	4094      	lsls	r4, r2
   84fd6:	429c      	cmp	r4, r3
   84fd8:	d855      	bhi.n	85086 <_malloc_r+0x1ba>
   84fda:	4223      	tst	r3, r4
   84fdc:	d106      	bne.n	84fec <_malloc_r+0x120>
   84fde:	f020 0003 	bic.w	r0, r0, #3
   84fe2:	0064      	lsls	r4, r4, #1
   84fe4:	4223      	tst	r3, r4
   84fe6:	f100 0004 	add.w	r0, r0, #4
   84fea:	d0fa      	beq.n	84fe2 <_malloc_r+0x116>
   84fec:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   84ff0:	46c4      	mov	ip, r8
   84ff2:	4681      	mov	r9, r0
   84ff4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84ff8:	459c      	cmp	ip, r3
   84ffa:	d107      	bne.n	8500c <_malloc_r+0x140>
   84ffc:	e135      	b.n	8526a <_malloc_r+0x39e>
   84ffe:	2900      	cmp	r1, #0
   85000:	f280 8145 	bge.w	8528e <_malloc_r+0x3c2>
   85004:	68db      	ldr	r3, [r3, #12]
   85006:	459c      	cmp	ip, r3
   85008:	f000 812f 	beq.w	8526a <_malloc_r+0x39e>
   8500c:	685a      	ldr	r2, [r3, #4]
   8500e:	f022 0203 	bic.w	r2, r2, #3
   85012:	1b51      	subs	r1, r2, r5
   85014:	290f      	cmp	r1, #15
   85016:	ddf2      	ble.n	84ffe <_malloc_r+0x132>
   85018:	461c      	mov	r4, r3
   8501a:	68da      	ldr	r2, [r3, #12]
   8501c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   85020:	f045 0901 	orr.w	r9, r5, #1
   85024:	f041 0801 	orr.w	r8, r1, #1
   85028:	441d      	add	r5, r3
   8502a:	f8c3 9004 	str.w	r9, [r3, #4]
   8502e:	4630      	mov	r0, r6
   85030:	f8cc 200c 	str.w	r2, [ip, #12]
   85034:	f8c2 c008 	str.w	ip, [r2, #8]
   85038:	617d      	str	r5, [r7, #20]
   8503a:	613d      	str	r5, [r7, #16]
   8503c:	f8c5 e00c 	str.w	lr, [r5, #12]
   85040:	f8c5 e008 	str.w	lr, [r5, #8]
   85044:	f8c5 8004 	str.w	r8, [r5, #4]
   85048:	5069      	str	r1, [r5, r1]
   8504a:	f000 fa75 	bl	85538 <__malloc_unlock>
   8504e:	e769      	b.n	84f24 <_malloc_r+0x58>
   85050:	2400      	movs	r4, #0
   85052:	4620      	mov	r0, r4
   85054:	230c      	movs	r3, #12
   85056:	6033      	str	r3, [r6, #0]
   85058:	b003      	add	sp, #12
   8505a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8505e:	217e      	movs	r1, #126	; 0x7e
   85060:	203f      	movs	r0, #63	; 0x3f
   85062:	e773      	b.n	84f4c <_malloc_r+0x80>
   85064:	4423      	add	r3, r4
   85066:	685a      	ldr	r2, [r3, #4]
   85068:	68e1      	ldr	r1, [r4, #12]
   8506a:	e751      	b.n	84f10 <_malloc_r+0x44>
   8506c:	4423      	add	r3, r4
   8506e:	685a      	ldr	r2, [r3, #4]
   85070:	4630      	mov	r0, r6
   85072:	f042 0201 	orr.w	r2, r2, #1
   85076:	605a      	str	r2, [r3, #4]
   85078:	3408      	adds	r4, #8
   8507a:	f000 fa5d 	bl	85538 <__malloc_unlock>
   8507e:	4620      	mov	r0, r4
   85080:	b003      	add	sp, #12
   85082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85086:	68bc      	ldr	r4, [r7, #8]
   85088:	6863      	ldr	r3, [r4, #4]
   8508a:	f023 0803 	bic.w	r8, r3, #3
   8508e:	4545      	cmp	r5, r8
   85090:	d804      	bhi.n	8509c <_malloc_r+0x1d0>
   85092:	ebc5 0308 	rsb	r3, r5, r8
   85096:	2b0f      	cmp	r3, #15
   85098:	f300 808c 	bgt.w	851b4 <_malloc_r+0x2e8>
   8509c:	4b53      	ldr	r3, [pc, #332]	; (851ec <_malloc_r+0x320>)
   8509e:	f8df a15c 	ldr.w	sl, [pc, #348]	; 851fc <_malloc_r+0x330>
   850a2:	681a      	ldr	r2, [r3, #0]
   850a4:	f8da 3000 	ldr.w	r3, [sl]
   850a8:	442a      	add	r2, r5
   850aa:	3301      	adds	r3, #1
   850ac:	eb04 0b08 	add.w	fp, r4, r8
   850b0:	f000 8151 	beq.w	85356 <_malloc_r+0x48a>
   850b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   850b8:	320f      	adds	r2, #15
   850ba:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   850be:	f022 020f 	bic.w	r2, r2, #15
   850c2:	4611      	mov	r1, r2
   850c4:	4630      	mov	r0, r6
   850c6:	9201      	str	r2, [sp, #4]
   850c8:	f000 fcba 	bl	85a40 <_sbrk_r>
   850cc:	f1b0 3fff 	cmp.w	r0, #4294967295
   850d0:	4681      	mov	r9, r0
   850d2:	9a01      	ldr	r2, [sp, #4]
   850d4:	f000 8148 	beq.w	85368 <_malloc_r+0x49c>
   850d8:	4583      	cmp	fp, r0
   850da:	f200 80ef 	bhi.w	852bc <_malloc_r+0x3f0>
   850de:	4b44      	ldr	r3, [pc, #272]	; (851f0 <_malloc_r+0x324>)
   850e0:	45cb      	cmp	fp, r9
   850e2:	6819      	ldr	r1, [r3, #0]
   850e4:	4411      	add	r1, r2
   850e6:	6019      	str	r1, [r3, #0]
   850e8:	f000 8143 	beq.w	85372 <_malloc_r+0x4a6>
   850ec:	f8da 0000 	ldr.w	r0, [sl]
   850f0:	f8df e108 	ldr.w	lr, [pc, #264]	; 851fc <_malloc_r+0x330>
   850f4:	3001      	adds	r0, #1
   850f6:	bf1b      	ittet	ne
   850f8:	ebcb 0b09 	rsbne	fp, fp, r9
   850fc:	4459      	addne	r1, fp
   850fe:	f8ce 9000 	streq.w	r9, [lr]
   85102:	6019      	strne	r1, [r3, #0]
   85104:	f019 0107 	ands.w	r1, r9, #7
   85108:	f000 8108 	beq.w	8531c <_malloc_r+0x450>
   8510c:	f1c1 0008 	rsb	r0, r1, #8
   85110:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   85114:	4481      	add	r9, r0
   85116:	3108      	adds	r1, #8
   85118:	444a      	add	r2, r9
   8511a:	f3c2 020b 	ubfx	r2, r2, #0, #12
   8511e:	ebc2 0a01 	rsb	sl, r2, r1
   85122:	4651      	mov	r1, sl
   85124:	4630      	mov	r0, r6
   85126:	9301      	str	r3, [sp, #4]
   85128:	f000 fc8a 	bl	85a40 <_sbrk_r>
   8512c:	1c43      	adds	r3, r0, #1
   8512e:	9b01      	ldr	r3, [sp, #4]
   85130:	f000 812d 	beq.w	8538e <_malloc_r+0x4c2>
   85134:	ebc9 0200 	rsb	r2, r9, r0
   85138:	4452      	add	r2, sl
   8513a:	f042 0201 	orr.w	r2, r2, #1
   8513e:	6819      	ldr	r1, [r3, #0]
   85140:	42bc      	cmp	r4, r7
   85142:	4451      	add	r1, sl
   85144:	f8c7 9008 	str.w	r9, [r7, #8]
   85148:	6019      	str	r1, [r3, #0]
   8514a:	f8c9 2004 	str.w	r2, [r9, #4]
   8514e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 851f0 <_malloc_r+0x324>
   85152:	d016      	beq.n	85182 <_malloc_r+0x2b6>
   85154:	f1b8 0f0f 	cmp.w	r8, #15
   85158:	f240 80ef 	bls.w	8533a <_malloc_r+0x46e>
   8515c:	6862      	ldr	r2, [r4, #4]
   8515e:	f1a8 030c 	sub.w	r3, r8, #12
   85162:	f023 0307 	bic.w	r3, r3, #7
   85166:	f002 0201 	and.w	r2, r2, #1
   8516a:	18e0      	adds	r0, r4, r3
   8516c:	f04f 0e05 	mov.w	lr, #5
   85170:	431a      	orrs	r2, r3
   85172:	2b0f      	cmp	r3, #15
   85174:	6062      	str	r2, [r4, #4]
   85176:	f8c0 e004 	str.w	lr, [r0, #4]
   8517a:	f8c0 e008 	str.w	lr, [r0, #8]
   8517e:	f200 810a 	bhi.w	85396 <_malloc_r+0x4ca>
   85182:	4b1c      	ldr	r3, [pc, #112]	; (851f4 <_malloc_r+0x328>)
   85184:	68bc      	ldr	r4, [r7, #8]
   85186:	681a      	ldr	r2, [r3, #0]
   85188:	4291      	cmp	r1, r2
   8518a:	bf88      	it	hi
   8518c:	6019      	strhi	r1, [r3, #0]
   8518e:	4b1a      	ldr	r3, [pc, #104]	; (851f8 <_malloc_r+0x32c>)
   85190:	681a      	ldr	r2, [r3, #0]
   85192:	4291      	cmp	r1, r2
   85194:	6862      	ldr	r2, [r4, #4]
   85196:	bf88      	it	hi
   85198:	6019      	strhi	r1, [r3, #0]
   8519a:	f022 0203 	bic.w	r2, r2, #3
   8519e:	4295      	cmp	r5, r2
   851a0:	eba2 0305 	sub.w	r3, r2, r5
   851a4:	d801      	bhi.n	851aa <_malloc_r+0x2de>
   851a6:	2b0f      	cmp	r3, #15
   851a8:	dc04      	bgt.n	851b4 <_malloc_r+0x2e8>
   851aa:	4630      	mov	r0, r6
   851ac:	f000 f9c4 	bl	85538 <__malloc_unlock>
   851b0:	2400      	movs	r4, #0
   851b2:	e6b7      	b.n	84f24 <_malloc_r+0x58>
   851b4:	f045 0201 	orr.w	r2, r5, #1
   851b8:	f043 0301 	orr.w	r3, r3, #1
   851bc:	4425      	add	r5, r4
   851be:	6062      	str	r2, [r4, #4]
   851c0:	4630      	mov	r0, r6
   851c2:	60bd      	str	r5, [r7, #8]
   851c4:	3408      	adds	r4, #8
   851c6:	606b      	str	r3, [r5, #4]
   851c8:	f000 f9b6 	bl	85538 <__malloc_unlock>
   851cc:	4620      	mov	r0, r4
   851ce:	b003      	add	sp, #12
   851d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   851d4:	2814      	cmp	r0, #20
   851d6:	d969      	bls.n	852ac <_malloc_r+0x3e0>
   851d8:	2854      	cmp	r0, #84	; 0x54
   851da:	f200 8098 	bhi.w	8530e <_malloc_r+0x442>
   851de:	0b28      	lsrs	r0, r5, #12
   851e0:	306e      	adds	r0, #110	; 0x6e
   851e2:	0041      	lsls	r1, r0, #1
   851e4:	e6b2      	b.n	84f4c <_malloc_r+0x80>
   851e6:	bf00      	nop
   851e8:	200705f4 	.word	0x200705f4
   851ec:	20078de4 	.word	0x20078de4
   851f0:	20078de8 	.word	0x20078de8
   851f4:	20078de0 	.word	0x20078de0
   851f8:	20078ddc 	.word	0x20078ddc
   851fc:	20070a00 	.word	0x20070a00
   85200:	0a5a      	lsrs	r2, r3, #9
   85202:	2a04      	cmp	r2, #4
   85204:	d955      	bls.n	852b2 <_malloc_r+0x3e6>
   85206:	2a14      	cmp	r2, #20
   85208:	f200 80a7 	bhi.w	8535a <_malloc_r+0x48e>
   8520c:	325b      	adds	r2, #91	; 0x5b
   8520e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85212:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   85216:	f8dc 1008 	ldr.w	r1, [ip, #8]
   8521a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 853d4 <_malloc_r+0x508>
   8521e:	4561      	cmp	r1, ip
   85220:	d07f      	beq.n	85322 <_malloc_r+0x456>
   85222:	684a      	ldr	r2, [r1, #4]
   85224:	f022 0203 	bic.w	r2, r2, #3
   85228:	4293      	cmp	r3, r2
   8522a:	d202      	bcs.n	85232 <_malloc_r+0x366>
   8522c:	6889      	ldr	r1, [r1, #8]
   8522e:	458c      	cmp	ip, r1
   85230:	d1f7      	bne.n	85222 <_malloc_r+0x356>
   85232:	68ca      	ldr	r2, [r1, #12]
   85234:	687b      	ldr	r3, [r7, #4]
   85236:	60e2      	str	r2, [r4, #12]
   85238:	60a1      	str	r1, [r4, #8]
   8523a:	6094      	str	r4, [r2, #8]
   8523c:	60cc      	str	r4, [r1, #12]
   8523e:	e6c7      	b.n	84fd0 <_malloc_r+0x104>
   85240:	f045 0701 	orr.w	r7, r5, #1
   85244:	f042 0301 	orr.w	r3, r2, #1
   85248:	4425      	add	r5, r4
   8524a:	6067      	str	r7, [r4, #4]
   8524c:	4630      	mov	r0, r6
   8524e:	614d      	str	r5, [r1, #20]
   85250:	610d      	str	r5, [r1, #16]
   85252:	f8c5 e00c 	str.w	lr, [r5, #12]
   85256:	f8c5 e008 	str.w	lr, [r5, #8]
   8525a:	606b      	str	r3, [r5, #4]
   8525c:	50aa      	str	r2, [r5, r2]
   8525e:	3408      	adds	r4, #8
   85260:	f000 f96a 	bl	85538 <__malloc_unlock>
   85264:	e65e      	b.n	84f24 <_malloc_r+0x58>
   85266:	684b      	ldr	r3, [r1, #4]
   85268:	e6b2      	b.n	84fd0 <_malloc_r+0x104>
   8526a:	f109 0901 	add.w	r9, r9, #1
   8526e:	f019 0f03 	tst.w	r9, #3
   85272:	f10c 0c08 	add.w	ip, ip, #8
   85276:	f47f aebd 	bne.w	84ff4 <_malloc_r+0x128>
   8527a:	e02c      	b.n	852d6 <_malloc_r+0x40a>
   8527c:	f104 0308 	add.w	r3, r4, #8
   85280:	6964      	ldr	r4, [r4, #20]
   85282:	42a3      	cmp	r3, r4
   85284:	bf08      	it	eq
   85286:	3002      	addeq	r0, #2
   85288:	f43f ae75 	beq.w	84f76 <_malloc_r+0xaa>
   8528c:	e63a      	b.n	84f04 <_malloc_r+0x38>
   8528e:	461c      	mov	r4, r3
   85290:	441a      	add	r2, r3
   85292:	6851      	ldr	r1, [r2, #4]
   85294:	68db      	ldr	r3, [r3, #12]
   85296:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8529a:	f041 0101 	orr.w	r1, r1, #1
   8529e:	6051      	str	r1, [r2, #4]
   852a0:	4630      	mov	r0, r6
   852a2:	60eb      	str	r3, [r5, #12]
   852a4:	609d      	str	r5, [r3, #8]
   852a6:	f000 f947 	bl	85538 <__malloc_unlock>
   852aa:	e63b      	b.n	84f24 <_malloc_r+0x58>
   852ac:	305b      	adds	r0, #91	; 0x5b
   852ae:	0041      	lsls	r1, r0, #1
   852b0:	e64c      	b.n	84f4c <_malloc_r+0x80>
   852b2:	099a      	lsrs	r2, r3, #6
   852b4:	3238      	adds	r2, #56	; 0x38
   852b6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   852ba:	e7aa      	b.n	85212 <_malloc_r+0x346>
   852bc:	42bc      	cmp	r4, r7
   852be:	4b45      	ldr	r3, [pc, #276]	; (853d4 <_malloc_r+0x508>)
   852c0:	f43f af0d 	beq.w	850de <_malloc_r+0x212>
   852c4:	689c      	ldr	r4, [r3, #8]
   852c6:	6862      	ldr	r2, [r4, #4]
   852c8:	f022 0203 	bic.w	r2, r2, #3
   852cc:	e767      	b.n	8519e <_malloc_r+0x2d2>
   852ce:	f8d8 8000 	ldr.w	r8, [r8]
   852d2:	4598      	cmp	r8, r3
   852d4:	d17c      	bne.n	853d0 <_malloc_r+0x504>
   852d6:	f010 0f03 	tst.w	r0, #3
   852da:	f1a8 0308 	sub.w	r3, r8, #8
   852de:	f100 30ff 	add.w	r0, r0, #4294967295
   852e2:	d1f4      	bne.n	852ce <_malloc_r+0x402>
   852e4:	687b      	ldr	r3, [r7, #4]
   852e6:	ea23 0304 	bic.w	r3, r3, r4
   852ea:	607b      	str	r3, [r7, #4]
   852ec:	0064      	lsls	r4, r4, #1
   852ee:	429c      	cmp	r4, r3
   852f0:	f63f aec9 	bhi.w	85086 <_malloc_r+0x1ba>
   852f4:	2c00      	cmp	r4, #0
   852f6:	f43f aec6 	beq.w	85086 <_malloc_r+0x1ba>
   852fa:	4223      	tst	r3, r4
   852fc:	4648      	mov	r0, r9
   852fe:	f47f ae75 	bne.w	84fec <_malloc_r+0x120>
   85302:	0064      	lsls	r4, r4, #1
   85304:	4223      	tst	r3, r4
   85306:	f100 0004 	add.w	r0, r0, #4
   8530a:	d0fa      	beq.n	85302 <_malloc_r+0x436>
   8530c:	e66e      	b.n	84fec <_malloc_r+0x120>
   8530e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   85312:	d818      	bhi.n	85346 <_malloc_r+0x47a>
   85314:	0be8      	lsrs	r0, r5, #15
   85316:	3077      	adds	r0, #119	; 0x77
   85318:	0041      	lsls	r1, r0, #1
   8531a:	e617      	b.n	84f4c <_malloc_r+0x80>
   8531c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85320:	e6fa      	b.n	85118 <_malloc_r+0x24c>
   85322:	f8d8 3004 	ldr.w	r3, [r8, #4]
   85326:	1092      	asrs	r2, r2, #2
   85328:	f04f 0c01 	mov.w	ip, #1
   8532c:	fa0c f202 	lsl.w	r2, ip, r2
   85330:	4313      	orrs	r3, r2
   85332:	f8c8 3004 	str.w	r3, [r8, #4]
   85336:	460a      	mov	r2, r1
   85338:	e77d      	b.n	85236 <_malloc_r+0x36a>
   8533a:	2301      	movs	r3, #1
   8533c:	f8c9 3004 	str.w	r3, [r9, #4]
   85340:	464c      	mov	r4, r9
   85342:	2200      	movs	r2, #0
   85344:	e72b      	b.n	8519e <_malloc_r+0x2d2>
   85346:	f240 5354 	movw	r3, #1364	; 0x554
   8534a:	4298      	cmp	r0, r3
   8534c:	d81c      	bhi.n	85388 <_malloc_r+0x4bc>
   8534e:	0ca8      	lsrs	r0, r5, #18
   85350:	307c      	adds	r0, #124	; 0x7c
   85352:	0041      	lsls	r1, r0, #1
   85354:	e5fa      	b.n	84f4c <_malloc_r+0x80>
   85356:	3210      	adds	r2, #16
   85358:	e6b3      	b.n	850c2 <_malloc_r+0x1f6>
   8535a:	2a54      	cmp	r2, #84	; 0x54
   8535c:	d823      	bhi.n	853a6 <_malloc_r+0x4da>
   8535e:	0b1a      	lsrs	r2, r3, #12
   85360:	326e      	adds	r2, #110	; 0x6e
   85362:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85366:	e754      	b.n	85212 <_malloc_r+0x346>
   85368:	68bc      	ldr	r4, [r7, #8]
   8536a:	6862      	ldr	r2, [r4, #4]
   8536c:	f022 0203 	bic.w	r2, r2, #3
   85370:	e715      	b.n	8519e <_malloc_r+0x2d2>
   85372:	f3cb 000b 	ubfx	r0, fp, #0, #12
   85376:	2800      	cmp	r0, #0
   85378:	f47f aeb8 	bne.w	850ec <_malloc_r+0x220>
   8537c:	4442      	add	r2, r8
   8537e:	68bb      	ldr	r3, [r7, #8]
   85380:	f042 0201 	orr.w	r2, r2, #1
   85384:	605a      	str	r2, [r3, #4]
   85386:	e6fc      	b.n	85182 <_malloc_r+0x2b6>
   85388:	21fc      	movs	r1, #252	; 0xfc
   8538a:	207e      	movs	r0, #126	; 0x7e
   8538c:	e5de      	b.n	84f4c <_malloc_r+0x80>
   8538e:	2201      	movs	r2, #1
   85390:	f04f 0a00 	mov.w	sl, #0
   85394:	e6d3      	b.n	8513e <_malloc_r+0x272>
   85396:	f104 0108 	add.w	r1, r4, #8
   8539a:	4630      	mov	r0, r6
   8539c:	f7ff fa60 	bl	84860 <_free_r>
   853a0:	f8da 1000 	ldr.w	r1, [sl]
   853a4:	e6ed      	b.n	85182 <_malloc_r+0x2b6>
   853a6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   853aa:	d804      	bhi.n	853b6 <_malloc_r+0x4ea>
   853ac:	0bda      	lsrs	r2, r3, #15
   853ae:	3277      	adds	r2, #119	; 0x77
   853b0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   853b4:	e72d      	b.n	85212 <_malloc_r+0x346>
   853b6:	f240 5154 	movw	r1, #1364	; 0x554
   853ba:	428a      	cmp	r2, r1
   853bc:	d804      	bhi.n	853c8 <_malloc_r+0x4fc>
   853be:	0c9a      	lsrs	r2, r3, #18
   853c0:	327c      	adds	r2, #124	; 0x7c
   853c2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   853c6:	e724      	b.n	85212 <_malloc_r+0x346>
   853c8:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   853cc:	227e      	movs	r2, #126	; 0x7e
   853ce:	e720      	b.n	85212 <_malloc_r+0x346>
   853d0:	687b      	ldr	r3, [r7, #4]
   853d2:	e78b      	b.n	852ec <_malloc_r+0x420>
   853d4:	200705f4 	.word	0x200705f4

000853d8 <memchr>:
   853d8:	0783      	lsls	r3, r0, #30
   853da:	b470      	push	{r4, r5, r6}
   853dc:	b2c9      	uxtb	r1, r1
   853de:	d040      	beq.n	85462 <memchr+0x8a>
   853e0:	1e54      	subs	r4, r2, #1
   853e2:	2a00      	cmp	r2, #0
   853e4:	d03f      	beq.n	85466 <memchr+0x8e>
   853e6:	7803      	ldrb	r3, [r0, #0]
   853e8:	428b      	cmp	r3, r1
   853ea:	bf18      	it	ne
   853ec:	1c43      	addne	r3, r0, #1
   853ee:	d105      	bne.n	853fc <memchr+0x24>
   853f0:	e01c      	b.n	8542c <memchr+0x54>
   853f2:	b1ec      	cbz	r4, 85430 <memchr+0x58>
   853f4:	7802      	ldrb	r2, [r0, #0]
   853f6:	3c01      	subs	r4, #1
   853f8:	428a      	cmp	r2, r1
   853fa:	d017      	beq.n	8542c <memchr+0x54>
   853fc:	f013 0f03 	tst.w	r3, #3
   85400:	4618      	mov	r0, r3
   85402:	f103 0301 	add.w	r3, r3, #1
   85406:	d1f4      	bne.n	853f2 <memchr+0x1a>
   85408:	2c03      	cmp	r4, #3
   8540a:	d814      	bhi.n	85436 <memchr+0x5e>
   8540c:	b184      	cbz	r4, 85430 <memchr+0x58>
   8540e:	7803      	ldrb	r3, [r0, #0]
   85410:	428b      	cmp	r3, r1
   85412:	d00b      	beq.n	8542c <memchr+0x54>
   85414:	1905      	adds	r5, r0, r4
   85416:	1c43      	adds	r3, r0, #1
   85418:	e002      	b.n	85420 <memchr+0x48>
   8541a:	7802      	ldrb	r2, [r0, #0]
   8541c:	428a      	cmp	r2, r1
   8541e:	d005      	beq.n	8542c <memchr+0x54>
   85420:	42ab      	cmp	r3, r5
   85422:	4618      	mov	r0, r3
   85424:	f103 0301 	add.w	r3, r3, #1
   85428:	d1f7      	bne.n	8541a <memchr+0x42>
   8542a:	2000      	movs	r0, #0
   8542c:	bc70      	pop	{r4, r5, r6}
   8542e:	4770      	bx	lr
   85430:	4620      	mov	r0, r4
   85432:	bc70      	pop	{r4, r5, r6}
   85434:	4770      	bx	lr
   85436:	4602      	mov	r2, r0
   85438:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   8543c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85440:	6813      	ldr	r3, [r2, #0]
   85442:	4610      	mov	r0, r2
   85444:	4073      	eors	r3, r6
   85446:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   8544a:	ea25 0303 	bic.w	r3, r5, r3
   8544e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   85452:	f102 0204 	add.w	r2, r2, #4
   85456:	d1d9      	bne.n	8540c <memchr+0x34>
   85458:	3c04      	subs	r4, #4
   8545a:	2c03      	cmp	r4, #3
   8545c:	4610      	mov	r0, r2
   8545e:	d8ef      	bhi.n	85440 <memchr+0x68>
   85460:	e7d4      	b.n	8540c <memchr+0x34>
   85462:	4614      	mov	r4, r2
   85464:	e7d0      	b.n	85408 <memchr+0x30>
   85466:	4610      	mov	r0, r2
   85468:	e7e0      	b.n	8542c <memchr+0x54>
   8546a:	bf00      	nop

0008546c <memmove>:
   8546c:	4288      	cmp	r0, r1
   8546e:	b5f0      	push	{r4, r5, r6, r7, lr}
   85470:	d90d      	bls.n	8548e <memmove+0x22>
   85472:	188b      	adds	r3, r1, r2
   85474:	4298      	cmp	r0, r3
   85476:	d20a      	bcs.n	8548e <memmove+0x22>
   85478:	1881      	adds	r1, r0, r2
   8547a:	2a00      	cmp	r2, #0
   8547c:	d054      	beq.n	85528 <memmove+0xbc>
   8547e:	1a9a      	subs	r2, r3, r2
   85480:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85484:	4293      	cmp	r3, r2
   85486:	f801 4d01 	strb.w	r4, [r1, #-1]!
   8548a:	d1f9      	bne.n	85480 <memmove+0x14>
   8548c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8548e:	2a0f      	cmp	r2, #15
   85490:	d948      	bls.n	85524 <memmove+0xb8>
   85492:	ea40 0301 	orr.w	r3, r0, r1
   85496:	079b      	lsls	r3, r3, #30
   85498:	d147      	bne.n	8552a <memmove+0xbe>
   8549a:	4615      	mov	r5, r2
   8549c:	f100 0410 	add.w	r4, r0, #16
   854a0:	f101 0310 	add.w	r3, r1, #16
   854a4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   854a8:	3d10      	subs	r5, #16
   854aa:	f844 6c10 	str.w	r6, [r4, #-16]
   854ae:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   854b2:	2d0f      	cmp	r5, #15
   854b4:	f844 6c0c 	str.w	r6, [r4, #-12]
   854b8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   854bc:	f104 0410 	add.w	r4, r4, #16
   854c0:	f844 6c18 	str.w	r6, [r4, #-24]
   854c4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   854c8:	f103 0310 	add.w	r3, r3, #16
   854cc:	f844 6c14 	str.w	r6, [r4, #-20]
   854d0:	d8e8      	bhi.n	854a4 <memmove+0x38>
   854d2:	f1a2 0310 	sub.w	r3, r2, #16
   854d6:	f023 030f 	bic.w	r3, r3, #15
   854da:	f002 0e0f 	and.w	lr, r2, #15
   854de:	3310      	adds	r3, #16
   854e0:	f1be 0f03 	cmp.w	lr, #3
   854e4:	4419      	add	r1, r3
   854e6:	4403      	add	r3, r0
   854e8:	d921      	bls.n	8552e <memmove+0xc2>
   854ea:	460e      	mov	r6, r1
   854ec:	4674      	mov	r4, lr
   854ee:	1f1d      	subs	r5, r3, #4
   854f0:	f856 7b04 	ldr.w	r7, [r6], #4
   854f4:	3c04      	subs	r4, #4
   854f6:	2c03      	cmp	r4, #3
   854f8:	f845 7f04 	str.w	r7, [r5, #4]!
   854fc:	d8f8      	bhi.n	854f0 <memmove+0x84>
   854fe:	f1ae 0404 	sub.w	r4, lr, #4
   85502:	f024 0403 	bic.w	r4, r4, #3
   85506:	3404      	adds	r4, #4
   85508:	4423      	add	r3, r4
   8550a:	4421      	add	r1, r4
   8550c:	f002 0203 	and.w	r2, r2, #3
   85510:	b152      	cbz	r2, 85528 <memmove+0xbc>
   85512:	3b01      	subs	r3, #1
   85514:	440a      	add	r2, r1
   85516:	f811 4b01 	ldrb.w	r4, [r1], #1
   8551a:	4291      	cmp	r1, r2
   8551c:	f803 4f01 	strb.w	r4, [r3, #1]!
   85520:	d1f9      	bne.n	85516 <memmove+0xaa>
   85522:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85524:	4603      	mov	r3, r0
   85526:	e7f3      	b.n	85510 <memmove+0xa4>
   85528:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8552a:	4603      	mov	r3, r0
   8552c:	e7f1      	b.n	85512 <memmove+0xa6>
   8552e:	4672      	mov	r2, lr
   85530:	e7ee      	b.n	85510 <memmove+0xa4>
   85532:	bf00      	nop

00085534 <__malloc_lock>:
   85534:	4770      	bx	lr
   85536:	bf00      	nop

00085538 <__malloc_unlock>:
   85538:	4770      	bx	lr
   8553a:	bf00      	nop

0008553c <_realloc_r>:
   8553c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85540:	4617      	mov	r7, r2
   85542:	b083      	sub	sp, #12
   85544:	460d      	mov	r5, r1
   85546:	2900      	cmp	r1, #0
   85548:	f000 80e2 	beq.w	85710 <_realloc_r+0x1d4>
   8554c:	4681      	mov	r9, r0
   8554e:	f107 040b 	add.w	r4, r7, #11
   85552:	f7ff ffef 	bl	85534 <__malloc_lock>
   85556:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8555a:	2c16      	cmp	r4, #22
   8555c:	f023 0603 	bic.w	r6, r3, #3
   85560:	f1a5 0808 	sub.w	r8, r5, #8
   85564:	d84b      	bhi.n	855fe <_realloc_r+0xc2>
   85566:	2210      	movs	r2, #16
   85568:	4614      	mov	r4, r2
   8556a:	42a7      	cmp	r7, r4
   8556c:	d84c      	bhi.n	85608 <_realloc_r+0xcc>
   8556e:	4296      	cmp	r6, r2
   85570:	da51      	bge.n	85616 <_realloc_r+0xda>
   85572:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 85918 <_realloc_r+0x3dc>
   85576:	eb08 0106 	add.w	r1, r8, r6
   8557a:	f8db 0008 	ldr.w	r0, [fp, #8]
   8557e:	4288      	cmp	r0, r1
   85580:	f000 80d3 	beq.w	8572a <_realloc_r+0x1ee>
   85584:	6848      	ldr	r0, [r1, #4]
   85586:	f020 0e01 	bic.w	lr, r0, #1
   8558a:	448e      	add	lr, r1
   8558c:	f8de e004 	ldr.w	lr, [lr, #4]
   85590:	f01e 0f01 	tst.w	lr, #1
   85594:	d154      	bne.n	85640 <_realloc_r+0x104>
   85596:	f020 0003 	bic.w	r0, r0, #3
   8559a:	4430      	add	r0, r6
   8559c:	4290      	cmp	r0, r2
   8559e:	f280 80bd 	bge.w	8571c <_realloc_r+0x1e0>
   855a2:	07db      	lsls	r3, r3, #31
   855a4:	f100 8090 	bmi.w	856c8 <_realloc_r+0x18c>
   855a8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   855ac:	ebc3 0a08 	rsb	sl, r3, r8
   855b0:	f8da 3004 	ldr.w	r3, [sl, #4]
   855b4:	f023 0303 	bic.w	r3, r3, #3
   855b8:	eb00 0e03 	add.w	lr, r0, r3
   855bc:	4596      	cmp	lr, r2
   855be:	db49      	blt.n	85654 <_realloc_r+0x118>
   855c0:	4657      	mov	r7, sl
   855c2:	68cb      	ldr	r3, [r1, #12]
   855c4:	6889      	ldr	r1, [r1, #8]
   855c6:	1f32      	subs	r2, r6, #4
   855c8:	60cb      	str	r3, [r1, #12]
   855ca:	6099      	str	r1, [r3, #8]
   855cc:	f857 1f08 	ldr.w	r1, [r7, #8]!
   855d0:	f8da 300c 	ldr.w	r3, [sl, #12]
   855d4:	2a24      	cmp	r2, #36	; 0x24
   855d6:	60cb      	str	r3, [r1, #12]
   855d8:	6099      	str	r1, [r3, #8]
   855da:	f200 8133 	bhi.w	85844 <_realloc_r+0x308>
   855de:	2a13      	cmp	r2, #19
   855e0:	f240 80fa 	bls.w	857d8 <_realloc_r+0x29c>
   855e4:	682b      	ldr	r3, [r5, #0]
   855e6:	2a1b      	cmp	r2, #27
   855e8:	f8ca 3008 	str.w	r3, [sl, #8]
   855ec:	686b      	ldr	r3, [r5, #4]
   855ee:	f8ca 300c 	str.w	r3, [sl, #12]
   855f2:	f200 813b 	bhi.w	8586c <_realloc_r+0x330>
   855f6:	3508      	adds	r5, #8
   855f8:	f10a 0310 	add.w	r3, sl, #16
   855fc:	e0ed      	b.n	857da <_realloc_r+0x29e>
   855fe:	f024 0407 	bic.w	r4, r4, #7
   85602:	2c00      	cmp	r4, #0
   85604:	4622      	mov	r2, r4
   85606:	dab0      	bge.n	8556a <_realloc_r+0x2e>
   85608:	230c      	movs	r3, #12
   8560a:	2000      	movs	r0, #0
   8560c:	f8c9 3000 	str.w	r3, [r9]
   85610:	b003      	add	sp, #12
   85612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85616:	462f      	mov	r7, r5
   85618:	1b32      	subs	r2, r6, r4
   8561a:	2a0f      	cmp	r2, #15
   8561c:	f003 0301 	and.w	r3, r3, #1
   85620:	d840      	bhi.n	856a4 <_realloc_r+0x168>
   85622:	4333      	orrs	r3, r6
   85624:	f8c8 3004 	str.w	r3, [r8, #4]
   85628:	4446      	add	r6, r8
   8562a:	6873      	ldr	r3, [r6, #4]
   8562c:	f043 0301 	orr.w	r3, r3, #1
   85630:	6073      	str	r3, [r6, #4]
   85632:	4648      	mov	r0, r9
   85634:	f7ff ff80 	bl	85538 <__malloc_unlock>
   85638:	4638      	mov	r0, r7
   8563a:	b003      	add	sp, #12
   8563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85640:	07d9      	lsls	r1, r3, #31
   85642:	d441      	bmi.n	856c8 <_realloc_r+0x18c>
   85644:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85648:	ebc3 0a08 	rsb	sl, r3, r8
   8564c:	f8da 3004 	ldr.w	r3, [sl, #4]
   85650:	f023 0303 	bic.w	r3, r3, #3
   85654:	4433      	add	r3, r6
   85656:	4293      	cmp	r3, r2
   85658:	db36      	blt.n	856c8 <_realloc_r+0x18c>
   8565a:	4657      	mov	r7, sl
   8565c:	f8da 100c 	ldr.w	r1, [sl, #12]
   85660:	f857 0f08 	ldr.w	r0, [r7, #8]!
   85664:	1f32      	subs	r2, r6, #4
   85666:	2a24      	cmp	r2, #36	; 0x24
   85668:	60c1      	str	r1, [r0, #12]
   8566a:	6088      	str	r0, [r1, #8]
   8566c:	f200 80f5 	bhi.w	8585a <_realloc_r+0x31e>
   85670:	2a13      	cmp	r2, #19
   85672:	f240 80f0 	bls.w	85856 <_realloc_r+0x31a>
   85676:	6829      	ldr	r1, [r5, #0]
   85678:	2a1b      	cmp	r2, #27
   8567a:	f8ca 1008 	str.w	r1, [sl, #8]
   8567e:	6869      	ldr	r1, [r5, #4]
   85680:	f8ca 100c 	str.w	r1, [sl, #12]
   85684:	f200 8107 	bhi.w	85896 <_realloc_r+0x35a>
   85688:	3508      	adds	r5, #8
   8568a:	f10a 0210 	add.w	r2, sl, #16
   8568e:	6829      	ldr	r1, [r5, #0]
   85690:	461e      	mov	r6, r3
   85692:	6011      	str	r1, [r2, #0]
   85694:	6869      	ldr	r1, [r5, #4]
   85696:	46d0      	mov	r8, sl
   85698:	6051      	str	r1, [r2, #4]
   8569a:	68ab      	ldr	r3, [r5, #8]
   8569c:	6093      	str	r3, [r2, #8]
   8569e:	f8da 3004 	ldr.w	r3, [sl, #4]
   856a2:	e7b9      	b.n	85618 <_realloc_r+0xdc>
   856a4:	eb08 0104 	add.w	r1, r8, r4
   856a8:	4323      	orrs	r3, r4
   856aa:	f042 0001 	orr.w	r0, r2, #1
   856ae:	f8c8 3004 	str.w	r3, [r8, #4]
   856b2:	440a      	add	r2, r1
   856b4:	6048      	str	r0, [r1, #4]
   856b6:	6853      	ldr	r3, [r2, #4]
   856b8:	3108      	adds	r1, #8
   856ba:	f043 0301 	orr.w	r3, r3, #1
   856be:	6053      	str	r3, [r2, #4]
   856c0:	4648      	mov	r0, r9
   856c2:	f7ff f8cd 	bl	84860 <_free_r>
   856c6:	e7b4      	b.n	85632 <_realloc_r+0xf6>
   856c8:	4639      	mov	r1, r7
   856ca:	4648      	mov	r0, r9
   856cc:	f7ff fbfe 	bl	84ecc <_malloc_r>
   856d0:	4607      	mov	r7, r0
   856d2:	2800      	cmp	r0, #0
   856d4:	d0ad      	beq.n	85632 <_realloc_r+0xf6>
   856d6:	f855 3c04 	ldr.w	r3, [r5, #-4]
   856da:	f1a0 0108 	sub.w	r1, r0, #8
   856de:	f023 0201 	bic.w	r2, r3, #1
   856e2:	4442      	add	r2, r8
   856e4:	4291      	cmp	r1, r2
   856e6:	f000 80a6 	beq.w	85836 <_realloc_r+0x2fa>
   856ea:	1f32      	subs	r2, r6, #4
   856ec:	2a24      	cmp	r2, #36	; 0x24
   856ee:	f200 8093 	bhi.w	85818 <_realloc_r+0x2dc>
   856f2:	2a13      	cmp	r2, #19
   856f4:	d865      	bhi.n	857c2 <_realloc_r+0x286>
   856f6:	4603      	mov	r3, r0
   856f8:	462a      	mov	r2, r5
   856fa:	6811      	ldr	r1, [r2, #0]
   856fc:	6019      	str	r1, [r3, #0]
   856fe:	6851      	ldr	r1, [r2, #4]
   85700:	6059      	str	r1, [r3, #4]
   85702:	6892      	ldr	r2, [r2, #8]
   85704:	609a      	str	r2, [r3, #8]
   85706:	4629      	mov	r1, r5
   85708:	4648      	mov	r0, r9
   8570a:	f7ff f8a9 	bl	84860 <_free_r>
   8570e:	e790      	b.n	85632 <_realloc_r+0xf6>
   85710:	4611      	mov	r1, r2
   85712:	b003      	add	sp, #12
   85714:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85718:	f7ff bbd8 	b.w	84ecc <_malloc_r>
   8571c:	68ca      	ldr	r2, [r1, #12]
   8571e:	6889      	ldr	r1, [r1, #8]
   85720:	462f      	mov	r7, r5
   85722:	60ca      	str	r2, [r1, #12]
   85724:	4606      	mov	r6, r0
   85726:	6091      	str	r1, [r2, #8]
   85728:	e776      	b.n	85618 <_realloc_r+0xdc>
   8572a:	6841      	ldr	r1, [r0, #4]
   8572c:	f104 0010 	add.w	r0, r4, #16
   85730:	f021 0103 	bic.w	r1, r1, #3
   85734:	4431      	add	r1, r6
   85736:	4281      	cmp	r1, r0
   85738:	da5a      	bge.n	857f0 <_realloc_r+0x2b4>
   8573a:	07db      	lsls	r3, r3, #31
   8573c:	d4c4      	bmi.n	856c8 <_realloc_r+0x18c>
   8573e:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85742:	ebc3 0a08 	rsb	sl, r3, r8
   85746:	f8da 3004 	ldr.w	r3, [sl, #4]
   8574a:	f023 0303 	bic.w	r3, r3, #3
   8574e:	eb01 0c03 	add.w	ip, r1, r3
   85752:	4560      	cmp	r0, ip
   85754:	f73f af7e 	bgt.w	85654 <_realloc_r+0x118>
   85758:	4657      	mov	r7, sl
   8575a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8575e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   85762:	1f32      	subs	r2, r6, #4
   85764:	2a24      	cmp	r2, #36	; 0x24
   85766:	60cb      	str	r3, [r1, #12]
   85768:	6099      	str	r1, [r3, #8]
   8576a:	f200 80b6 	bhi.w	858da <_realloc_r+0x39e>
   8576e:	2a13      	cmp	r2, #19
   85770:	f240 80a7 	bls.w	858c2 <_realloc_r+0x386>
   85774:	682b      	ldr	r3, [r5, #0]
   85776:	2a1b      	cmp	r2, #27
   85778:	f8ca 3008 	str.w	r3, [sl, #8]
   8577c:	686b      	ldr	r3, [r5, #4]
   8577e:	f8ca 300c 	str.w	r3, [sl, #12]
   85782:	f200 80b3 	bhi.w	858ec <_realloc_r+0x3b0>
   85786:	3508      	adds	r5, #8
   85788:	f10a 0310 	add.w	r3, sl, #16
   8578c:	682a      	ldr	r2, [r5, #0]
   8578e:	601a      	str	r2, [r3, #0]
   85790:	686a      	ldr	r2, [r5, #4]
   85792:	605a      	str	r2, [r3, #4]
   85794:	68aa      	ldr	r2, [r5, #8]
   85796:	609a      	str	r2, [r3, #8]
   85798:	ebc4 030c 	rsb	r3, r4, ip
   8579c:	eb0a 0204 	add.w	r2, sl, r4
   857a0:	f043 0301 	orr.w	r3, r3, #1
   857a4:	f8cb 2008 	str.w	r2, [fp, #8]
   857a8:	6053      	str	r3, [r2, #4]
   857aa:	f8da 3004 	ldr.w	r3, [sl, #4]
   857ae:	4648      	mov	r0, r9
   857b0:	f003 0301 	and.w	r3, r3, #1
   857b4:	431c      	orrs	r4, r3
   857b6:	f8ca 4004 	str.w	r4, [sl, #4]
   857ba:	f7ff febd 	bl	85538 <__malloc_unlock>
   857be:	4638      	mov	r0, r7
   857c0:	e73b      	b.n	8563a <_realloc_r+0xfe>
   857c2:	682b      	ldr	r3, [r5, #0]
   857c4:	2a1b      	cmp	r2, #27
   857c6:	6003      	str	r3, [r0, #0]
   857c8:	686b      	ldr	r3, [r5, #4]
   857ca:	6043      	str	r3, [r0, #4]
   857cc:	d828      	bhi.n	85820 <_realloc_r+0x2e4>
   857ce:	f100 0308 	add.w	r3, r0, #8
   857d2:	f105 0208 	add.w	r2, r5, #8
   857d6:	e790      	b.n	856fa <_realloc_r+0x1be>
   857d8:	463b      	mov	r3, r7
   857da:	682a      	ldr	r2, [r5, #0]
   857dc:	4676      	mov	r6, lr
   857de:	601a      	str	r2, [r3, #0]
   857e0:	686a      	ldr	r2, [r5, #4]
   857e2:	46d0      	mov	r8, sl
   857e4:	605a      	str	r2, [r3, #4]
   857e6:	68aa      	ldr	r2, [r5, #8]
   857e8:	609a      	str	r2, [r3, #8]
   857ea:	f8da 3004 	ldr.w	r3, [sl, #4]
   857ee:	e713      	b.n	85618 <_realloc_r+0xdc>
   857f0:	1b0b      	subs	r3, r1, r4
   857f2:	eb08 0204 	add.w	r2, r8, r4
   857f6:	f043 0301 	orr.w	r3, r3, #1
   857fa:	f8cb 2008 	str.w	r2, [fp, #8]
   857fe:	6053      	str	r3, [r2, #4]
   85800:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85804:	4648      	mov	r0, r9
   85806:	f003 0301 	and.w	r3, r3, #1
   8580a:	431c      	orrs	r4, r3
   8580c:	f845 4c04 	str.w	r4, [r5, #-4]
   85810:	f7ff fe92 	bl	85538 <__malloc_unlock>
   85814:	4628      	mov	r0, r5
   85816:	e710      	b.n	8563a <_realloc_r+0xfe>
   85818:	4629      	mov	r1, r5
   8581a:	f7ff fe27 	bl	8546c <memmove>
   8581e:	e772      	b.n	85706 <_realloc_r+0x1ca>
   85820:	68ab      	ldr	r3, [r5, #8]
   85822:	2a24      	cmp	r2, #36	; 0x24
   85824:	6083      	str	r3, [r0, #8]
   85826:	68eb      	ldr	r3, [r5, #12]
   85828:	60c3      	str	r3, [r0, #12]
   8582a:	d02b      	beq.n	85884 <_realloc_r+0x348>
   8582c:	f100 0310 	add.w	r3, r0, #16
   85830:	f105 0210 	add.w	r2, r5, #16
   85834:	e761      	b.n	856fa <_realloc_r+0x1be>
   85836:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8583a:	462f      	mov	r7, r5
   8583c:	f022 0203 	bic.w	r2, r2, #3
   85840:	4416      	add	r6, r2
   85842:	e6e9      	b.n	85618 <_realloc_r+0xdc>
   85844:	4629      	mov	r1, r5
   85846:	4638      	mov	r0, r7
   85848:	4676      	mov	r6, lr
   8584a:	46d0      	mov	r8, sl
   8584c:	f7ff fe0e 	bl	8546c <memmove>
   85850:	f8da 3004 	ldr.w	r3, [sl, #4]
   85854:	e6e0      	b.n	85618 <_realloc_r+0xdc>
   85856:	463a      	mov	r2, r7
   85858:	e719      	b.n	8568e <_realloc_r+0x152>
   8585a:	4629      	mov	r1, r5
   8585c:	4638      	mov	r0, r7
   8585e:	461e      	mov	r6, r3
   85860:	46d0      	mov	r8, sl
   85862:	f7ff fe03 	bl	8546c <memmove>
   85866:	f8da 3004 	ldr.w	r3, [sl, #4]
   8586a:	e6d5      	b.n	85618 <_realloc_r+0xdc>
   8586c:	68ab      	ldr	r3, [r5, #8]
   8586e:	2a24      	cmp	r2, #36	; 0x24
   85870:	f8ca 3010 	str.w	r3, [sl, #16]
   85874:	68eb      	ldr	r3, [r5, #12]
   85876:	f8ca 3014 	str.w	r3, [sl, #20]
   8587a:	d018      	beq.n	858ae <_realloc_r+0x372>
   8587c:	3510      	adds	r5, #16
   8587e:	f10a 0318 	add.w	r3, sl, #24
   85882:	e7aa      	b.n	857da <_realloc_r+0x29e>
   85884:	692a      	ldr	r2, [r5, #16]
   85886:	f100 0318 	add.w	r3, r0, #24
   8588a:	6102      	str	r2, [r0, #16]
   8588c:	6969      	ldr	r1, [r5, #20]
   8588e:	f105 0218 	add.w	r2, r5, #24
   85892:	6141      	str	r1, [r0, #20]
   85894:	e731      	b.n	856fa <_realloc_r+0x1be>
   85896:	68a9      	ldr	r1, [r5, #8]
   85898:	2a24      	cmp	r2, #36	; 0x24
   8589a:	f8ca 1010 	str.w	r1, [sl, #16]
   8589e:	68e9      	ldr	r1, [r5, #12]
   858a0:	f8ca 1014 	str.w	r1, [sl, #20]
   858a4:	d00f      	beq.n	858c6 <_realloc_r+0x38a>
   858a6:	3510      	adds	r5, #16
   858a8:	f10a 0218 	add.w	r2, sl, #24
   858ac:	e6ef      	b.n	8568e <_realloc_r+0x152>
   858ae:	692a      	ldr	r2, [r5, #16]
   858b0:	f10a 0320 	add.w	r3, sl, #32
   858b4:	f8ca 2018 	str.w	r2, [sl, #24]
   858b8:	696a      	ldr	r2, [r5, #20]
   858ba:	3518      	adds	r5, #24
   858bc:	f8ca 201c 	str.w	r2, [sl, #28]
   858c0:	e78b      	b.n	857da <_realloc_r+0x29e>
   858c2:	463b      	mov	r3, r7
   858c4:	e762      	b.n	8578c <_realloc_r+0x250>
   858c6:	6929      	ldr	r1, [r5, #16]
   858c8:	f10a 0220 	add.w	r2, sl, #32
   858cc:	f8ca 1018 	str.w	r1, [sl, #24]
   858d0:	6969      	ldr	r1, [r5, #20]
   858d2:	3518      	adds	r5, #24
   858d4:	f8ca 101c 	str.w	r1, [sl, #28]
   858d8:	e6d9      	b.n	8568e <_realloc_r+0x152>
   858da:	4629      	mov	r1, r5
   858dc:	4638      	mov	r0, r7
   858de:	f8cd c004 	str.w	ip, [sp, #4]
   858e2:	f7ff fdc3 	bl	8546c <memmove>
   858e6:	f8dd c004 	ldr.w	ip, [sp, #4]
   858ea:	e755      	b.n	85798 <_realloc_r+0x25c>
   858ec:	68ab      	ldr	r3, [r5, #8]
   858ee:	2a24      	cmp	r2, #36	; 0x24
   858f0:	f8ca 3010 	str.w	r3, [sl, #16]
   858f4:	68eb      	ldr	r3, [r5, #12]
   858f6:	f8ca 3014 	str.w	r3, [sl, #20]
   858fa:	d003      	beq.n	85904 <_realloc_r+0x3c8>
   858fc:	3510      	adds	r5, #16
   858fe:	f10a 0318 	add.w	r3, sl, #24
   85902:	e743      	b.n	8578c <_realloc_r+0x250>
   85904:	692a      	ldr	r2, [r5, #16]
   85906:	f10a 0320 	add.w	r3, sl, #32
   8590a:	f8ca 2018 	str.w	r2, [sl, #24]
   8590e:	696a      	ldr	r2, [r5, #20]
   85910:	3518      	adds	r5, #24
   85912:	f8ca 201c 	str.w	r2, [sl, #28]
   85916:	e739      	b.n	8578c <_realloc_r+0x250>
   85918:	200705f4 	.word	0x200705f4

0008591c <lflush>:
   8591c:	8983      	ldrh	r3, [r0, #12]
   8591e:	f003 0309 	and.w	r3, r3, #9
   85922:	2b09      	cmp	r3, #9
   85924:	d001      	beq.n	8592a <lflush+0xe>
   85926:	2000      	movs	r0, #0
   85928:	4770      	bx	lr
   8592a:	f7fe be31 	b.w	84590 <fflush>
   8592e:	bf00      	nop

00085930 <__srefill_r>:
   85930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85932:	460c      	mov	r4, r1
   85934:	4605      	mov	r5, r0
   85936:	b110      	cbz	r0, 8593e <__srefill_r+0xe>
   85938:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8593a:	2b00      	cmp	r3, #0
   8593c:	d045      	beq.n	859ca <__srefill_r+0x9a>
   8593e:	89a3      	ldrh	r3, [r4, #12]
   85940:	b29a      	uxth	r2, r3
   85942:	0497      	lsls	r7, r2, #18
   85944:	d407      	bmi.n	85956 <__srefill_r+0x26>
   85946:	6e62      	ldr	r2, [r4, #100]	; 0x64
   85948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8594c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   85950:	6662      	str	r2, [r4, #100]	; 0x64
   85952:	81a3      	strh	r3, [r4, #12]
   85954:	b29a      	uxth	r2, r3
   85956:	2100      	movs	r1, #0
   85958:	0696      	lsls	r6, r2, #26
   8595a:	6061      	str	r1, [r4, #4]
   8595c:	d432      	bmi.n	859c4 <__srefill_r+0x94>
   8595e:	0750      	lsls	r0, r2, #29
   85960:	d521      	bpl.n	859a6 <__srefill_r+0x76>
   85962:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85964:	b161      	cbz	r1, 85980 <__srefill_r+0x50>
   85966:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8596a:	4299      	cmp	r1, r3
   8596c:	d002      	beq.n	85974 <__srefill_r+0x44>
   8596e:	4628      	mov	r0, r5
   85970:	f7fe ff76 	bl	84860 <_free_r>
   85974:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   85976:	2000      	movs	r0, #0
   85978:	6063      	str	r3, [r4, #4]
   8597a:	6320      	str	r0, [r4, #48]	; 0x30
   8597c:	2b00      	cmp	r3, #0
   8597e:	d13e      	bne.n	859fe <__srefill_r+0xce>
   85980:	6923      	ldr	r3, [r4, #16]
   85982:	2b00      	cmp	r3, #0
   85984:	d04b      	beq.n	85a1e <__srefill_r+0xee>
   85986:	89a7      	ldrh	r7, [r4, #12]
   85988:	b2be      	uxth	r6, r7
   8598a:	07b3      	lsls	r3, r6, #30
   8598c:	d120      	bne.n	859d0 <__srefill_r+0xa0>
   8598e:	6922      	ldr	r2, [r4, #16]
   85990:	4628      	mov	r0, r5
   85992:	6022      	str	r2, [r4, #0]
   85994:	6a25      	ldr	r5, [r4, #32]
   85996:	69e1      	ldr	r1, [r4, #28]
   85998:	6963      	ldr	r3, [r4, #20]
   8599a:	47a8      	blx	r5
   8599c:	2800      	cmp	r0, #0
   8599e:	6060      	str	r0, [r4, #4]
   859a0:	dd09      	ble.n	859b6 <__srefill_r+0x86>
   859a2:	2000      	movs	r0, #0
   859a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   859a6:	06d1      	lsls	r1, r2, #27
   859a8:	d53e      	bpl.n	85a28 <__srefill_r+0xf8>
   859aa:	0712      	lsls	r2, r2, #28
   859ac:	d42a      	bmi.n	85a04 <__srefill_r+0xd4>
   859ae:	f043 0304 	orr.w	r3, r3, #4
   859b2:	81a3      	strh	r3, [r4, #12]
   859b4:	e7e4      	b.n	85980 <__srefill_r+0x50>
   859b6:	89a3      	ldrh	r3, [r4, #12]
   859b8:	d01b      	beq.n	859f2 <__srefill_r+0xc2>
   859ba:	2200      	movs	r2, #0
   859bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   859c0:	81a3      	strh	r3, [r4, #12]
   859c2:	6062      	str	r2, [r4, #4]
   859c4:	f04f 30ff 	mov.w	r0, #4294967295
   859c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   859ca:	f7fe fe71 	bl	846b0 <__sinit>
   859ce:	e7b6      	b.n	8593e <__srefill_r+0xe>
   859d0:	4a19      	ldr	r2, [pc, #100]	; (85a38 <__srefill_r+0x108>)
   859d2:	2301      	movs	r3, #1
   859d4:	6810      	ldr	r0, [r2, #0]
   859d6:	81a3      	strh	r3, [r4, #12]
   859d8:	4918      	ldr	r1, [pc, #96]	; (85a3c <__srefill_r+0x10c>)
   859da:	f006 0609 	and.w	r6, r6, #9
   859de:	f7ff f9a7 	bl	84d30 <_fwalk>
   859e2:	2e09      	cmp	r6, #9
   859e4:	81a7      	strh	r7, [r4, #12]
   859e6:	d1d2      	bne.n	8598e <__srefill_r+0x5e>
   859e8:	4628      	mov	r0, r5
   859ea:	4621      	mov	r1, r4
   859ec:	f7fe fd16 	bl	8441c <__sflush_r>
   859f0:	e7cd      	b.n	8598e <__srefill_r+0x5e>
   859f2:	f043 0320 	orr.w	r3, r3, #32
   859f6:	f04f 30ff 	mov.w	r0, #4294967295
   859fa:	81a3      	strh	r3, [r4, #12]
   859fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   859fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   85a00:	6023      	str	r3, [r4, #0]
   85a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85a04:	4628      	mov	r0, r5
   85a06:	4621      	mov	r1, r4
   85a08:	f7fe fdac 	bl	84564 <_fflush_r>
   85a0c:	2800      	cmp	r0, #0
   85a0e:	d1d9      	bne.n	859c4 <__srefill_r+0x94>
   85a10:	89a3      	ldrh	r3, [r4, #12]
   85a12:	60a0      	str	r0, [r4, #8]
   85a14:	f023 0308 	bic.w	r3, r3, #8
   85a18:	61a0      	str	r0, [r4, #24]
   85a1a:	b29b      	uxth	r3, r3
   85a1c:	e7c7      	b.n	859ae <__srefill_r+0x7e>
   85a1e:	4628      	mov	r0, r5
   85a20:	4621      	mov	r1, r4
   85a22:	f7ff f9db 	bl	84ddc <__smakebuf_r>
   85a26:	e7ae      	b.n	85986 <__srefill_r+0x56>
   85a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85a2c:	2209      	movs	r2, #9
   85a2e:	602a      	str	r2, [r5, #0]
   85a30:	f04f 30ff 	mov.w	r0, #4294967295
   85a34:	81a3      	strh	r3, [r4, #12]
   85a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85a38:	00086428 	.word	0x00086428
   85a3c:	0008591d 	.word	0x0008591d

00085a40 <_sbrk_r>:
   85a40:	b538      	push	{r3, r4, r5, lr}
   85a42:	4c07      	ldr	r4, [pc, #28]	; (85a60 <_sbrk_r+0x20>)
   85a44:	2300      	movs	r3, #0
   85a46:	4605      	mov	r5, r0
   85a48:	4608      	mov	r0, r1
   85a4a:	6023      	str	r3, [r4, #0]
   85a4c:	f7fd f820 	bl	82a90 <_sbrk>
   85a50:	1c43      	adds	r3, r0, #1
   85a52:	d000      	beq.n	85a56 <_sbrk_r+0x16>
   85a54:	bd38      	pop	{r3, r4, r5, pc}
   85a56:	6823      	ldr	r3, [r4, #0]
   85a58:	2b00      	cmp	r3, #0
   85a5a:	d0fb      	beq.n	85a54 <_sbrk_r+0x14>
   85a5c:	602b      	str	r3, [r5, #0]
   85a5e:	bd38      	pop	{r3, r4, r5, pc}
   85a60:	20078e38 	.word	0x20078e38

00085a64 <__sread>:
   85a64:	b510      	push	{r4, lr}
   85a66:	460c      	mov	r4, r1
   85a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85a6c:	f000 f9bc 	bl	85de8 <_read_r>
   85a70:	2800      	cmp	r0, #0
   85a72:	db03      	blt.n	85a7c <__sread+0x18>
   85a74:	6d23      	ldr	r3, [r4, #80]	; 0x50
   85a76:	4403      	add	r3, r0
   85a78:	6523      	str	r3, [r4, #80]	; 0x50
   85a7a:	bd10      	pop	{r4, pc}
   85a7c:	89a3      	ldrh	r3, [r4, #12]
   85a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   85a82:	81a3      	strh	r3, [r4, #12]
   85a84:	bd10      	pop	{r4, pc}
   85a86:	bf00      	nop

00085a88 <__swrite>:
   85a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85a8c:	460c      	mov	r4, r1
   85a8e:	8989      	ldrh	r1, [r1, #12]
   85a90:	461d      	mov	r5, r3
   85a92:	05cb      	lsls	r3, r1, #23
   85a94:	4616      	mov	r6, r2
   85a96:	4607      	mov	r7, r0
   85a98:	d506      	bpl.n	85aa8 <__swrite+0x20>
   85a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85a9e:	2200      	movs	r2, #0
   85aa0:	2302      	movs	r3, #2
   85aa2:	f000 f98d 	bl	85dc0 <_lseek_r>
   85aa6:	89a1      	ldrh	r1, [r4, #12]
   85aa8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   85aac:	81a1      	strh	r1, [r4, #12]
   85aae:	4638      	mov	r0, r7
   85ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85ab4:	4632      	mov	r2, r6
   85ab6:	462b      	mov	r3, r5
   85ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85abc:	f000 b8a0 	b.w	85c00 <_write_r>

00085ac0 <__sseek>:
   85ac0:	b510      	push	{r4, lr}
   85ac2:	460c      	mov	r4, r1
   85ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85ac8:	f000 f97a 	bl	85dc0 <_lseek_r>
   85acc:	89a3      	ldrh	r3, [r4, #12]
   85ace:	1c42      	adds	r2, r0, #1
   85ad0:	bf0e      	itee	eq
   85ad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   85ad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   85ada:	6520      	strne	r0, [r4, #80]	; 0x50
   85adc:	81a3      	strh	r3, [r4, #12]
   85ade:	bd10      	pop	{r4, pc}

00085ae0 <__sclose>:
   85ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85ae4:	f000 b8f2 	b.w	85ccc <_close_r>

00085ae8 <__swbuf_r>:
   85ae8:	b570      	push	{r4, r5, r6, lr}
   85aea:	460d      	mov	r5, r1
   85aec:	4614      	mov	r4, r2
   85aee:	4606      	mov	r6, r0
   85af0:	b110      	cbz	r0, 85af8 <__swbuf_r+0x10>
   85af2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85af4:	2b00      	cmp	r3, #0
   85af6:	d048      	beq.n	85b8a <__swbuf_r+0xa2>
   85af8:	89a2      	ldrh	r2, [r4, #12]
   85afa:	69a3      	ldr	r3, [r4, #24]
   85afc:	b291      	uxth	r1, r2
   85afe:	0708      	lsls	r0, r1, #28
   85b00:	60a3      	str	r3, [r4, #8]
   85b02:	d538      	bpl.n	85b76 <__swbuf_r+0x8e>
   85b04:	6923      	ldr	r3, [r4, #16]
   85b06:	2b00      	cmp	r3, #0
   85b08:	d035      	beq.n	85b76 <__swbuf_r+0x8e>
   85b0a:	0489      	lsls	r1, r1, #18
   85b0c:	b2ed      	uxtb	r5, r5
   85b0e:	d515      	bpl.n	85b3c <__swbuf_r+0x54>
   85b10:	6822      	ldr	r2, [r4, #0]
   85b12:	6961      	ldr	r1, [r4, #20]
   85b14:	1ad3      	subs	r3, r2, r3
   85b16:	428b      	cmp	r3, r1
   85b18:	da1c      	bge.n	85b54 <__swbuf_r+0x6c>
   85b1a:	3301      	adds	r3, #1
   85b1c:	68a1      	ldr	r1, [r4, #8]
   85b1e:	1c50      	adds	r0, r2, #1
   85b20:	3901      	subs	r1, #1
   85b22:	60a1      	str	r1, [r4, #8]
   85b24:	6020      	str	r0, [r4, #0]
   85b26:	7015      	strb	r5, [r2, #0]
   85b28:	6962      	ldr	r2, [r4, #20]
   85b2a:	429a      	cmp	r2, r3
   85b2c:	d01a      	beq.n	85b64 <__swbuf_r+0x7c>
   85b2e:	89a3      	ldrh	r3, [r4, #12]
   85b30:	07db      	lsls	r3, r3, #31
   85b32:	d501      	bpl.n	85b38 <__swbuf_r+0x50>
   85b34:	2d0a      	cmp	r5, #10
   85b36:	d015      	beq.n	85b64 <__swbuf_r+0x7c>
   85b38:	4628      	mov	r0, r5
   85b3a:	bd70      	pop	{r4, r5, r6, pc}
   85b3c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   85b3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85b42:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   85b46:	81a2      	strh	r2, [r4, #12]
   85b48:	6822      	ldr	r2, [r4, #0]
   85b4a:	6661      	str	r1, [r4, #100]	; 0x64
   85b4c:	6961      	ldr	r1, [r4, #20]
   85b4e:	1ad3      	subs	r3, r2, r3
   85b50:	428b      	cmp	r3, r1
   85b52:	dbe2      	blt.n	85b1a <__swbuf_r+0x32>
   85b54:	4630      	mov	r0, r6
   85b56:	4621      	mov	r1, r4
   85b58:	f7fe fd04 	bl	84564 <_fflush_r>
   85b5c:	b940      	cbnz	r0, 85b70 <__swbuf_r+0x88>
   85b5e:	6822      	ldr	r2, [r4, #0]
   85b60:	2301      	movs	r3, #1
   85b62:	e7db      	b.n	85b1c <__swbuf_r+0x34>
   85b64:	4630      	mov	r0, r6
   85b66:	4621      	mov	r1, r4
   85b68:	f7fe fcfc 	bl	84564 <_fflush_r>
   85b6c:	2800      	cmp	r0, #0
   85b6e:	d0e3      	beq.n	85b38 <__swbuf_r+0x50>
   85b70:	f04f 30ff 	mov.w	r0, #4294967295
   85b74:	bd70      	pop	{r4, r5, r6, pc}
   85b76:	4630      	mov	r0, r6
   85b78:	4621      	mov	r1, r4
   85b7a:	f7fe fbdd 	bl	84338 <__swsetup_r>
   85b7e:	2800      	cmp	r0, #0
   85b80:	d1f6      	bne.n	85b70 <__swbuf_r+0x88>
   85b82:	89a2      	ldrh	r2, [r4, #12]
   85b84:	6923      	ldr	r3, [r4, #16]
   85b86:	b291      	uxth	r1, r2
   85b88:	e7bf      	b.n	85b0a <__swbuf_r+0x22>
   85b8a:	f7fe fd91 	bl	846b0 <__sinit>
   85b8e:	e7b3      	b.n	85af8 <__swbuf_r+0x10>

00085b90 <_wcrtomb_r>:
   85b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85b94:	4605      	mov	r5, r0
   85b96:	b086      	sub	sp, #24
   85b98:	461e      	mov	r6, r3
   85b9a:	460c      	mov	r4, r1
   85b9c:	b1a1      	cbz	r1, 85bc8 <_wcrtomb_r+0x38>
   85b9e:	4b10      	ldr	r3, [pc, #64]	; (85be0 <_wcrtomb_r+0x50>)
   85ba0:	4617      	mov	r7, r2
   85ba2:	f8d3 8000 	ldr.w	r8, [r3]
   85ba6:	f7ff f90f 	bl	84dc8 <__locale_charset>
   85baa:	9600      	str	r6, [sp, #0]
   85bac:	4603      	mov	r3, r0
   85bae:	4621      	mov	r1, r4
   85bb0:	463a      	mov	r2, r7
   85bb2:	4628      	mov	r0, r5
   85bb4:	47c0      	blx	r8
   85bb6:	1c43      	adds	r3, r0, #1
   85bb8:	d103      	bne.n	85bc2 <_wcrtomb_r+0x32>
   85bba:	2200      	movs	r2, #0
   85bbc:	238a      	movs	r3, #138	; 0x8a
   85bbe:	6032      	str	r2, [r6, #0]
   85bc0:	602b      	str	r3, [r5, #0]
   85bc2:	b006      	add	sp, #24
   85bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85bc8:	4b05      	ldr	r3, [pc, #20]	; (85be0 <_wcrtomb_r+0x50>)
   85bca:	681f      	ldr	r7, [r3, #0]
   85bcc:	f7ff f8fc 	bl	84dc8 <__locale_charset>
   85bd0:	9600      	str	r6, [sp, #0]
   85bd2:	4603      	mov	r3, r0
   85bd4:	4622      	mov	r2, r4
   85bd6:	4628      	mov	r0, r5
   85bd8:	a903      	add	r1, sp, #12
   85bda:	47b8      	blx	r7
   85bdc:	e7eb      	b.n	85bb6 <_wcrtomb_r+0x26>
   85bde:	bf00      	nop
   85be0:	20070a04 	.word	0x20070a04

00085be4 <__ascii_wctomb>:
   85be4:	b121      	cbz	r1, 85bf0 <__ascii_wctomb+0xc>
   85be6:	2aff      	cmp	r2, #255	; 0xff
   85be8:	d804      	bhi.n	85bf4 <__ascii_wctomb+0x10>
   85bea:	700a      	strb	r2, [r1, #0]
   85bec:	2001      	movs	r0, #1
   85bee:	4770      	bx	lr
   85bf0:	4608      	mov	r0, r1
   85bf2:	4770      	bx	lr
   85bf4:	238a      	movs	r3, #138	; 0x8a
   85bf6:	6003      	str	r3, [r0, #0]
   85bf8:	f04f 30ff 	mov.w	r0, #4294967295
   85bfc:	4770      	bx	lr
   85bfe:	bf00      	nop

00085c00 <_write_r>:
   85c00:	b570      	push	{r4, r5, r6, lr}
   85c02:	4c08      	ldr	r4, [pc, #32]	; (85c24 <_write_r+0x24>)
   85c04:	4606      	mov	r6, r0
   85c06:	2500      	movs	r5, #0
   85c08:	4608      	mov	r0, r1
   85c0a:	4611      	mov	r1, r2
   85c0c:	461a      	mov	r2, r3
   85c0e:	6025      	str	r5, [r4, #0]
   85c10:	f7fa fc7c 	bl	8050c <_write>
   85c14:	1c43      	adds	r3, r0, #1
   85c16:	d000      	beq.n	85c1a <_write_r+0x1a>
   85c18:	bd70      	pop	{r4, r5, r6, pc}
   85c1a:	6823      	ldr	r3, [r4, #0]
   85c1c:	2b00      	cmp	r3, #0
   85c1e:	d0fb      	beq.n	85c18 <_write_r+0x18>
   85c20:	6033      	str	r3, [r6, #0]
   85c22:	bd70      	pop	{r4, r5, r6, pc}
   85c24:	20078e38 	.word	0x20078e38

00085c28 <__register_exitproc>:
   85c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85c2c:	4c25      	ldr	r4, [pc, #148]	; (85cc4 <__register_exitproc+0x9c>)
   85c2e:	4606      	mov	r6, r0
   85c30:	6825      	ldr	r5, [r4, #0]
   85c32:	4688      	mov	r8, r1
   85c34:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   85c38:	4692      	mov	sl, r2
   85c3a:	4699      	mov	r9, r3
   85c3c:	b3c4      	cbz	r4, 85cb0 <__register_exitproc+0x88>
   85c3e:	6860      	ldr	r0, [r4, #4]
   85c40:	281f      	cmp	r0, #31
   85c42:	dc17      	bgt.n	85c74 <__register_exitproc+0x4c>
   85c44:	1c41      	adds	r1, r0, #1
   85c46:	b176      	cbz	r6, 85c66 <__register_exitproc+0x3e>
   85c48:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   85c4c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   85c50:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   85c54:	2201      	movs	r2, #1
   85c56:	4082      	lsls	r2, r0
   85c58:	4315      	orrs	r5, r2
   85c5a:	2e02      	cmp	r6, #2
   85c5c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   85c60:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   85c64:	d01e      	beq.n	85ca4 <__register_exitproc+0x7c>
   85c66:	1c83      	adds	r3, r0, #2
   85c68:	6061      	str	r1, [r4, #4]
   85c6a:	2000      	movs	r0, #0
   85c6c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   85c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85c74:	4b14      	ldr	r3, [pc, #80]	; (85cc8 <__register_exitproc+0xa0>)
   85c76:	b303      	cbz	r3, 85cba <__register_exitproc+0x92>
   85c78:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85c7c:	f7ff f91e 	bl	84ebc <malloc>
   85c80:	4604      	mov	r4, r0
   85c82:	b1d0      	cbz	r0, 85cba <__register_exitproc+0x92>
   85c84:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   85c88:	2700      	movs	r7, #0
   85c8a:	e884 0088 	stmia.w	r4, {r3, r7}
   85c8e:	4638      	mov	r0, r7
   85c90:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   85c94:	2101      	movs	r1, #1
   85c96:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   85c9a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   85c9e:	2e00      	cmp	r6, #0
   85ca0:	d0e1      	beq.n	85c66 <__register_exitproc+0x3e>
   85ca2:	e7d1      	b.n	85c48 <__register_exitproc+0x20>
   85ca4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   85ca8:	431a      	orrs	r2, r3
   85caa:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   85cae:	e7da      	b.n	85c66 <__register_exitproc+0x3e>
   85cb0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   85cb4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   85cb8:	e7c1      	b.n	85c3e <__register_exitproc+0x16>
   85cba:	f04f 30ff 	mov.w	r0, #4294967295
   85cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85cc2:	bf00      	nop
   85cc4:	00086428 	.word	0x00086428
   85cc8:	00084ebd 	.word	0x00084ebd

00085ccc <_close_r>:
   85ccc:	b538      	push	{r3, r4, r5, lr}
   85cce:	4c07      	ldr	r4, [pc, #28]	; (85cec <_close_r+0x20>)
   85cd0:	2300      	movs	r3, #0
   85cd2:	4605      	mov	r5, r0
   85cd4:	4608      	mov	r0, r1
   85cd6:	6023      	str	r3, [r4, #0]
   85cd8:	f7fc fef4 	bl	82ac4 <_close>
   85cdc:	1c43      	adds	r3, r0, #1
   85cde:	d000      	beq.n	85ce2 <_close_r+0x16>
   85ce0:	bd38      	pop	{r3, r4, r5, pc}
   85ce2:	6823      	ldr	r3, [r4, #0]
   85ce4:	2b00      	cmp	r3, #0
   85ce6:	d0fb      	beq.n	85ce0 <_close_r+0x14>
   85ce8:	602b      	str	r3, [r5, #0]
   85cea:	bd38      	pop	{r3, r4, r5, pc}
   85cec:	20078e38 	.word	0x20078e38

00085cf0 <_fclose_r>:
   85cf0:	2900      	cmp	r1, #0
   85cf2:	d03d      	beq.n	85d70 <_fclose_r+0x80>
   85cf4:	b570      	push	{r4, r5, r6, lr}
   85cf6:	4605      	mov	r5, r0
   85cf8:	460c      	mov	r4, r1
   85cfa:	b108      	cbz	r0, 85d00 <_fclose_r+0x10>
   85cfc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85cfe:	b37b      	cbz	r3, 85d60 <_fclose_r+0x70>
   85d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85d04:	b90b      	cbnz	r3, 85d0a <_fclose_r+0x1a>
   85d06:	2000      	movs	r0, #0
   85d08:	bd70      	pop	{r4, r5, r6, pc}
   85d0a:	4628      	mov	r0, r5
   85d0c:	4621      	mov	r1, r4
   85d0e:	f7fe fb85 	bl	8441c <__sflush_r>
   85d12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85d14:	4606      	mov	r6, r0
   85d16:	b133      	cbz	r3, 85d26 <_fclose_r+0x36>
   85d18:	4628      	mov	r0, r5
   85d1a:	69e1      	ldr	r1, [r4, #28]
   85d1c:	4798      	blx	r3
   85d1e:	2800      	cmp	r0, #0
   85d20:	bfb8      	it	lt
   85d22:	f04f 36ff 	movlt.w	r6, #4294967295
   85d26:	89a3      	ldrh	r3, [r4, #12]
   85d28:	061b      	lsls	r3, r3, #24
   85d2a:	d41c      	bmi.n	85d66 <_fclose_r+0x76>
   85d2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85d2e:	b141      	cbz	r1, 85d42 <_fclose_r+0x52>
   85d30:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85d34:	4299      	cmp	r1, r3
   85d36:	d002      	beq.n	85d3e <_fclose_r+0x4e>
   85d38:	4628      	mov	r0, r5
   85d3a:	f7fe fd91 	bl	84860 <_free_r>
   85d3e:	2300      	movs	r3, #0
   85d40:	6323      	str	r3, [r4, #48]	; 0x30
   85d42:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85d44:	b121      	cbz	r1, 85d50 <_fclose_r+0x60>
   85d46:	4628      	mov	r0, r5
   85d48:	f7fe fd8a 	bl	84860 <_free_r>
   85d4c:	2300      	movs	r3, #0
   85d4e:	6463      	str	r3, [r4, #68]	; 0x44
   85d50:	f7fe fcb4 	bl	846bc <__sfp_lock_acquire>
   85d54:	2300      	movs	r3, #0
   85d56:	81a3      	strh	r3, [r4, #12]
   85d58:	f7fe fcb2 	bl	846c0 <__sfp_lock_release>
   85d5c:	4630      	mov	r0, r6
   85d5e:	bd70      	pop	{r4, r5, r6, pc}
   85d60:	f7fe fca6 	bl	846b0 <__sinit>
   85d64:	e7cc      	b.n	85d00 <_fclose_r+0x10>
   85d66:	4628      	mov	r0, r5
   85d68:	6921      	ldr	r1, [r4, #16]
   85d6a:	f7fe fd79 	bl	84860 <_free_r>
   85d6e:	e7dd      	b.n	85d2c <_fclose_r+0x3c>
   85d70:	2000      	movs	r0, #0
   85d72:	4770      	bx	lr

00085d74 <_fstat_r>:
   85d74:	b538      	push	{r3, r4, r5, lr}
   85d76:	4c08      	ldr	r4, [pc, #32]	; (85d98 <_fstat_r+0x24>)
   85d78:	2300      	movs	r3, #0
   85d7a:	4605      	mov	r5, r0
   85d7c:	4608      	mov	r0, r1
   85d7e:	4611      	mov	r1, r2
   85d80:	6023      	str	r3, [r4, #0]
   85d82:	f7fc fea3 	bl	82acc <_fstat>
   85d86:	1c43      	adds	r3, r0, #1
   85d88:	d000      	beq.n	85d8c <_fstat_r+0x18>
   85d8a:	bd38      	pop	{r3, r4, r5, pc}
   85d8c:	6823      	ldr	r3, [r4, #0]
   85d8e:	2b00      	cmp	r3, #0
   85d90:	d0fb      	beq.n	85d8a <_fstat_r+0x16>
   85d92:	602b      	str	r3, [r5, #0]
   85d94:	bd38      	pop	{r3, r4, r5, pc}
   85d96:	bf00      	nop
   85d98:	20078e38 	.word	0x20078e38

00085d9c <_isatty_r>:
   85d9c:	b538      	push	{r3, r4, r5, lr}
   85d9e:	4c07      	ldr	r4, [pc, #28]	; (85dbc <_isatty_r+0x20>)
   85da0:	2300      	movs	r3, #0
   85da2:	4605      	mov	r5, r0
   85da4:	4608      	mov	r0, r1
   85da6:	6023      	str	r3, [r4, #0]
   85da8:	f7fc fe96 	bl	82ad8 <_isatty>
   85dac:	1c43      	adds	r3, r0, #1
   85dae:	d000      	beq.n	85db2 <_isatty_r+0x16>
   85db0:	bd38      	pop	{r3, r4, r5, pc}
   85db2:	6823      	ldr	r3, [r4, #0]
   85db4:	2b00      	cmp	r3, #0
   85db6:	d0fb      	beq.n	85db0 <_isatty_r+0x14>
   85db8:	602b      	str	r3, [r5, #0]
   85dba:	bd38      	pop	{r3, r4, r5, pc}
   85dbc:	20078e38 	.word	0x20078e38

00085dc0 <_lseek_r>:
   85dc0:	b570      	push	{r4, r5, r6, lr}
   85dc2:	4c08      	ldr	r4, [pc, #32]	; (85de4 <_lseek_r+0x24>)
   85dc4:	4606      	mov	r6, r0
   85dc6:	2500      	movs	r5, #0
   85dc8:	4608      	mov	r0, r1
   85dca:	4611      	mov	r1, r2
   85dcc:	461a      	mov	r2, r3
   85dce:	6025      	str	r5, [r4, #0]
   85dd0:	f7fc fe84 	bl	82adc <_lseek>
   85dd4:	1c43      	adds	r3, r0, #1
   85dd6:	d000      	beq.n	85dda <_lseek_r+0x1a>
   85dd8:	bd70      	pop	{r4, r5, r6, pc}
   85dda:	6823      	ldr	r3, [r4, #0]
   85ddc:	2b00      	cmp	r3, #0
   85dde:	d0fb      	beq.n	85dd8 <_lseek_r+0x18>
   85de0:	6033      	str	r3, [r6, #0]
   85de2:	bd70      	pop	{r4, r5, r6, pc}
   85de4:	20078e38 	.word	0x20078e38

00085de8 <_read_r>:
   85de8:	b570      	push	{r4, r5, r6, lr}
   85dea:	4c08      	ldr	r4, [pc, #32]	; (85e0c <_read_r+0x24>)
   85dec:	4606      	mov	r6, r0
   85dee:	2500      	movs	r5, #0
   85df0:	4608      	mov	r0, r1
   85df2:	4611      	mov	r1, r2
   85df4:	461a      	mov	r2, r3
   85df6:	6025      	str	r5, [r4, #0]
   85df8:	f7fa f9dc 	bl	801b4 <_read>
   85dfc:	1c43      	adds	r3, r0, #1
   85dfe:	d000      	beq.n	85e02 <_read_r+0x1a>
   85e00:	bd70      	pop	{r4, r5, r6, pc}
   85e02:	6823      	ldr	r3, [r4, #0]
   85e04:	2b00      	cmp	r3, #0
   85e06:	d0fb      	beq.n	85e00 <_read_r+0x18>
   85e08:	6033      	str	r3, [r6, #0]
   85e0a:	bd70      	pop	{r4, r5, r6, pc}
   85e0c:	20078e38 	.word	0x20078e38

00085e10 <__aeabi_uldivmod>:
   85e10:	b953      	cbnz	r3, 85e28 <__aeabi_uldivmod+0x18>
   85e12:	b94a      	cbnz	r2, 85e28 <__aeabi_uldivmod+0x18>
   85e14:	2900      	cmp	r1, #0
   85e16:	bf08      	it	eq
   85e18:	2800      	cmpeq	r0, #0
   85e1a:	bf1c      	itt	ne
   85e1c:	f04f 31ff 	movne.w	r1, #4294967295
   85e20:	f04f 30ff 	movne.w	r0, #4294967295
   85e24:	f000 b83c 	b.w	85ea0 <__aeabi_idiv0>
   85e28:	b082      	sub	sp, #8
   85e2a:	46ec      	mov	ip, sp
   85e2c:	e92d 5000 	stmdb	sp!, {ip, lr}
   85e30:	f000 f81e 	bl	85e70 <__gnu_uldivmod_helper>
   85e34:	f8dd e004 	ldr.w	lr, [sp, #4]
   85e38:	b002      	add	sp, #8
   85e3a:	bc0c      	pop	{r2, r3}
   85e3c:	4770      	bx	lr
   85e3e:	bf00      	nop

00085e40 <__gnu_ldivmod_helper>:
   85e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85e44:	9c06      	ldr	r4, [sp, #24]
   85e46:	4690      	mov	r8, r2
   85e48:	4606      	mov	r6, r0
   85e4a:	460f      	mov	r7, r1
   85e4c:	461d      	mov	r5, r3
   85e4e:	f000 f829 	bl	85ea4 <__divdi3>
   85e52:	fb08 fc01 	mul.w	ip, r8, r1
   85e56:	fba8 2300 	umull	r2, r3, r8, r0
   85e5a:	fb00 c505 	mla	r5, r0, r5, ip
   85e5e:	1ab2      	subs	r2, r6, r2
   85e60:	442b      	add	r3, r5
   85e62:	eb67 0303 	sbc.w	r3, r7, r3
   85e66:	4686      	mov	lr, r0
   85e68:	e9c4 2300 	strd	r2, r3, [r4]
   85e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085e70 <__gnu_uldivmod_helper>:
   85e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85e74:	9e08      	ldr	r6, [sp, #32]
   85e76:	4617      	mov	r7, r2
   85e78:	4680      	mov	r8, r0
   85e7a:	4689      	mov	r9, r1
   85e7c:	461d      	mov	r5, r3
   85e7e:	f000 f967 	bl	86150 <__udivdi3>
   85e82:	fb00 f305 	mul.w	r3, r0, r5
   85e86:	fba0 4507 	umull	r4, r5, r0, r7
   85e8a:	fb07 3701 	mla	r7, r7, r1, r3
   85e8e:	ebb8 0404 	subs.w	r4, r8, r4
   85e92:	443d      	add	r5, r7
   85e94:	eb69 0505 	sbc.w	r5, r9, r5
   85e98:	e9c6 4500 	strd	r4, r5, [r6]
   85e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085ea0 <__aeabi_idiv0>:
   85ea0:	4770      	bx	lr
   85ea2:	bf00      	nop

00085ea4 <__divdi3>:
   85ea4:	2900      	cmp	r1, #0
   85ea6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   85eaa:	f2c0 80a8 	blt.w	85ffe <__divdi3+0x15a>
   85eae:	2600      	movs	r6, #0
   85eb0:	2b00      	cmp	r3, #0
   85eb2:	f2c0 809e 	blt.w	85ff2 <__divdi3+0x14e>
   85eb6:	4681      	mov	r9, r0
   85eb8:	468e      	mov	lr, r1
   85eba:	4690      	mov	r8, r2
   85ebc:	469c      	mov	ip, r3
   85ebe:	4617      	mov	r7, r2
   85ec0:	4604      	mov	r4, r0
   85ec2:	460d      	mov	r5, r1
   85ec4:	2b00      	cmp	r3, #0
   85ec6:	d13d      	bne.n	85f44 <__divdi3+0xa0>
   85ec8:	428a      	cmp	r2, r1
   85eca:	d959      	bls.n	85f80 <__divdi3+0xdc>
   85ecc:	fab2 f382 	clz	r3, r2
   85ed0:	b13b      	cbz	r3, 85ee2 <__divdi3+0x3e>
   85ed2:	f1c3 0220 	rsb	r2, r3, #32
   85ed6:	409d      	lsls	r5, r3
   85ed8:	fa20 f202 	lsr.w	r2, r0, r2
   85edc:	409f      	lsls	r7, r3
   85ede:	4315      	orrs	r5, r2
   85ee0:	409c      	lsls	r4, r3
   85ee2:	0c39      	lsrs	r1, r7, #16
   85ee4:	fbb5 f0f1 	udiv	r0, r5, r1
   85ee8:	fa1f fe87 	uxth.w	lr, r7
   85eec:	fb01 5510 	mls	r5, r1, r0, r5
   85ef0:	fb0e f300 	mul.w	r3, lr, r0
   85ef4:	0c22      	lsrs	r2, r4, #16
   85ef6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   85efa:	42ab      	cmp	r3, r5
   85efc:	d909      	bls.n	85f12 <__divdi3+0x6e>
   85efe:	19ed      	adds	r5, r5, r7
   85f00:	f100 32ff 	add.w	r2, r0, #4294967295
   85f04:	f080 810b 	bcs.w	8611e <__divdi3+0x27a>
   85f08:	42ab      	cmp	r3, r5
   85f0a:	f240 8108 	bls.w	8611e <__divdi3+0x27a>
   85f0e:	3802      	subs	r0, #2
   85f10:	443d      	add	r5, r7
   85f12:	1aed      	subs	r5, r5, r3
   85f14:	fbb5 f3f1 	udiv	r3, r5, r1
   85f18:	fb01 5513 	mls	r5, r1, r3, r5
   85f1c:	fb0e fe03 	mul.w	lr, lr, r3
   85f20:	b2a4      	uxth	r4, r4
   85f22:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   85f26:	45ae      	cmp	lr, r5
   85f28:	d908      	bls.n	85f3c <__divdi3+0x98>
   85f2a:	19ed      	adds	r5, r5, r7
   85f2c:	f103 32ff 	add.w	r2, r3, #4294967295
   85f30:	f080 80f7 	bcs.w	86122 <__divdi3+0x27e>
   85f34:	45ae      	cmp	lr, r5
   85f36:	f240 80f4 	bls.w	86122 <__divdi3+0x27e>
   85f3a:	3b02      	subs	r3, #2
   85f3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   85f40:	2200      	movs	r2, #0
   85f42:	e003      	b.n	85f4c <__divdi3+0xa8>
   85f44:	428b      	cmp	r3, r1
   85f46:	d90f      	bls.n	85f68 <__divdi3+0xc4>
   85f48:	2200      	movs	r2, #0
   85f4a:	4613      	mov	r3, r2
   85f4c:	1c34      	adds	r4, r6, #0
   85f4e:	bf18      	it	ne
   85f50:	2401      	movne	r4, #1
   85f52:	4260      	negs	r0, r4
   85f54:	f04f 0500 	mov.w	r5, #0
   85f58:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   85f5c:	4058      	eors	r0, r3
   85f5e:	4051      	eors	r1, r2
   85f60:	1900      	adds	r0, r0, r4
   85f62:	4169      	adcs	r1, r5
   85f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85f68:	fab3 f283 	clz	r2, r3
   85f6c:	2a00      	cmp	r2, #0
   85f6e:	f040 8089 	bne.w	86084 <__divdi3+0x1e0>
   85f72:	428b      	cmp	r3, r1
   85f74:	d302      	bcc.n	85f7c <__divdi3+0xd8>
   85f76:	4580      	cmp	r8, r0
   85f78:	f200 80e2 	bhi.w	86140 <__divdi3+0x29c>
   85f7c:	2301      	movs	r3, #1
   85f7e:	e7e5      	b.n	85f4c <__divdi3+0xa8>
   85f80:	b912      	cbnz	r2, 85f88 <__divdi3+0xe4>
   85f82:	2301      	movs	r3, #1
   85f84:	fbb3 f7f2 	udiv	r7, r3, r2
   85f88:	fab7 f887 	clz	r8, r7
   85f8c:	f1b8 0f00 	cmp.w	r8, #0
   85f90:	d13b      	bne.n	8600a <__divdi3+0x166>
   85f92:	1bed      	subs	r5, r5, r7
   85f94:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   85f98:	fa1f fe87 	uxth.w	lr, r7
   85f9c:	2201      	movs	r2, #1
   85f9e:	fbb5 f0fc 	udiv	r0, r5, ip
   85fa2:	fb0c 5510 	mls	r5, ip, r0, r5
   85fa6:	fb0e f300 	mul.w	r3, lr, r0
   85faa:	0c21      	lsrs	r1, r4, #16
   85fac:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   85fb0:	42ab      	cmp	r3, r5
   85fb2:	d907      	bls.n	85fc4 <__divdi3+0x120>
   85fb4:	19ed      	adds	r5, r5, r7
   85fb6:	f100 31ff 	add.w	r1, r0, #4294967295
   85fba:	d202      	bcs.n	85fc2 <__divdi3+0x11e>
   85fbc:	42ab      	cmp	r3, r5
   85fbe:	f200 80c3 	bhi.w	86148 <__divdi3+0x2a4>
   85fc2:	4608      	mov	r0, r1
   85fc4:	1aed      	subs	r5, r5, r3
   85fc6:	fbb5 f3fc 	udiv	r3, r5, ip
   85fca:	fb0c 5513 	mls	r5, ip, r3, r5
   85fce:	fb0e fe03 	mul.w	lr, lr, r3
   85fd2:	b2a4      	uxth	r4, r4
   85fd4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   85fd8:	45ae      	cmp	lr, r5
   85fda:	d907      	bls.n	85fec <__divdi3+0x148>
   85fdc:	19ed      	adds	r5, r5, r7
   85fde:	f103 31ff 	add.w	r1, r3, #4294967295
   85fe2:	d202      	bcs.n	85fea <__divdi3+0x146>
   85fe4:	45ae      	cmp	lr, r5
   85fe6:	f200 80ad 	bhi.w	86144 <__divdi3+0x2a0>
   85fea:	460b      	mov	r3, r1
   85fec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   85ff0:	e7ac      	b.n	85f4c <__divdi3+0xa8>
   85ff2:	4252      	negs	r2, r2
   85ff4:	ea6f 0606 	mvn.w	r6, r6
   85ff8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85ffc:	e75b      	b.n	85eb6 <__divdi3+0x12>
   85ffe:	4240      	negs	r0, r0
   86000:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   86004:	f04f 36ff 	mov.w	r6, #4294967295
   86008:	e752      	b.n	85eb0 <__divdi3+0xc>
   8600a:	fa07 f708 	lsl.w	r7, r7, r8
   8600e:	f1c8 0220 	rsb	r2, r8, #32
   86012:	fa25 f302 	lsr.w	r3, r5, r2
   86016:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8601a:	fbb3 f1fc 	udiv	r1, r3, ip
   8601e:	fa1f fe87 	uxth.w	lr, r7
   86022:	fb0c 3311 	mls	r3, ip, r1, r3
   86026:	fa24 f202 	lsr.w	r2, r4, r2
   8602a:	fa05 f508 	lsl.w	r5, r5, r8
   8602e:	fb0e f901 	mul.w	r9, lr, r1
   86032:	432a      	orrs	r2, r5
   86034:	0c10      	lsrs	r0, r2, #16
   86036:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   8603a:	4599      	cmp	r9, r3
   8603c:	fa04 f408 	lsl.w	r4, r4, r8
   86040:	d907      	bls.n	86052 <__divdi3+0x1ae>
   86042:	19db      	adds	r3, r3, r7
   86044:	f101 30ff 	add.w	r0, r1, #4294967295
   86048:	d278      	bcs.n	8613c <__divdi3+0x298>
   8604a:	4599      	cmp	r9, r3
   8604c:	d976      	bls.n	8613c <__divdi3+0x298>
   8604e:	3902      	subs	r1, #2
   86050:	443b      	add	r3, r7
   86052:	ebc9 0303 	rsb	r3, r9, r3
   86056:	fbb3 f0fc 	udiv	r0, r3, ip
   8605a:	fb0c 3310 	mls	r3, ip, r0, r3
   8605e:	fb0e f500 	mul.w	r5, lr, r0
   86062:	b292      	uxth	r2, r2
   86064:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   86068:	429d      	cmp	r5, r3
   8606a:	d907      	bls.n	8607c <__divdi3+0x1d8>
   8606c:	19db      	adds	r3, r3, r7
   8606e:	f100 32ff 	add.w	r2, r0, #4294967295
   86072:	d25f      	bcs.n	86134 <__divdi3+0x290>
   86074:	429d      	cmp	r5, r3
   86076:	d95d      	bls.n	86134 <__divdi3+0x290>
   86078:	3802      	subs	r0, #2
   8607a:	443b      	add	r3, r7
   8607c:	1b5d      	subs	r5, r3, r5
   8607e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   86082:	e78c      	b.n	85f9e <__divdi3+0xfa>
   86084:	f1c2 0320 	rsb	r3, r2, #32
   86088:	fa28 f103 	lsr.w	r1, r8, r3
   8608c:	fa0c fc02 	lsl.w	ip, ip, r2
   86090:	ea41 0c0c 	orr.w	ip, r1, ip
   86094:	ea4f 401c 	mov.w	r0, ip, lsr #16
   86098:	fa2e f103 	lsr.w	r1, lr, r3
   8609c:	fbb1 f5f0 	udiv	r5, r1, r0
   860a0:	fa1f f78c 	uxth.w	r7, ip
   860a4:	fb00 1115 	mls	r1, r0, r5, r1
   860a8:	fa29 f303 	lsr.w	r3, r9, r3
   860ac:	fa0e fe02 	lsl.w	lr, lr, r2
   860b0:	fb07 f905 	mul.w	r9, r7, r5
   860b4:	ea43 0e0e 	orr.w	lr, r3, lr
   860b8:	ea4f 431e 	mov.w	r3, lr, lsr #16
   860bc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   860c0:	4589      	cmp	r9, r1
   860c2:	fa08 f802 	lsl.w	r8, r8, r2
   860c6:	d908      	bls.n	860da <__divdi3+0x236>
   860c8:	eb11 010c 	adds.w	r1, r1, ip
   860cc:	f105 33ff 	add.w	r3, r5, #4294967295
   860d0:	d232      	bcs.n	86138 <__divdi3+0x294>
   860d2:	4589      	cmp	r9, r1
   860d4:	d930      	bls.n	86138 <__divdi3+0x294>
   860d6:	3d02      	subs	r5, #2
   860d8:	4461      	add	r1, ip
   860da:	ebc9 0101 	rsb	r1, r9, r1
   860de:	fbb1 f3f0 	udiv	r3, r1, r0
   860e2:	fb00 1113 	mls	r1, r0, r3, r1
   860e6:	fb07 f703 	mul.w	r7, r7, r3
   860ea:	fa1f fe8e 	uxth.w	lr, lr
   860ee:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   860f2:	4577      	cmp	r7, lr
   860f4:	d908      	bls.n	86108 <__divdi3+0x264>
   860f6:	eb1e 0e0c 	adds.w	lr, lr, ip
   860fa:	f103 31ff 	add.w	r1, r3, #4294967295
   860fe:	d217      	bcs.n	86130 <__divdi3+0x28c>
   86100:	4577      	cmp	r7, lr
   86102:	d915      	bls.n	86130 <__divdi3+0x28c>
   86104:	3b02      	subs	r3, #2
   86106:	44e6      	add	lr, ip
   86108:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   8610c:	fba3 8908 	umull	r8, r9, r3, r8
   86110:	ebc7 0e0e 	rsb	lr, r7, lr
   86114:	45ce      	cmp	lr, r9
   86116:	d309      	bcc.n	8612c <__divdi3+0x288>
   86118:	d005      	beq.n	86126 <__divdi3+0x282>
   8611a:	2200      	movs	r2, #0
   8611c:	e716      	b.n	85f4c <__divdi3+0xa8>
   8611e:	4610      	mov	r0, r2
   86120:	e6f7      	b.n	85f12 <__divdi3+0x6e>
   86122:	4613      	mov	r3, r2
   86124:	e70a      	b.n	85f3c <__divdi3+0x98>
   86126:	4094      	lsls	r4, r2
   86128:	4544      	cmp	r4, r8
   8612a:	d2f6      	bcs.n	8611a <__divdi3+0x276>
   8612c:	3b01      	subs	r3, #1
   8612e:	e7f4      	b.n	8611a <__divdi3+0x276>
   86130:	460b      	mov	r3, r1
   86132:	e7e9      	b.n	86108 <__divdi3+0x264>
   86134:	4610      	mov	r0, r2
   86136:	e7a1      	b.n	8607c <__divdi3+0x1d8>
   86138:	461d      	mov	r5, r3
   8613a:	e7ce      	b.n	860da <__divdi3+0x236>
   8613c:	4601      	mov	r1, r0
   8613e:	e788      	b.n	86052 <__divdi3+0x1ae>
   86140:	4613      	mov	r3, r2
   86142:	e703      	b.n	85f4c <__divdi3+0xa8>
   86144:	3b02      	subs	r3, #2
   86146:	e751      	b.n	85fec <__divdi3+0x148>
   86148:	3802      	subs	r0, #2
   8614a:	443d      	add	r5, r7
   8614c:	e73a      	b.n	85fc4 <__divdi3+0x120>
   8614e:	bf00      	nop

00086150 <__udivdi3>:
   86150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86154:	2b00      	cmp	r3, #0
   86156:	d144      	bne.n	861e2 <__udivdi3+0x92>
   86158:	428a      	cmp	r2, r1
   8615a:	4615      	mov	r5, r2
   8615c:	4604      	mov	r4, r0
   8615e:	d94f      	bls.n	86200 <__udivdi3+0xb0>
   86160:	fab2 f782 	clz	r7, r2
   86164:	460e      	mov	r6, r1
   86166:	b14f      	cbz	r7, 8617c <__udivdi3+0x2c>
   86168:	f1c7 0320 	rsb	r3, r7, #32
   8616c:	40b9      	lsls	r1, r7
   8616e:	fa20 f603 	lsr.w	r6, r0, r3
   86172:	fa02 f507 	lsl.w	r5, r2, r7
   86176:	430e      	orrs	r6, r1
   86178:	fa00 f407 	lsl.w	r4, r0, r7
   8617c:	0c2f      	lsrs	r7, r5, #16
   8617e:	fbb6 f0f7 	udiv	r0, r6, r7
   86182:	fa1f fe85 	uxth.w	lr, r5
   86186:	fb07 6210 	mls	r2, r7, r0, r6
   8618a:	fb0e f100 	mul.w	r1, lr, r0
   8618e:	0c26      	lsrs	r6, r4, #16
   86190:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   86194:	4299      	cmp	r1, r3
   86196:	d909      	bls.n	861ac <__udivdi3+0x5c>
   86198:	195b      	adds	r3, r3, r5
   8619a:	f100 32ff 	add.w	r2, r0, #4294967295
   8619e:	f080 80ee 	bcs.w	8637e <__udivdi3+0x22e>
   861a2:	4299      	cmp	r1, r3
   861a4:	f240 80eb 	bls.w	8637e <__udivdi3+0x22e>
   861a8:	3802      	subs	r0, #2
   861aa:	442b      	add	r3, r5
   861ac:	1a59      	subs	r1, r3, r1
   861ae:	fbb1 f3f7 	udiv	r3, r1, r7
   861b2:	fb07 1113 	mls	r1, r7, r3, r1
   861b6:	fb0e fe03 	mul.w	lr, lr, r3
   861ba:	b2a4      	uxth	r4, r4
   861bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   861c0:	458e      	cmp	lr, r1
   861c2:	d908      	bls.n	861d6 <__udivdi3+0x86>
   861c4:	1949      	adds	r1, r1, r5
   861c6:	f103 32ff 	add.w	r2, r3, #4294967295
   861ca:	f080 80da 	bcs.w	86382 <__udivdi3+0x232>
   861ce:	458e      	cmp	lr, r1
   861d0:	f240 80d7 	bls.w	86382 <__udivdi3+0x232>
   861d4:	3b02      	subs	r3, #2
   861d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   861da:	2600      	movs	r6, #0
   861dc:	4631      	mov	r1, r6
   861de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   861e2:	428b      	cmp	r3, r1
   861e4:	d847      	bhi.n	86276 <__udivdi3+0x126>
   861e6:	fab3 f683 	clz	r6, r3
   861ea:	2e00      	cmp	r6, #0
   861ec:	d148      	bne.n	86280 <__udivdi3+0x130>
   861ee:	428b      	cmp	r3, r1
   861f0:	d302      	bcc.n	861f8 <__udivdi3+0xa8>
   861f2:	4282      	cmp	r2, r0
   861f4:	f200 80cf 	bhi.w	86396 <__udivdi3+0x246>
   861f8:	2001      	movs	r0, #1
   861fa:	4631      	mov	r1, r6
   861fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86200:	b912      	cbnz	r2, 86208 <__udivdi3+0xb8>
   86202:	2501      	movs	r5, #1
   86204:	fbb5 f5f2 	udiv	r5, r5, r2
   86208:	fab5 fc85 	clz	ip, r5
   8620c:	f1bc 0f00 	cmp.w	ip, #0
   86210:	d178      	bne.n	86304 <__udivdi3+0x1b4>
   86212:	1b49      	subs	r1, r1, r5
   86214:	0c2f      	lsrs	r7, r5, #16
   86216:	fa1f fe85 	uxth.w	lr, r5
   8621a:	2601      	movs	r6, #1
   8621c:	fbb1 f0f7 	udiv	r0, r1, r7
   86220:	fb07 1110 	mls	r1, r7, r0, r1
   86224:	fb0e f200 	mul.w	r2, lr, r0
   86228:	0c23      	lsrs	r3, r4, #16
   8622a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8622e:	428a      	cmp	r2, r1
   86230:	d907      	bls.n	86242 <__udivdi3+0xf2>
   86232:	1949      	adds	r1, r1, r5
   86234:	f100 33ff 	add.w	r3, r0, #4294967295
   86238:	d202      	bcs.n	86240 <__udivdi3+0xf0>
   8623a:	428a      	cmp	r2, r1
   8623c:	f200 80bc 	bhi.w	863b8 <__udivdi3+0x268>
   86240:	4618      	mov	r0, r3
   86242:	1a89      	subs	r1, r1, r2
   86244:	fbb1 f3f7 	udiv	r3, r1, r7
   86248:	fb07 1113 	mls	r1, r7, r3, r1
   8624c:	fb0e fe03 	mul.w	lr, lr, r3
   86250:	b2a4      	uxth	r4, r4
   86252:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   86256:	4596      	cmp	lr, r2
   86258:	d908      	bls.n	8626c <__udivdi3+0x11c>
   8625a:	1952      	adds	r2, r2, r5
   8625c:	f103 31ff 	add.w	r1, r3, #4294967295
   86260:	f080 8091 	bcs.w	86386 <__udivdi3+0x236>
   86264:	4596      	cmp	lr, r2
   86266:	f240 808e 	bls.w	86386 <__udivdi3+0x236>
   8626a:	3b02      	subs	r3, #2
   8626c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   86270:	4631      	mov	r1, r6
   86272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86276:	2600      	movs	r6, #0
   86278:	4630      	mov	r0, r6
   8627a:	4631      	mov	r1, r6
   8627c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86280:	f1c6 0420 	rsb	r4, r6, #32
   86284:	fa22 f504 	lsr.w	r5, r2, r4
   86288:	40b3      	lsls	r3, r6
   8628a:	432b      	orrs	r3, r5
   8628c:	fa21 f704 	lsr.w	r7, r1, r4
   86290:	ea4f 4813 	mov.w	r8, r3, lsr #16
   86294:	fbb7 fcf8 	udiv	ip, r7, r8
   86298:	fa1f f983 	uxth.w	r9, r3
   8629c:	fb08 771c 	mls	r7, r8, ip, r7
   862a0:	fa20 fe04 	lsr.w	lr, r0, r4
   862a4:	fa01 f506 	lsl.w	r5, r1, r6
   862a8:	fb09 f40c 	mul.w	r4, r9, ip
   862ac:	ea4e 0505 	orr.w	r5, lr, r5
   862b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   862b4:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   862b8:	42bc      	cmp	r4, r7
   862ba:	fa02 f206 	lsl.w	r2, r2, r6
   862be:	d904      	bls.n	862ca <__udivdi3+0x17a>
   862c0:	18ff      	adds	r7, r7, r3
   862c2:	f10c 31ff 	add.w	r1, ip, #4294967295
   862c6:	d368      	bcc.n	8639a <__udivdi3+0x24a>
   862c8:	468c      	mov	ip, r1
   862ca:	1b3f      	subs	r7, r7, r4
   862cc:	fbb7 f4f8 	udiv	r4, r7, r8
   862d0:	fb08 7714 	mls	r7, r8, r4, r7
   862d4:	fb09 f904 	mul.w	r9, r9, r4
   862d8:	b2ad      	uxth	r5, r5
   862da:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   862de:	4589      	cmp	r9, r1
   862e0:	d904      	bls.n	862ec <__udivdi3+0x19c>
   862e2:	18c9      	adds	r1, r1, r3
   862e4:	f104 35ff 	add.w	r5, r4, #4294967295
   862e8:	d35d      	bcc.n	863a6 <__udivdi3+0x256>
   862ea:	462c      	mov	r4, r5
   862ec:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   862f0:	fba4 2302 	umull	r2, r3, r4, r2
   862f4:	ebc9 0101 	rsb	r1, r9, r1
   862f8:	4299      	cmp	r1, r3
   862fa:	d349      	bcc.n	86390 <__udivdi3+0x240>
   862fc:	d045      	beq.n	8638a <__udivdi3+0x23a>
   862fe:	4620      	mov	r0, r4
   86300:	2600      	movs	r6, #0
   86302:	e76b      	b.n	861dc <__udivdi3+0x8c>
   86304:	f1cc 0420 	rsb	r4, ip, #32
   86308:	fa05 f50c 	lsl.w	r5, r5, ip
   8630c:	fa21 f304 	lsr.w	r3, r1, r4
   86310:	0c2a      	lsrs	r2, r5, #16
   86312:	fbb3 f6f2 	udiv	r6, r3, r2
   86316:	fa1f fe85 	uxth.w	lr, r5
   8631a:	fb02 3816 	mls	r8, r2, r6, r3
   8631e:	fa20 f704 	lsr.w	r7, r0, r4
   86322:	fa01 f10c 	lsl.w	r1, r1, ip
   86326:	fb0e f906 	mul.w	r9, lr, r6
   8632a:	430f      	orrs	r7, r1
   8632c:	0c3c      	lsrs	r4, r7, #16
   8632e:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   86332:	4599      	cmp	r9, r3
   86334:	fa00 f40c 	lsl.w	r4, r0, ip
   86338:	d907      	bls.n	8634a <__udivdi3+0x1fa>
   8633a:	195b      	adds	r3, r3, r5
   8633c:	f106 31ff 	add.w	r1, r6, #4294967295
   86340:	d238      	bcs.n	863b4 <__udivdi3+0x264>
   86342:	4599      	cmp	r9, r3
   86344:	d936      	bls.n	863b4 <__udivdi3+0x264>
   86346:	3e02      	subs	r6, #2
   86348:	442b      	add	r3, r5
   8634a:	ebc9 0303 	rsb	r3, r9, r3
   8634e:	fbb3 f0f2 	udiv	r0, r3, r2
   86352:	fb02 3310 	mls	r3, r2, r0, r3
   86356:	fb0e f100 	mul.w	r1, lr, r0
   8635a:	b2bf      	uxth	r7, r7
   8635c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   86360:	4299      	cmp	r1, r3
   86362:	d907      	bls.n	86374 <__udivdi3+0x224>
   86364:	195b      	adds	r3, r3, r5
   86366:	f100 37ff 	add.w	r7, r0, #4294967295
   8636a:	d221      	bcs.n	863b0 <__udivdi3+0x260>
   8636c:	4299      	cmp	r1, r3
   8636e:	d91f      	bls.n	863b0 <__udivdi3+0x260>
   86370:	3802      	subs	r0, #2
   86372:	442b      	add	r3, r5
   86374:	4617      	mov	r7, r2
   86376:	1a59      	subs	r1, r3, r1
   86378:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   8637c:	e74e      	b.n	8621c <__udivdi3+0xcc>
   8637e:	4610      	mov	r0, r2
   86380:	e714      	b.n	861ac <__udivdi3+0x5c>
   86382:	4613      	mov	r3, r2
   86384:	e727      	b.n	861d6 <__udivdi3+0x86>
   86386:	460b      	mov	r3, r1
   86388:	e770      	b.n	8626c <__udivdi3+0x11c>
   8638a:	40b0      	lsls	r0, r6
   8638c:	4290      	cmp	r0, r2
   8638e:	d2b6      	bcs.n	862fe <__udivdi3+0x1ae>
   86390:	1e60      	subs	r0, r4, #1
   86392:	2600      	movs	r6, #0
   86394:	e722      	b.n	861dc <__udivdi3+0x8c>
   86396:	4630      	mov	r0, r6
   86398:	e720      	b.n	861dc <__udivdi3+0x8c>
   8639a:	42bc      	cmp	r4, r7
   8639c:	d994      	bls.n	862c8 <__udivdi3+0x178>
   8639e:	f1ac 0c02 	sub.w	ip, ip, #2
   863a2:	441f      	add	r7, r3
   863a4:	e791      	b.n	862ca <__udivdi3+0x17a>
   863a6:	4589      	cmp	r9, r1
   863a8:	d99f      	bls.n	862ea <__udivdi3+0x19a>
   863aa:	3c02      	subs	r4, #2
   863ac:	4419      	add	r1, r3
   863ae:	e79d      	b.n	862ec <__udivdi3+0x19c>
   863b0:	4638      	mov	r0, r7
   863b2:	e7df      	b.n	86374 <__udivdi3+0x224>
   863b4:	460e      	mov	r6, r1
   863b6:	e7c8      	b.n	8634a <__udivdi3+0x1fa>
   863b8:	3802      	subs	r0, #2
   863ba:	4429      	add	r1, r5
   863bc:	e741      	b.n	86242 <__udivdi3+0xf2>
   863be:	bf00      	nop
   863c0:	00000001 	.word	0x00000001
   863c4:	00000002 	.word	0x00000002
   863c8:	00000004 	.word	0x00000004
   863cc:	00000008 	.word	0x00000008
   863d0:	00000010 	.word	0x00000010
   863d4:	00000020 	.word	0x00000020
   863d8:	00000040 	.word	0x00000040
   863dc:	00000080 	.word	0x00000080
   863e0:	00000100 	.word	0x00000100
   863e4:	00000200 	.word	0x00000200
   863e8:	00000400 	.word	0x00000400
   863ec:	006d6f43 	.word	0x006d6f43
   863f0:	75676552 	.word	0x75676552
   863f4:	6574616c 	.word	0x6574616c
   863f8:	00000000 	.word	0x00000000
   863fc:	09097325 	.word	0x09097325
   86400:	25096325 	.word	0x25096325
   86404:	75250975 	.word	0x75250975
   86408:	0d752509 	.word	0x0d752509
   8640c:	0000000a 	.word	0x0000000a
   86410:	454c4449 	.word	0x454c4449
   86414:	00000000 	.word	0x00000000
   86418:	00000a0d 	.word	0x00000a0d
   8641c:	20726d54 	.word	0x20726d54
   86420:	00637653 	.word	0x00637653
   86424:	00000043 	.word	0x00000043

00086428 <_global_impure_ptr>:
   86428:	200701a0 33323130 37363534 62613938     ... 0123456789ab
   86438:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
   86448:	76757473 7a797877 00000000              stuvwxyz....

00086454 <zeroes.6869>:
   86454:	30303030 30303030 30303030 30303030     0000000000000000
   86464:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   86474:	00000000 33323130 37363534 62613938     ....0123456789ab
   86484:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00086494 <blanks.6868>:
   86494:	20202020 20202020 20202020 20202020                     

000864a4 <_ctype_>:
   864a4:	20202000 20202020 28282020 20282828     .         ((((( 
   864b4:	20202020 20202020 20202020 20202020                     
   864c4:	10108820 10101010 10101010 10101010      ...............
   864d4:	04040410 04040404 10040404 10101010     ................
   864e4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   864f4:	01010101 01010101 01010101 10101010     ................
   86504:	42421010 42424242 02020202 02020202     ..BBBBBB........
   86514:	02020202 02020202 02020202 10101010     ................
   86524:	00000020 00000000 00000000 00000000      ...............
	...

000865a8 <_init>:
   865a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   865aa:	bf00      	nop
   865ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   865ae:	bc08      	pop	{r3}
   865b0:	469e      	mov	lr, r3
   865b2:	4770      	bx	lr

000865b4 <__init_array_start>:
   865b4:	000843fd 	.word	0x000843fd

000865b8 <__frame_dummy_init_array_entry>:
   865b8:	00080119                                ....

000865bc <_fini>:
   865bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   865be:	bf00      	nop
   865c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   865c2:	bc08      	pop	{r3}
   865c4:	469e      	mov	lr, r3
   865c6:	4770      	bx	lr

000865c8 <__fini_array_start>:
   865c8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070198 	.word	0x20070198

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <sync>:
20070138:	00000001                                ....

2007013c <B>:
2007013c:	3c717300 3cff98c4 bc9d1b72 3ac02196     .sq<...<r....!.:
2007014c:	3cdeab6c bd68acad 3d87e8bd bcee115a     l..<..h....=Z...
2007015c:	bdc4c57c 3f17f94a 3f17f94a bdc4c57c     |...J..?J..?|...
2007016c:	bcee115a 3d87e8bd bd68acad 3cdeab6c     Z......=..h.l..<
2007017c:	3ac02196 bc9d1b72 3cff98c4 3c717300     .!.:r......<.sq<

2007018c <uxCriticalNesting>:
2007018c:	aaaaaaaa                                ....

20070190 <xFreeBytesRemaining>:
20070190:	00008000                                ....

20070194 <xNextTaskUnblockTime>:
20070194:	0001ffff                                         ..

20070196 <g_interrupt_enabled>:
20070196:	09000001                                         ..

20070198 <SystemCoreClock>:
20070198:	003d0900 00000000                       ..=.....

200701a0 <impure_data>:
200701a0:	00000000 2007048c 200704f4 2007055c     ....... ... \.. 
	...
200701d4:	00086424 00000000 00000000 00000000     $d..............
	...
20070248:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070258:	0005deec 0000000b 00000000 00000000     ................
	...

200705c8 <_impure_ptr>:
200705c8:	200701a0                                ... 

200705cc <__ctype_ptr__>:
200705cc:	000864a4                                .d..

200705d0 <lc_ctype_charset>:
200705d0:	49435341 00000049 00000000 00000000     ASCII...........
	...

200705f0 <__mb_cur_max>:
200705f0:	00000001                                ....

200705f4 <__malloc_av_>:
	...
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 
200709dc:	200709d4 200709d4 200709dc 200709dc     ... ... ... ... 
200709ec:	200709e4 200709e4 200709ec 200709ec     ... ... ... ... 

200709fc <__malloc_trim_threshold>:
200709fc:	00020000                                ....

20070a00 <__malloc_sbrk_base>:
20070a00:	ffffffff                                ....

20070a04 <__wctomb>:
20070a04:	00085be5                                .[..
